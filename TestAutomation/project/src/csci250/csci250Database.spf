<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>csci250</string>
			<key>host</key>
			<string>127.0.0.1</string>
			<key>kcid</key>
			<string>8947417651101931909</string>
			<key>name</key>
			<string>csci250</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>latin1</string>
			<key>contentFilter</key>
			<dict/>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGNjdYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoK0HCBUWFxgZHSQoLDA0VSRudWxs0wkK
			CwwQFFdOUy5rZXlzWk5TLm9iamVjdHNWJGNsYXNzow0OD4ACgAOA
			BKMREhOABYAGgAiADFR0eXBlVHJvd3NUa2V5c18QJlNlbGVjdGlv
			bkRldGFpbFR5cGVQcmltYXJ5S2V5ZWREZXRhaWxz0wkKCxobHKCg
			gAfSHh8gIVokY2xhc3NuYW1lWCRjbGFzc2VzXxATTlNNdXRhYmxl
			RGljdGlvbmFyeaMgIiNcTlNEaWN0aW9uYXJ5WE5TT2JqZWN00goL
			JSehJoAJgAvSCykqK1lOUy5zdHJpbmeAClJpZNIeHy0uXxAPTlNN
			dXRhYmxlU3RyaW5noy0vI1hOU1N0cmluZ9IeHzEyXk5TTXV0YWJs
			ZUFycmF5ozEzI1dOU0FycmF50h4fIjWiIiNfEA9OU0tleWVkQXJj
			aGl2ZXLRODlUZGF0YYABAAgAEQAaACMALQAyADcARQBLAFIAWgBl
			AGwAcAByAHQAdgB6AHwAfgCAAIIAhwCMAJEAugDBAMIAwwDFAMoA
			1QDeAPQA+AEFAQ4BEwEVARcBGQEeASgBKgEtATIBRAFIAVEBVgFl
			AWkBcQF2AXkBiwGOAZMAAAAAAAACAQAAAAAAAAA6AAAAAAAAAAAA
			AAAAAAABlQ==
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{1, 0}, {747.5, 475}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<data>
			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
			</data>
			<key>table</key>
			<string>auth_group</string>
			<key>view</key>
			<string>SP_VIEW_CONTENT</string>
			<key>windowVerticalDividerPosition</key>
			<real>199.5</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>--
-- Dumping data for table `main_final_exam`
--

INSERT INTO `main_final_exam` (`id`, `section_full_title`, `order`) VALUES
(1, 'Section 1: Tuesday, December 12 from 8:00am to 11:00am', 0),
(2, 'Section 2: Thursday, December 7 from 8:00am to 11:00am', 1)</string>
		<string>--
-- Indexes for dumped tables
--

--
-- Indexes for table `main_item`
--
ALTER TABLE `main_item`
  ADD PRIMARY KEY (`id`),
  ADD KEY `main_item_topic_id_a4f03a5f_fk_main_topic_id` (`topic_id`)</string>
		<string>--
-- Database: `course_csci_250_django111`
--

--
-- Dumping data for table `main_assignments`
--



INSERT INTO `main_assignments` (`id`, `assignment_title`, `assignment_short_title`, `assignment_order`, `assignment_due_date_time`, `assignment_date_tbd`) VALUES
(2, 'Assignment 1 (Numeral Systems &amp; Intro to C)', 'Assignment01', 10, '2017-09-22 03:59:00', 0),
(3, 'Assignment 2 (C to MIPS)', 'Assignment02', 20, '2017-10-11 03:59:00', 0),
(4, 'Assignment 3 (MIPS to Machine Code &amp; Vice-versa)', 'Assignment03', 30, '2017-07-25 03:59:00', 1),
(5, 'Assignment 4 (Combinational &amp; Sequential Logic)', 'Assignment04', 40, '2017-07-28 03:59:00', 1),
(6, 'Assignment 5 (Single-cycle CPU, Pipelining &amp; Data Hazards)', 'Assignment05', 50, '2017-08-02 03:59:00', 1)</string>
		<string>INSERT INTO `main_assignments` (`id`, `assignment_title`, `assignment_short_title`, `assignment_order`, `assignment_due_date_time`, `assignment_date_tbd`) VALUES
(2, 'Assignment 1 (Numeral Systems &amp; Intro to C)', 'Assignment01', 10, '2017-09-22 03:59:00', 0),
(3, 'Assignment 2 (C to MIPS)', 'Assignment02', 20, '2017-10-11 03:59:00', 0),
(4, 'Assignment 3 (MIPS to Machine Code &amp; Vice-versa)', 'Assignment03', 30, '2017-07-25 03:59:00', 1),
(5, 'Assignment 4 (Combinational &amp; Sequential Logic)', 'Assignment04', 40, '2017-07-28 03:59:00', 1),
(6, 'Assignment 5 (Single-cycle CPU, Pipelining &amp; Data Hazards)', 'Assignment05', 50, '2017-08-02 03:59:00', 1)</string>
		<string>--

INSERT INTO `main_assignment_answer` (`id`, `answer_python_code`, `answer_element_type`, `answer_element_style`, `question_id`, `placeholder`) VALUES
(3, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 4, ''),
(4, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 80%;', 5, ''),
(5, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 6, ''),
(6, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 9, ''),
(7, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 10, ''),
(8, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 11, ''),
(9, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 12, ''),
(10, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 0 auto; width: 97%; margin-bottom: 15px;', 13, ''),
(11, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 0 auto; width: 97%; margin-bottom: 15px;', 14, ''),
(12, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 350px;', 16, ''),
(13, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 70px;', 17, ''),
(14, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 350px;', 18, ''),
(15, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 19, ''),
(16, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 350px;', 20, ''),
(17, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 21, ''),
(18, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 22, ''),
(19, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 23, ''),
(20, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 24, ''),
(22, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 100px;', 25, ''),
(23, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 125px;', 26, ''),
(24, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 80%;', 27, ''),
(25, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 80%;', 28, ''),
(26, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 80%;', 29, ''),
(27, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 30, ''),
(28, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 31, 'True/False'),
(29, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 32, 'True/False'),
(30, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 33, 'True/False'),
(31, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 34, 'True/False'),
(32, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 35, 'True/False'),
(33, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 36, ''),
(34, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 50%;', 37, ''),
(35, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 38, ''),
(36, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 39, '1st State = 0/1, 2nd State = 0/1, ...'),
(37, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 40, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(38, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 41, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(39, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 42, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(40, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 43, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(41, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 44, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(42, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 45, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(43, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 46, 'Without Pipelining = x. With pipelining = y.'),
(45, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 125px;', 48, ''),
(46, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 125px;', 49, ''),
(47, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 50, 'Critical path instruction = x. Critical path duration = y.')</string>
		<string>INSERT INTO `main_assignment_question` (`id`, `python_code`, `parent_question_id`, `repeat`, `title`, `element_type`, `element_style`, `question_order`, `question_detail_id`, `assignment_id`) VALUES
(4, 'num = randint(1, 31)\n\nans = cofc_convert_decimal_to_unsigned_binary(num)', -1, 5, 'Convert the decimal number: ***num*** to a 5-bit unsigned binary', 'div', 'margin: 5px;', 10, 0, 2),
(5, 'num = randint(10, 25)\n\nans = cofc_convert_decimal_to_unsigned_binary(num)', -1, 1, 'What will be the output of the following C program ?\n\n#include &amp;lt;stdio.h&amp;gt;\nint main()\n{\n	int x = ***num***;\n	int *y;\n	int *z;\n	y = &amp;x; /* Assume address of x is 500 (decimal) and size of integer is 4 byte long */\n	z = y;\n	*y = *z + 1;\n	x = x + 1;\n	printf(\"x = %d, y = %p, z = %p\\n\", x, y, z); // Use decimal when printing pointers\n	return 0;\n}', 'div', 'margin: 5px; white-space: pre', 20, 0, 2),
(6, 'num = randint(2, 5)', -1, 1, 'For a system of n-digit unsigned base ***num*** numbers (n &gt; 1), how many numbers (unique combinations) can be represented?', 'div', 'margin: 5px;', 30, 0, 2),
(9, '', -1, 1, 'For an n-digit 2\'s complement binary number (n &gt; 1), what is the number of negative integers (as a function of n)?', 'div', 'margin: 5px;', 40, 0, 2),
(10, 'num = randint(-20, 20)\n\nans = cofc_convert_decimal_to_unsigned_binary(num)', -1, 5, 'Convert the decimal number: ***num*** to a 5-bit 1\'s complement binary (if value can\'t be represented, answer \'NA\')', 'div', 'margin: 5px;', 12, 0, 2),
(11, 'num = randint(-20, 20)\n\nans = cofc_convert_decimal_to_unsigned_binary(num)', -1, 5, 'Convert the decimal number: ***num*** to a 5-bit 2\'s complement binary (if value can\'t be represented, answer \'NA\')', 'div', 'margin: 5px;', 14, 0, 2),
(12, '', -1, 1, 'For an n-digit 2\'s complement number (n &gt; 1), how many zeros are there?', 'div', 'margin: 5px;', 45, 0, 2),
(13, '', -1, 1, 'Write a \'swap\' function with the following function header:\n\nvoid swap(int *p1, int *p2);\n \nThe \'swap\' function should swap the values of two integers.\n\nint main()\n{\n 	int x = 10;\n 	int y = 20;\n 	// &lt;span style=\'color: indianred;\'&gt;You must figure out how to call the function correctly (include this in your answer)&lt;/span&gt;\n 	// Next line should print out x: 20, y: 10\n 	//\n 	printf(\"x: %d, y: %d\\n\", x, y);\n}', 'div', 'margin: 5px; white-space: pre', 50, 0, 2),
(14, '', -1, 1, 'According to the C standard, arr[0] is actually syntactic shorthand for *(arr+0). Write a C program that loops twice, the first loop is to initialize the elements of some integer array (say size 20), and a second loop to print all the elements of the array (next to their addresses). &lt;span style=\"color: indianred;\"&gt;In both loops, use the alternative notation (* notation).&lt;/span&gt;\n\nThe output of your code should look like the following:\n\n&amp;lt;address of 1st element&amp;gt;, &amp;lt;value of 1st element&amp;gt; (e.g. 0x7fff5fbff63c, 50)\n&amp;lt;address of 2nd element&amp;gt;, &amp;lt;value of 2nd element&amp;gt; (e.g. 0x7fff5fbff640, 50) ', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 60, 0, 2),
(16, '', -1, 1, 'Translate the following C code to MIPS assembly code.\n\nint arr[20];\nvoid main()\n{\n	int counter = 0;\n 	int s0;\n 	int s1;\n 	for(s0 = 0; s0 &lt; 5; s0++)\n 		for (s1 = 0; s1 &lt; 4; s1++)\n 		{\n 			arr[counter] = s0 + s1;\n			counter = counter + 1;\n 		}\n}', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 3),
(17, '', -1, 1, 'Provide a set of pure MIPS instructions that may be used to implement the following pseudo-instruction:\n\nnot $t1, $t2 # bit-wise invert', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 3),
(18, '', -1, 1, 'Translate the following C code to MIPS assembly code.\n\nvoid main()\n{\n	int counter = 20;\n	int loc_arr[16];\n\n 	while(counter &gt;= 5)\n 	{\n 		loc_arr[counter - 5] = 50;\n 		counter = counter - 1;\n 	}\n}', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 3),
(19, '', -1, 1, 'Assume $t0 holds the value 0x00101000. What is the value of $t2 after the following instructions?\n\nslt $t2, $0, $t0\nbne $t2, $0, ELSE\nj DONE\nELSE:\naddi $t2, $t2, 2\nDONE:', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 3),
(20, '', -1, 1, 'Translate the following C code to MIPS assembly code.\n\nint counter = 0;\n\nvoid change_global(int value)\n{\n	counter = counter + value;\n} \n\nvoid main()\n{\n	change_global(5);\n	change_global(10);\n}', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 3),
(21, 'all_instructions = [Mips_instruction(\"add\", \"000000\", \"100000\", \"R\"), \nMips_instruction(\"sub\", \"000000\", \"100010\", \"R\"), \nMips_instruction(\"addi\", \"001000\", \"\", \"I\"), Mips_instruction(\"and\", \"000000\", \"100100\", \"R\"),\nMips_instruction(\"andi\", \"001100\", \"\", \"I\"), Mips_instruction(\"or\", \"000000\", \"100101\", \"R\"),\nMips_instruction(\"ori\", \"001101\", \"\", \"I\"), Mips_instruction(\"slt\", \"000000\", \"101010\", \"R\"),\nMips_instruction(\"slti\", \"001010\", \"\", \"I\"), Mips_instruction(\"lw\", \"100011\", \"\", \"I\"),\nMips_instruction(\"sw\", \"101011\", \"\", \"I\")]\n\ndef generate_random_instruction():\n    curr_inst = choice(all_instructions)\n    if curr_inst.inst_type == \"R\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        rd = choice(all_registers)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, rd, 0)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, rd, 0)\n    elif curr_inst.inst_type == \"I\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        imm = randint(-20, 20)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, 0, imm)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, 0, imm)\n\n    return [inst_mips, inst_bin]\n\nq_s = generate_random_instruction()\nquestion = q_s[1]\nans = q_s[0]', -1, 5, ' Provide the &lt;u&gt;type&lt;/u&gt; and &lt;u&gt;assembly language instruction&lt;/u&gt; for the following binary value:\n\n***question***', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(22, 'all_instructions = [Mips_instruction(\"add\", \"000000\", \"100000\", \"R\"), \nMips_instruction(\"sub\", \"000000\", \"100010\", \"R\"), \nMips_instruction(\"addi\", \"001000\", \"\", \"I\"), Mips_instruction(\"and\", \"000000\", \"100100\", \"R\"),\nMips_instruction(\"andi\", \"001100\", \"\", \"I\"), Mips_instruction(\"or\", \"000000\", \"100101\", \"R\"),\nMips_instruction(\"ori\", \"001101\", \"\", \"I\"), Mips_instruction(\"slt\", \"000000\", \"101010\", \"R\"),\nMips_instruction(\"slti\", \"001010\", \"\", \"I\"), Mips_instruction(\"lw\", \"100011\", \"\", \"I\"),\nMips_instruction(\"sw\", \"101011\", \"\", \"I\")]\n\ndef generate_random_instruction():\n    curr_inst = choice(all_instructions)\n    if curr_inst.inst_type == \"R\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        rd = choice(all_registers)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, rd, 0)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, rd, 0)\n    elif curr_inst.inst_type == \"I\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        imm = randint(-20, 20)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, 0, imm)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, 0, imm)\n\n    return [inst_mips, inst_bin]\n\nq_s = generate_random_instruction()\nquestion = q_s[0]\nans = q_s[1]', -1, 5, ' Provide the &lt;u&gt;type&lt;/u&gt; and &lt;u&gt;hexadecimal representation&lt;/u&gt; of the following instruction:\n\n***question***', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(23, '', -1, 1, 'Provide the &lt;u&gt;type&lt;/u&gt;, &lt;u&gt;assembly language instruction&lt;/u&gt;, and &lt;u&gt;hexadecimal representation&lt;/u&gt; of the instruction described by the following MIPS fields:\n\nop = 0, rs = 3, rt = 2, rd = 3, shamt = 0, funct = 34', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(24, '', -1, 1, 'Provide the &lt;u&gt;type&lt;/u&gt;, &lt;u&gt;assembly language instruction&lt;/u&gt;, and &lt;u&gt;hexadecimal representation&lt;/u&gt; of the instruction described by the following MIPS fields:\n\n op = 0x23, rs = 1, rt = 2, const = 0x4 ', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(25, '', -1, 1, 'Write the &lt;u&gt;\"pure\"&lt;/u&gt; MIPS assembly code that loads the 32-bit constant/immediate below into register $t1\n\n 0010 0000 0000 0001 0100 1001 0010 0100', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(26, '', -1, 1, 'Convert the following MIPS code to binary (or machine language):\n\n100 beq $s0, $s1, IF 		# branch if ( i == j )\n104 addi $s1, $s1, -1 		# j = j - 1\n108 j L1 					# jump over else\n112 IF: addi $s0, $s0, 1 		# i = i + 1\n116 L1: add $s1, $s1, $s0 	# j = j + i\n\nNote here that the address of each line/word is specified in decimal. When you convert to machine language, everything should be in binary. &lt;u style=\"color: indianred;\"&gt;Please add at least one space between the fields of every instruction.&lt;/u&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(27, '', -1, 1, 'Find the output (boolean expression) for the circuit below (&lt;u&gt;without simplifying&lt;/u&gt;):\n\n&lt;img src=\"/static/main/img/circuits/circuit01.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 5),
(28, '', -1, 1, 'Find the output (boolean expression) for the circuit below (&lt;u&gt;without simplifying&lt;/u&gt;):\n\n&lt;img src=\"/static/main/img/circuits/circuit02.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 10, 0, 5),
(29, '', -1, 1, 'Find the output (boolean expression) for the circuit below (&lt;u&gt;without simplifying&lt;/u&gt;):\n\n&lt;img src=\"/static/main/img/circuits/circuit03.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 20, 0, 5),
(30, '', -1, 1, 'What is the number of control/select wires for an 8-1 multiplexer?', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 5, 0, 5),
(31, '', -1, 1, 'The variables p, q, and s have the following truth values: p = True, q = True, s = False.  What\'s the truth value for the following boolean expressions:\n&lt;div style=\"text-align: center; color: indianred;\"&gt;p + ~q&lt;/div&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 13, 0, 5),
(32, '', -1, 1, 'The variables p, q, and s have the following truth values: p = True, q = True, s = False.  What\'s the truth value for the following boolean expressions:\n&lt;div style=\"text-align: center; color: indianred;\"&gt;(p . q) + s&lt;/div&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 14, 0, 5),
(33, '', -1, 1, 'The variables p, q, and s have the following truth values: p = True, q = True, s = False.  What\'s the truth value for the following boolean expressions:\n&lt;div style=\"text-align: center; color: indianred;\"&gt;p . (q + s)&lt;/div&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 15, 0, 5),
(34, '', -1, 1, 'The variables p, q, and s have the following truth values: p = True, q = True, s = False.  What\'s the truth value for the following boolean expressions:\n&lt;div style=\"text-align: center; color: indianred;\"&gt;p + ~(q . s)&lt;/div&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 16, 0, 5),
(35, '', -1, 1, 'The variables p, q, and s have the following truth values: p = True, q = True, s = False.  What\'s the truth value for the following boolean expressions:\n&lt;div style=\"text-align: center; color: indianred;\"&gt;~(q . p . ~s)&lt;/div&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 17, 0, 5),
(36, '', -1, 1, 'How many two-input AND gates are required to realize:\n&lt;div style=\"text-align: center; color: indianred;\"&gt;Y = C . D + E . F + G&lt;/div&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 30, 0, 5),
(37, '', -1, 1, 'How many two-input AND gates and two-input OR gates are required to realize:\n&lt;div style=\"text-align: center; color: indianred;\"&gt;Y = B . D + C . E + A . B&lt;/div&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 35, 0, 5),
(38, '', -1, 1, 'Find the boolean expression that describes \'?\' (without simplifying)\n\n&lt;table style=\"width: 95%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; text-align: center; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;p&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;q&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;s&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;?&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;0&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;0&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;1&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;1&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;1&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;1&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;0&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;0&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 40, 0, 5),
(39, '', -1, 1, 'The diagram below is called a \'Gated SR Latch\' circuit, built from \'NOR\'s and \'AND\'s. Provide the Q value for the 1st, 2nd, 3rd, and 4th state.\r\n\r\n&lt;img src=\"/static/main/img/circuits/circuit06.png\" alt=\"Smiley face\" width=\"100%\"&gt;\r\n\r\n&lt;table style=\"width: 95%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; text-align: center; margin-bottom: 30px;\"&gt;\r\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;State&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;R&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;E&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;S&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;Q&lt;/td&gt;\r\n	&lt;/tr&gt;\r\n\r\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1st State&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;?&lt;/td&gt;\r\n	&lt;/tr&gt;\r\n\r\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;2nd State&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;?&lt;/td&gt;\r\n	&lt;/tr&gt;\r\n\r\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;3rd State&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;?&lt;/td&gt;\r\n	&lt;/tr&gt;\r\n\r\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;4th State&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;?&lt;/td&gt;\r\n	&lt;/tr&gt;\r\n&lt;/table&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 45, 0, 5),
(40, '', -1, 1, 'According to the diagram and table below:\n\n&lt;img src=\"/static/main/img/circuits/circuit07.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n\n&lt;table style=\"width: 100%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; text-align: center;\"&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Operation&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;AND&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;OR&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;ADD&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;SUB&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;ALUCtr&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;00&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;01&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;10&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;11&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n\nList the values for \'&lt;u style=\"color: green;\"&gt;RegDst&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;ExtOp&lt;/u&gt;\' ,\'&lt;u style=\"color: green;\"&gt;ALUCtr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemWr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemtoReg&lt;/u&gt;\' and \'&lt;u style=\"color: green;\"&gt;RegWr&lt;/u&gt;\' for the \'&lt;u style=\"color: indianred;\"&gt;add&lt;/u&gt;\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 6),
(41, '', -1, 1, 'According to the diagram and table shown in the first question. List the values for \'&lt;u style=\"color: green;\"&gt;RegDst&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;ExtOp&lt;/u&gt;\' ,\'&lt;u style=\"color: green;\"&gt;ALUCtr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemWr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemtoReg&lt;/u&gt;\' and \'&lt;u style=\"color: green;\"&gt;RegWr&lt;/u&gt;\' for the \'&lt;u style=\"color: indianred;\"&gt;ori&lt;/u&gt;\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 10, 0, 6),
(42, '', -1, 1, 'According to the diagram and table shown in the first question. List the values for \'&lt;u style=\"color: green;\"&gt;RegDst&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;ExtOp&lt;/u&gt;\' ,\'&lt;u style=\"color: green;\"&gt;ALUCtr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemWr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemtoReg&lt;/u&gt;\' and \'&lt;u style=\"color: green;\"&gt;RegWr&lt;/u&gt;\' for the \'&lt;u style=\"color: indianred;\"&gt;lw&lt;/u&gt;\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 20, 0, 6),
(43, '', -1, 1, 'According to the diagram and table shown in the first question. List the values for \'&lt;u style=\"color: green;\"&gt;RegDst&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;ExtOp&lt;/u&gt;\' ,\'&lt;u style=\"color: green;\"&gt;ALUCtr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemWr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemtoReg&lt;/u&gt;\' and \'&lt;u style=\"color: green;\"&gt;RegWr&lt;/u&gt;\' for the \'&lt;u style=\"color: indianred;\"&gt;sw&lt;/u&gt;\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 30, 0, 6),
(44, '', -1, 1, 'According to the diagram and table shown in the first question. List the values for \'&lt;u style=\"color: green;\"&gt;RegDst&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;ExtOp&lt;/u&gt;\' ,\'&lt;u style=\"color: green;\"&gt;ALUCtr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemWr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemtoReg&lt;/u&gt;\' and \'&lt;u style=\"color: green;\"&gt;RegWr&lt;/u&gt;\' for the \'&lt;u style=\"color: indianred;\"&gt;sub&lt;/u&gt;\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 40, 0, 6),
(45, '', -1, 1, 'According to the diagram and table shown in the first question. List the values for \'&lt;u style=\"color: green;\"&gt;RegDst&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;ExtOp&lt;/u&gt;\' ,\'&lt;u style=\"color: green;\"&gt;ALUCtr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemWr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemtoReg&lt;/u&gt;\' and \'&lt;u style=\"color: green;\"&gt;RegWr&lt;/u&gt;\' for the \'&lt;u style=\"color: indianred;\"&gt;and&lt;/u&gt;\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 40, 0, 6),
(46, 'rand_1 = randint(150, 250)\nrand_2 = randint(50, 150)\nrand_3 = randint(100, 250)\nrand_4 = randint(200, 250)\nrand_5 = randint(50, 150)', -1, 1, 'Assume the times for CPU stages are as follows:\n\n&lt;table style=\"width: 95%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; text-align: center;\"&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Instruction fetch&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Register Read / Instruction Decode&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;ALU&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Memory Access&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Register Write&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;***rand_1***ps&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;***rand_2***ps&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;***rand_3***ps&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;***rand_4***ps&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;***rand_5***ps&lt;/td&gt;\n	&lt;/tr&gt;\n\n&lt;/table&gt;\n\na) Without pipelining, what\'s the maximum speed (Hertz) we can clock this CPU (according to the numbers above)?\n\nb) With pipelining, what\'s the maximum speed (Hertz) we can clock this CPU (according to the numbers above)?', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 50, 0, 6),
(48, 'rand_1 = randint(150, 250)\nrand_2 = randint(50, 150)\nrand_3 = randint(100, 250)\nrand_4 = randint(200, 250)\nrand_5 = randint(50, 150)', -1, 1, 'Reorder the following sets of instructions to account for the branch delay slot. Only use a \'nop\' if you must\n\naddi $t0, $t1, 5\nori $t2, $t3, -20\nbeq $t0, $s0, label\nlw $t4, 0($t0)', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 60, 0, 6),
(49, 'rand_1 = randint(150, 250)\nrand_2 = randint(50, 150)\nrand_3 = randint(100, 250)\nrand_4 = randint(200, 250)\nrand_5 = randint(50, 150)', -1, 1, 'Reorder the following sets of instructions to account for the branch delay slot. Only use a \'nop\' if you must\n\naddi $t0, $t1, 5\nori $t2, $t3, -20\nbeq $t0, $t2, label\nlw $t4, 0($t0)', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 70, 0, 6),
(50, 'rand_1 = randint(150, 250)\nrand_2 = randint(50, 150)\nrand_3 = randint(100, 250)\nrand_4 = randint(200, 250)\nrand_5 = randint(50, 150)', -1, 1, 'Using the circuit shown in the first question, and according to the following delays for the circuit elements:\n\n&lt;table style=\"width: 100%; font-size: large; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; text-align: center; margin-bottom: 10px;\"&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Element&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Register CLK-to-Q&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Register SETUP&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;MUX&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;ALU&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;(Instruction or Data) Memory Read&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Memory Write&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Register-file Read&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Delays (PS)&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;30&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;20&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;25&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;200&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;250&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;200&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;150&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\na) What instruction (store, add, load, sub, ...) exercises the critical path?\n\nb) What is the duration (in pico seconds) for the critical path?', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 80, 0, 6);
--
-- Dumping data for table `main_final_exam`</string>
		<string>INSERT INTO `main_assignment_answer` (`id`, `answer_python_code`, `answer_element_type`, `answer_element_style`, `question_id`, `placeholder`) VALUES
(3, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 4, ''),
(4, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 80%;', 5, ''),
(5, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 6, ''),
(6, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 9, ''),
(7, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 10, ''),
(8, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 11, ''),
(9, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 12, ''),
(10, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 0 auto; width: 97%; margin-bottom: 15px;', 13, ''),
(11, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 0 auto; width: 97%; margin-bottom: 15px;', 14, ''),
(12, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 350px;', 16, ''),
(13, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 70px;', 17, ''),
(14, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 350px;', 18, ''),
(15, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 19, ''),
(16, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 350px;', 20, ''),
(17, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 21, ''),
(18, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 22, ''),
(19, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 23, ''),
(20, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 24, ''),
(22, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 100px;', 25, ''),
(23, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 125px;', 26, ''),
(24, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 80%;', 27, ''),
(25, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 80%;', 28, ''),
(26, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 80%;', 29, ''),
(27, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 30, ''),
(28, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 31, 'True/False'),
(29, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 32, 'True/False'),
(30, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 33, 'True/False'),
(31, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 34, 'True/False'),
(32, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 35, 'True/False'),
(33, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 36, ''),
(34, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 50%;', 37, ''),
(35, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 38, ''),
(36, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 39, '1st State = 0/1, 2nd State = 0/1, ...'),
(37, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 40, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(38, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 41, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(39, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 42, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(40, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 43, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(41, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 44, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(42, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 45, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(43, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 46, 'Without Pipelining = x. With pipelining = y.'),
(45, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 125px;', 48, ''),
(46, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 125px;', 49, ''),
(47, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 50, 'Critical path instruction = x. Critical path duration = y.')</string>
		<string>-- Dumping data for table `main_quizquestion`
--

INSERT INTO `main_quizquestion` (`id`, `python_code`, `questionText`, `candidateAnswer1`, `candidateAnswer2`, `candidateAnswer3`, `candidateAnswer4`, `correctAnswer`, `repeat`, `quizType`, `author_id`, `subItem_id`) VALUES
(2, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;unsigned binary&lt;/span&gt; sequence corresponding to the following decimal: ***v1,,randDecimal(0, 31)***', '***can1Ans,,decimalToUnsigned(^v1)***', '***can2Ans,,randBinary(0,31,0)***', '***can3Ans,,randBinary(0,31,0)***', '***can4Ans,,randBinary(0,31,0)***', '***ans,,decimalToUnsigned(^v1)***', 3, 'multiple4', -1, 4),
(8, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;unsigned binary&lt;/span&gt; sequence: ***v1,,randBinary(0, 31, 0)***', '***can1Ans,,binaryToDecimal(^v1)***', '***can2Ans,,randDecimal(0,31)***', '***can3Ans,,randDecimal(0,31)***', '***can4Ans,,randDecimal(0,31)***', '***ans,,binaryToDecimal(^v1)***', 3, 'multiple4', -1, 4),
(10, '', 'What\'s the decimal value corresponding to the following hexadecimal sequence: ***v1,,randHex(0, 48)***', '***can1Ans,,hexToDecimal(^v1)***', '***can2Ans,,randDecimal(0,48)***', '***can3Ans,,randDecimal(0,48)***', '***can4Ans,,randDecimal(0,48)***', '***ans,,hexToDecimal(^v1)***', 3, 'multiple4', -1, 4),
(11, '', 'What\'s the binary value corresponding to the following hexadecimal sequence: ***v1,,randHex(0, 31)***', '***can1Ans,,hexToBinary(^v1)***', '***can2Ans,,randBinary(0,31,0)***', '***can3Ans,,randBinary(0,31,0)***', '***can4Ans,,randBinary(0,31,0)***', '***ans,,hexToBinary(^v1)***', 3, 'multiple4', -1, 4),
(13, '', 'What\'s the hexadecimal value corresponding to the following binary sequence: ***v1,,randBinary(0, 31,0)***', '***can1Ans,,binaryToHex(^v1)***', '***can2Ans,,randHex(0,31)***', '***can3Ans,,randHex(0,31)***', '***can4Ans,,randHex(0,31)***', '***ans,,binaryToHex(^v1)***', 3, 'multiple4', -1, 4),
(15, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;unsigned binary&lt;/span&gt; sequence corresponding to the following decimal: ***v1,,randDecimal(0, 31)*** (use 0b notation)', 'Answer here...', '', '', '', '***ans,,decimalToUnsigned(^v1)***', 3, 'input1', -1, 4),
(18, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;unsigned&lt;/span&gt; binary sequence: ***v1,,randBinary(0, 31,0)***', 'Answer here...', '', '', '', '***ans,,binaryToDecimal(^v1)***', 3, 'input1', -1, 4),
(19, '', 'What\'s the decimal value corresponding to the following hexadecimal sequence: ***v1,,randHex(0, 48)***', 'Answer here...', '', '', '', '***ans,,hexToDecimal(^v1)***', 3, 'input1', -1, 4),
(20, '', 'What\'s the binary value corresponding to the following hexadecimal sequence: ***v1,,randHex(0, 31)*** (use 0b notation)', 'Answer here...', '', '', '', '***ans,,hexToBinary(^v1)***', 3, 'input1', -1, 4),
(21, 'v1 = bin(randint(0, 31))\nans = hex(int(v1, 2))', 'What\'s the hexadecimal value corresponding to the following binary sequence: ***variable,v1*** (use 0x notation)', 'Answer here...', '', '', '', '***ans***', 3, 'input1', -1, 4),
(22, 'binarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv1 = binarySequence\n\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv2 = binarySequence\n\nans = addTwoBinaries(v1, v2, 5)', 'Add the two following &lt;span style=\"color: blue;\"&gt;5-bit unsigned&lt;/span&gt; binaries (use 0b notation): &lt;div style=\"margin-top:15px;\"&gt;***variable,v1***&lt;/div&gt;\n&lt;div&gt;***variable,v2***&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 8, 'input1', -1, 4),
(23, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)***', '***ans,,decimalToSignMagnitude(^v1,6)***', '***can2Ans,,randBinary(0,63,6)***', '***can3Ans,,randBinary(0,63,6)***', '***can4Ans,,randBinary(0,63,6)***', '***ans,,decimalToSignMagnitude(^v1,6)***', 4, 'multiple4', -1, 4),
(24, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit one\'s complement&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)***', '***can1Ans,,decimalToOnesComplement(^v1,6)***', '***can2Ans,,randBinary(0,63,6)***', '***can3Ans,,randBinary(0,63,6)***', '***can4Ans,,randBinary(0,63,6)***', '***can1Ans,,decimalToOnesComplement(^v1,6)***', 4, 'multiple4', 1, 6),
(25, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit two\'s complement&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-32, 31)***', '***can1Ans,,decimalToTwosComplement(^v1,6)***', '***can2Ans,,randBinary(0,63,6)***', '***can3Ans,,randBinary(0,63,6)***', '***can4Ans,,randBinary(0,63,6)***', '***ans,,decimalToTwosComplement(^v1,6)***', 4, 'multiple4', 1, 6),
(26, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)*** (use 0b notation)', 'Answer here...', '', '', '', '***ans,,decimalToSignMagnitude(^v1,6)***', 4, 'input1', -1, 4),
(27, 'binarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv1 = binarySequence\n\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv2 = binarySequence\n\nans = addTwoBinaries(v1, v2, 5)\n\n# Now generating a value for candidate 2\n#\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\ncand2 = binarySequence\n\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\ncand3 = binarySequence\n\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\ncand4 = binarySequence\n\n', 'Add the two following &lt;span style=\"color: blue;\"&gt;5-bit unsigned&lt;/span&gt; binaries (use 0b notation): &lt;div style=\"margin-top:15px;\"&gt;***variable,v1,***&lt;/div&gt;\n&lt;div&gt;***variable,v2***&lt;/div&gt;', '***ans***', '***cand2***', '***cand3***', '***cand4***', '***ans***', 4, 'multiple4', -1, 4),
(28, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit one\'s complement&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)***', 'Answer here...', '', '', '', '***ans,,decimalToOnesComplement(^v1,6)***', 4, 'input1', 1, 6),
(29, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit two\'s complement&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-32, 31)***', 'Answer here...', '', '', '', '***ans,,decimalToTwosComplement(^v1,6)***', 4, 'input1', 1, 6),
(30, 'binarySequence = bin(randint(0, 63))\n\nwhile len(binarySequence) != 8:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv1 = binarySequence\n\nans = int(binarySequence[3:], 2)\n\nif binarySequence[2] ==\'1\':\n	ans = ans * -1', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence: ***variable,v1***', '***ans***', '***randint(-31,31)***', '***randint(-31,31)***', '***randint(-31,31)***', '***ans***', 4, 'multiple4', -1, 4),
(31, 'binarySequence = bin(randint(0, 63))\n\nwhile len(binarySequence) != 8:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv1 = binarySequence\n\nans = int(binarySequence[3:], 2)\n\nif binarySequence[2] ==\'1\':\n	ans = ans * -1', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence: ***variable,v1***', 'Answer here...', '', '', '', '***ans***', 4, 'input1', -1, 4),
(32, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit one\'s complement&lt;/span&gt; binary sequence: &lt;br/&gt; ***v1,,randBinary(0,63,6)***', '***can1Ans,,onesComplementToDecimal(^v1)***', '***can2Ans,,randDecimal(-31,31)***', '***can3Ans,,randDecimal(-31,31)***', '***can4Ans,,randDecimal(-31,31)***', '***ans,,onesComplementToDecimal(^v1)***', 4, 'multiple4', 1, 6),
(33, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit one\'s complement&lt;/span&gt; binary sequence: &lt;br/&gt; ***v1,,randBinary(0,63,6)***', 'Answer here...', '', '', '', '***ans,,onesComplementToDecimal(^v1)***', 4, 'input1', 1, 6),
(34, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit two\'s complement&lt;/span&gt; binary sequence:&lt;br/&gt; ***v1,,randBinary(0,63,6)***', '***can1Ans,,twosComplementToDecimal(^v1)***', '***can2Ans,,randDecimal(-32,31)***', '***can3Ans,,randDecimal(-32,31)***', '***can4Ans,,randDecimal(-32,31)***', '***ans,,twosComplementToDecimal(^v1)***', 4, 'multiple4', 1, 6),
(35, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit two\'s complement&lt;/span&gt; binary sequence: ***v1,,randBinary(0,63,6)***', 'Answer here...', '', '', '', '***ans,,twosComplementToDecimal(^v1)***', 4, 'input1', 1, 6),
(36, 'binarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv1 = binarySequence\n\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv2 = binarySequence\n\nans = checkIfOverflow(v1, v2)', 'If we add the two following &lt;span style=\"color: blue;\"&gt;5-bit unsigned&lt;/span&gt; binaries, would we end up with an overflow or not? &lt;div style=\"margin-top:15px;\"&gt;***variable,v1***&lt;/div&gt;\n&lt;div&gt;***variable,v2***&lt;/div&gt;', 'Yes (an overflow will occur)', 'No overflow', '', '', '***ans***', 8, 'multiple2', 2, 4),
(38, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', '***2**(v1 - 1) - 1***', '***randint(1,63)***', '***randint(1,63)***', '***randint(1,63)***', '***2**(v1 - 1) - 1***', 4, 'multiple4', -1, 4),
(39, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', '***-1 * 2**(v1 - 1) + 1***', '***-1 * randint(1,63)***', '***-1 * randint(1,63)***', '***-1 * randint(1,63)***', '***-1 * 2**(v1 - 1) + 1***', 4, 'multiple4', -1, 4),
(40, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', 'Answer here...', '', '', '', '***2**(v1 - 1) - 1***', 4, 'input1', -1, 4),
(42, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', 'Answer here...', '', '', '', '***-1 * 2**(v1 - 1) + 1***', 4, 'input1', -1, 4),
(46, 'v1 = randint(0, 50)\nv2 = randint(0, 50)\nans = v1 + v2', 'What\'s the output of the following code:\n&lt;br/&gt;\n&lt;span style=\"color:red;\"&gt;print(***variable,v1*** + ***variable,v2***)&lt;/span&gt;', '***randint(0, 100)***', '***randint(0, 100)***', '***randint(0, 100)***', '***ans***', '***ans***', 5, 'multiple4', 3, 9),
(47, 'v1 = randint(0, 50)\nv2 = randint(0, 50)\nans = v1 + v2', 'What\'s the output of the following code:\n&lt;br/&gt;\n&lt;span style=\"color:blue;\"&gt;print(***variable,v1*** + ***variable,v2***)&lt;/span&gt;', '***randint(0, 100)***', '***randint(0, 100)***', '***randint(0, 100)***', '***ans***', '***ans***', 5, 'multiple4', 4, 9),
(49, 'v1 = randint(0, 50)\nv2 = randint(0, 50)\nans = v1 + v2', 'What\'s the output of the following Python code:\n&lt;br/&gt;\n&lt;span style=\"color:blue;\"&gt;print(***variable,v1*** + ***variable,v2***)&lt;/span&gt;', '***v1 + v2 + randint(-5, 5)***', '***v1 + v2 + randint(-5, 5)***', '***v1 + v2 + randint(-5, 5)***', '***ans***', '***ans***', 10, 'multiple4', 2, 9),
(50, 'var1 = randint(0,10)\nvar2 = randint(0,10)\nans = var1 + var2\nwhile ans &gt;= 16:\n    var1 = randint(0, 10)\n    var2 = randint(0, 10)\n    ans = var1 + var2\nvar1bin = str(bin(var1))\nvar2bin = str(bin(var2))\nwhile len(var1bin) != 6:\n    var1bin = var1bin[:2] +\'0\' + var1bin[2:]\nwhile len(var2bin) != 6 :\n    var2bin = var2bin[:2] + \'0\' + var2bin[2:]\nans = bin(var1 + var2)\nans = str(ans[2:])\nwhile len(ans) != 4:\n    ans = \'0\' + ans', 'What is the &lt;span style=\"color:green\"&gt;unsigned 4-bit binary&lt;/span&gt; answer to these two &lt;span style=\"color:blue\"&gt;unsigned 4-bit binary&lt;/span&gt; digits.\n&lt;br/&gt;  ***var1bin***\n&lt;br/&gt; +***var2bin***', '', '', '', '', 'ans', 10, 'input1', 3, 9),
(51, 'v1 = randint(3, 7)\nans = -1 * (2 ** (v1 - 1))', 'What\'s the &lt;span style=\"color:blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit two\'s complement&lt;/span&gt; binary sequence?', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans***', '***ans***', 3, 'multiple4', 1, 6),
(52, 'v1 = randint(3, 7)\nans = (2 ** (v1 - 1)) -1', 'What\'s the &lt;span style=\"color:blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit two\'s complement&lt;/span&gt; binary sequence?', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans***', '***ans***', 3, 'multiple4', 1, 6),
(53, 'v1 = randint(3, 7)\nans = -1 * (2 ** (v1 - 1))', 'What\'s the &lt;span style=\"color:blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit two\'s complement&lt;/span&gt; binary sequence?', 'Answer here...', '', '', '', '***ans***', 3, 'input1', 1, 6),
(54, 'v1 = randint(3, 7)\nans = (2 ** (v1 - 1)) -1', 'What\'s the &lt;span style=\"color:blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit two\'s complement&lt;/span&gt; binary sequence?', 'Answer here...', '', '', '', '***ans***', 3, 'input1', 1, 6),
(55, 'v1 = randint(3, 7)\nans = (2 ** (v1 - 1)) -1', 'What\'s the &lt;span style=\"color:blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit one\'s complement&lt;/span&gt; binary sequence?', 'Answer here...', '', '', '', '***ans***', 3, 'input1', 1, 6),
(56, 'v1 = randint(3, 7)\nans = (2 ** (v1 - 1)) -1', 'What\'s the &lt;span style=\"color:blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit one\'s complement&lt;/span&gt; binary sequence?', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans***', '***ans***', 3, 'multiple4', 1, 6),
(57, 'v1 = randint(3, 7)\nans = -1 * ((2 ** (v1 - 1)) -1)', 'What\'s the &lt;span style=\"color:blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit one\'s complement&lt;/span&gt; binary sequence?', 'Answer here...', '', '', '', '***ans***', 3, 'input1', 1, 6),
(58, 'v1 = randint(3, 7)\nans = -1 * ((2 ** (v1 - 1)) -1)', 'What\'s the &lt;span style=\"color:blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit one\'s complement&lt;/span&gt; binary sequence?', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans***', '***ans***', 3, 'multiple4', 1, 6),
(59, 'rand_length = randint(3, 7)\n\nrand_binary_1 = cofc_generate_random_binary(0, 2**rand_length-1, rand_length)\nrand_binary_2 = cofc_generate_random_binary(0, 2**rand_length-1, rand_length)\n\ndecimal_1 = cofc_twos_complement_to_decimal(rand_binary_1)\ndecimal_2 = cofc_twos_complement_to_decimal(rand_binary_2)\n\nmy_sum = decimal_1 + decimal_2\n\nif my_sum &gt; ((2**(rand_length - 1)) -1) or my_sum &lt; (-1 * (2**(rand_length - 1))):\n	ans = \"Yes (an overflow will occur)\"\nelse:\n	ans = \"No overflow\"', 'If we add the two following &lt;span style=\"color:blue;\"&gt;***variable,rand_length***-bit two\'s complement&lt;/span&gt; binaries, would we end up with an overflow or not?\n&lt;div style=\"margin-top:15px;\"&gt;***variable,rand_binary_1***&lt;/div&gt;\n&lt;div&gt;***variable,rand_binary_2***&lt;/div&gt;', 'Yes (an overflow will occur)', 'No overflow', '', '', '***ans***', 8, 'multiple2', 1, 6),
(60, 'rand_binary_length = randint(3, 8)\n\nrandom_binary_1 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\nrandom_binary_2 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\n\nmy_addition = int(random_binary_1, 2) + int(random_binary_2, 2)\n\n# Only for one\'s complement\nif my_addition &gt; (2**rand_binary_length - 1):\n	my_addition = my_addition + 1\n\nans = cofc_convert_decimal_to_unsigned_binary_with_length(my_addition, rand_binary_length)', 'Add the two following &lt;span style=\"color: blue;\"&gt;***variable,rand_binary_length***-bit one\'s complement&lt;/span&gt; binaries: &lt;div style=\"margin-top:15px;\"&gt;***variable,random_binary_1***&lt;/div&gt;\n&lt;div&gt;***variable,random_binary_2***&lt;/div&gt;', '***ans***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***ans***', 6, 'multiple4', 1, 6),
(61, 'rand_binary_length = randint(3, 6)\n\nrandom_binary_1 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\nrandom_binary_2 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\n\nmy_addition = int(random_binary_1, 2) + int(random_binary_2, 2)\n\n# Only for one\'s complement\nif my_addition &gt; (2**rand_binary_length - 1):\n	my_addition = my_addition + 1\n\nans = cofc_convert_decimal_to_unsigned_binary_with_length(my_addition, rand_binary_length)', 'Add the two following &lt;span style=\"color: blue;\"&gt;***variable,rand_binary_length***-bit one\'s complement&lt;/span&gt; binaries (use 0b notation): &lt;div style=\"margin-top:15px;\"&gt;***variable,random_binary_1***&lt;/div&gt;\n&lt;div&gt;***variable,random_binary_2***&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 6, 'input1', 1, 6),
(62, 'rand_binary_length = randint(3, 8)\n\nrandom_binary_1 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\nrandom_binary_2 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\n\nmy_addition = int(random_binary_1, 2) + int(random_binary_2, 2)\n\nans = cofc_convert_decimal_to_unsigned_binary_with_length(my_addition, rand_binary_length)', 'Add the two following &lt;span style=\"color: blue;\"&gt;***variable,rand_binary_length***-bit two\'s complement&lt;/span&gt; binaries: &lt;div style=\"margin-top:15px;\"&gt;***variable,random_binary_1***&lt;/div&gt;\n&lt;div&gt;***variable,random_binary_2***&lt;/div&gt;', '***ans***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***ans***', 4, 'multiple4', 1, 6),
(63, 'rand_binary_length = randint(3, 6)\n\nrandom_binary_1 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\nrandom_binary_2 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\n\nmy_addition = int(random_binary_1, 2) + int(random_binary_2, 2)\n\nans = cofc_convert_decimal_to_unsigned_binary_with_length(my_addition, rand_binary_length)', 'Add the two following &lt;span style=\"color: blue;\"&gt;***variable,rand_binary_length***-bit two\'s complement&lt;/span&gt; binaries: &lt;div style=\"margin-top:15px;\"&gt;***variable,random_binary_1***&lt;/div&gt;\n&lt;div&gt;***variable,random_binary_2***&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 4, 'input1', 1, 6),
(64, ' number = randint(-128,127)\n    binary = str(bin(number))\n    while len(binary) &lt; 10:\n        binary = binary[:2] + \'0\' + binary[2:]\n\n    if number &lt; 0:\n        for i in binary[2:]:\n            if i == \'0\':\n                onesComplement = onesComplement + \'1\'\n\n            if i == \'1\':\n                onesComplement = onesComplement + \'0\'\n\n    else:\n        for i in binary[2:]:\n            if i == \'0\':\n                onesComplement = onesComplement + \'0\'\n\n            if i == \'1\':\n                onesComplement = onesComplement  + \'1\'\n\n\n    onesComplement = \"0b\"\n\n    if number &lt; 0:\n        binary = binary[1:]\n\n', 'something', 'a', 'b', 'c', 'd', 'a', 1, 'multiple4', 4, 9),
(69, 'all_types_dec = [\'int\', \'float\', \'char\']\nall_types = [\'integer\', \'float\', \'character\']\nall_values = [randint(-50, 50), round(random.uniform(-31, 31),2), \"\'\" + chr(randint(65, 90)) + \"\'\"]\n\nrand_index = randint(0, len(all_types)-1)\n\n\nrand_int = randint(-10, 10)\nrand_float = round(random.uniform(-31, 31),2)\n\nans = str(rand_int) + \", \" + str(round(rand_float, 1)) + \", \" + str(rand_int + rand_float)', 'What\'s the output of the following code?\n\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	int my_int = ***rand_int***;\n	float my_float = ***rand_float***;\n	printf(\"%d, %.1f, %f\", my_int, my_float, my_int + my_float);\n}\n&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 4, 'input1', 1, 7),
(70, 'all_types_dec = [\'int\', \'float\', \'char\', \'long\', \'short\', \'char\', \'double\']\nall_types = [\'integer\', \'float\', \'character\']\nall_values = [randint(-50, 50), round(random.uniform(-31, 31),3), \"\'\" + chr(randint(65, 90)) + \"\'\"]\n\nrand_index = randint(0, len(all_types_dec)-1)\n\nans = \'printf(\"The size of a(n) \' + all_types_dec[rand_index] + \' is %lu\", sizeof(\' + all_types_dec[rand_index] + \'));\'', 'Write the C code that will print the following:\n&lt;div class=\"my_code\"&gt;\nThe size of a(n) ***all_types_dec[rand_index]*** is &amp;lt;actual_size_here&amp;gt;\n&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 4, 'input1', 1, 7),
(73, 'rand_1 = randint(-100, 100)\nrand_2 = randint(-100, 100)\n\nif rand_1 &gt; rand_2:\n	ans = \'I am inside the if statement!\'\nelse:\n	ans = \'I am inside the else section!\'', 'What\'s the output of the followig C code:\n&lt;div class=\"my_code\"&gt;\nif (***rand_1*** &gt; ***rand_2***)\n	printf(\"I am inside the if statement!\");\nelse\n	printf(\"I am insde the else section!\");\n&lt;/div&gt;', 'I am inside the if statement!', 'I am inside the else section!', '', '', '***ans***', 4, 'multiple2', 1, 7),
(74, 'surround_else = randint(0, 1)\nnum_of_expressions = randint(2, 5)\n\ntotal_exp = \'\'\npython_exp = \'\'\n\nlogical_symbols = [\' &amp;&amp; \', \' || \']\nlogical_symbols_p = [\' and \', \' or \']\nrelational_symbols = [\' &gt; \', \' &lt; \']\n\nfor el_num in range(num_of_expressions):\n	if num_of_expressions &gt; 1:\n		rand_1_here = randint(-100, 100)\n		relation_rand_here = randint(0,1)\n		rand_2_here = randint(-100, 100)\n		total_exp = total_exp + \'(\' + str(rand_1_here) + relational_symbols[relation_rand_here] + str(rand_2_here) + \')\'\n		python_exp = python_exp + \'(\' + str(rand_1_here) + relational_symbols[relation_rand_here] + str(rand_2_here) + \')\'\n	else:\n		total_exp = total_exp + str(rand_1_here) + relational_symbols[relation_rand_here] + str(rand_2_here)\n	if el_num != num_of_expressions - 1:\n		temp = randint(0, 1)\n		total_exp = total_exp + logical_symbols[temp]\n		python_exp = python_exp + logical_symbols_p[temp]\n\nif eval(python_exp) and surround_else == 1:\n	ans = \'I am inside the if statement!\'\nelif eval(python_exp) and surround_else == 0:\n	ans = \'I am inside the if statement!:)\'\nelse:\n	ans = \'I am inside the else section!:)\'\n\nbeg_a = \'\'\nend_a = \'\'\n\nif surround_else == 1:\n	beg_a = \'\\n{\'\n	end_a = \'\\n}\'\n', 'What\'s the output of the followig C code (note: the \'and\' logical operator has a higher priority than \'or\'):\n&lt;div class=\"my_code\"&gt;\nif (***total_exp***)\n	printf(\"I am inside the if statement!\");\nelse***beg_a***\n	printf(\"I am insde the else section!\");\n	printf(\":)\");***end_a***\n&lt;/div&gt;', 'I am inside the if statement!', 'I am inside the else section!', 'I am inside the if statement!:)', 'I am inside the else section!:)', '***ans***', 8, 'multiple4', 1, 7),
(75, 'c_var = randint(0, 5)\nmax_val = randint(10, 20)\nincrement = randint(1, 3)\nbreak_or_not = randint(0,2)\nbreak_or_con = randint(0,1)\nbreak_num = randint(c_var+ 1, max_val-1) \nadded_section1 = \'\'\nadded_section2 = \'\'\n\nif break_or_not &gt;= 1:\n	added_section1 = \"\\n\\tif (c_var == \" + str(break_num) + \")\"\n	if break_or_con == 1:\n		added_section2 = \"\\n\\t\\tbreak;\"\n	else:\n		added_section2 = \"\\n\\t\\tcontinue;\"\n\noutput = \'\'\n\nfor el_num in range(c_var, max_val, increment):\n	if break_or_not &gt;= 1 and break_or_con == 1 and el_num == break_num:\n		break\n	if break_or_not &gt;= 1 and break_or_con == 0 and el_num == break_num:\n		continue\n	output = output + str(el_num)', 'What\'s the output of the followig C code:\n&lt;div class=\"my_code\"&gt;\nint c_var;\nfor(c_var = ***c_var***; c_var &lt; ***max_val***; c_var = c_var + ***increment***)\n{***added_section1*** ***added_section2***\n	printf(\"%d\", c_var);\n}\n&lt;/div&gt;', 'Answer here...', '', '', '', '***output***', 8, 'input1', 1, 7),
(164, 'var1 = random.uniform(-31, 15)\n\nans = cofc_decimal_to_twos_complement(int(var1), 32)\n\nans = \'Value is: \' + str(cofc_convert_binary_to_hex(ans)[2:])\n\ncand1 = cofc_decimal_to_twos_complement(int(var1), 32)', 'What\'s the output of the following code:\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	int var_1 = ***var1***;\n	printf(\"Value is: %x\", var_1);\n}\n&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 5, 'input1', 1, 7),
(168, 'all_types_dec = [\'int\', \'float\', \'char\']\nall_types = [\'integer\', \'float\', \'character\']\nall_values = [randint(-50, 50), round(random.uniform(-31, 31),3), \"\'\" + chr(randint(65, 90)) + \"\'\"]\n\nrand_index = randint(0, len(all_types)-1)\n\nans = all_types_dec[rand_index] + \' my_var = \' + str(all_values[rand_index]) + \';\'', 'How do you declare a variable \'my_var\' of type ***all_types[rand_index]*** in C and give it the value ***all_values[rand_index]***', 'Answer here...', '', '', '', '***ans***', 5, 'input1', 1, 7),
(169, 'val_of_var_i = randint(0, 20)\n\nstr_var_1 = random.choice([\'value\', \'address\'])\nstr_var_2 = random.choice([\'var_i\', \'var_a\'])\nstr_var_3 = random.choice([\'var_a\', \'var_a_a\'])\n\nif str_var_1 == \'value\' and str_var_2 == \'var_a\' and str_var_3 == \'var_a\': ans = \'printf(\"%p\", var_a);\'\n\nif str_var_1 == \'address\' and str_var_2 == \'var_a\' and str_var_3 == \'var_a\': ans = \'printf(\"%p\", &amp;var_a);\'\n\nif str_var_1 == \'value\' and str_var_2 == \'var_a\' and str_var_3 == \'var_a_a\': ans = \'printf(\"%p\", *var_a_a);\'\n\nif str_var_1 == \'address\' and str_var_2 == \'var_a\' and str_var_3 == \'var_a_a\': ans = \'printf(\"%p\", var_a_a);\'\n\nif str_var_1 == \'value\' and str_var_2 == \'var_i\' and str_var_3 == \'var_a\': ans = \'printf(\"%f\", *var_a);\'\n\nif str_var_1 == \'address\' and str_var_2 == \'var_i\' and str_var_3 == \'var_a\': ans = \'printf(\"%p\", var_a);\'\n\nif str_var_1 == \'value\' and str_var_2 == \'var_i\' and str_var_3 == \'var_a_a\': ans = \'printf(\"%f\", **var_a_a);\'\n\nif str_var_1 == \'address\' and str_var_2 == \'var_i\' and str_var_3 == \'var_a_a\': ans = \'printf(\"%p\", *var_a_a);\'\n', 'Type the C command to print the ***str_var_1*** of ***str_var_2*** using ***str_var_3***\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	float var_i = ***val_of_var_i***;\n	float *var_a = &amp;var_i;\n	float **var_a_a = &amp;var_a;\n}\n&lt;/div&gt;', '', '', '', '', '***ans***', 16, 'input1', 1, 13),
(170, 'val_of_var_i = randint(0, 20)\n\nstr_var_1 = random.choice([\'\', \'*\'])\nstr_var_2 = random.choice([\'\', \'*\', \'&amp;\'])\nstr_var_3 = random.choice([\'\', \'*\', \'&amp;\'])\n\nans = \'\'\n\nif str_var_1 == \'*\' and str_var_2 != \'&amp;\': ans = \'Error(s) in code\'					# 3 cases\n\nif str_var_2 == \'&amp;\': ans = \'Error(s) in code\'										# 6 cases\n\nif str_var_2 == \'*\' and str_var_3 != \'&amp;\':  ans = \'Error(s) in code\'\n\nif str_var_2 == \'\' and str_var_3 != \'\': ans = \'Error(s) in code\'\n\nif str_var_1 == \'*\' and str_var_2 == \'*\' and str_var_3 == \'&amp;\': ans = val_of_var_i + 5	# 1 case\n\nif str_var_1 != \'*\' and str_var_2 == \'*\': ans = \'Error(s) in code\'	# 3 cases\n\nif str_var_1 == \'\' and str_var_2 == \'\' and str_var_3 == \'\': ans = val_of_var_i		# 1 case\n\n', 'What\'s the output to the following code:\n&lt;div class=\"my_code\"&gt;\nvoid change_value(int ***str_var_1***value)\n{\n	***str_var_2***value = ***str_var_2***value + 5;\n}\nvoid main()\n{\n	int var = ***val_of_var_i***;\n	change_value(***str_var_3***var);\n	printf(\"%d\", var);\n}\n&lt;/div&gt;', 'Error(s) in code', '***val_of_var_i + 5***', '***val_of_var_i***', 'No errors but different output', '***ans***', 36, 'multiple4', 1, 5),
(171, 'val_of_var_i = randint(5, 20)\n\nstr_var_1 = random.choice([\'&amp;\', \'*\'])\nstr_var_2 = random.choice([\'\', \'&amp;\', \'*\'])\nstr_var_3 = random.choice([\'\', \'&amp;\', \'*\'])\n\ncon_str = str_var_1 + str_var_2 + str_var_3\n\nans = \'\'\n\nif \'&amp;&amp;\' in con_str or \'***\' in con_str: \n	ans = \'Error\'\nelse:\n	con_str = con_str.replace(\'&amp;*\', \'\')\n	con_str = con_str.replace(\'*&amp;\', \'\')\n	if con_str == \'&amp;\':\n		ans = 80\n	if con_str == \'*\':\n		ans = 40\n	if con_str == \'**\':\n		ans = val_of_var_i\n	if con_str == \'\':\n		ans = 120', 'Given the following pieces of information:\n&lt;table style=\"width: 80%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;a1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;a2&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;a3&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Value&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***val_of_var_i***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;?&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;120&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Address&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;40&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;?&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;80&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n\nWhat\'s the value of &lt;span style=\"color: indianred;\"&gt;***str_var_1+str_var_2+str_var_3***a3&lt;/span&gt; according to the code below: \n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	int a1 = ***val_of_var_i***;\n	int *a2 = &amp;a1;\n	int **a3 = &amp;a2;\n}\n&lt;/div&gt;\n&lt;span style=\"color: blue;\"&gt;Type \'Error\' if code will cause an error.&lt;/span&gt;', 'Answer here...', '', '', '', '***ans***', 36, 'input1', 1, 13),
(172, 'val_of_var_i = randint(0, 20)\naddress_of_var = hex(randint(20, 40) * 4)\n\nans = str(val_of_var_i) + \', \' + str(address_of_var) + \', \' + str(address_of_var) + \', \' +  str(val_of_var_i)', 'Given that the address of &lt;span style=\"color: blue;\"&gt;var_i&lt;/span&gt; is ***address_of_var*** .What\'s the output to the following code:\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	int var_i = ***val_of_var_i***;\n	int *var_p = &amp;var_i;\n	printf(\"%d, %p, %p, %d\", var_i, var_p, &amp;var_i, *var_p);\n}\n&lt;/div&gt;', '', '', '', '', '***ans***', 4, 'input1', 1, 5),
(174, 'data_type_list = [\'int\', \'float\', \'char\']\ncurr_data_type = choice(data_type_list)\n\nsize_list = [4, 8]\ncurr_size = choice(size_list)\n\nadd_value = randint(2, 7)\naddress_random = randint(10, 50) * 4\n\nin_case_not_char = \'; also given that a(n) \' + curr_data_type + \' is \' + str(curr_size) + \' bytes\'\n\nif curr_data_type == \'char\':\n	curr_size = 1\n	in_case_not_char = \'\'\n\nans = address_random + curr_size * add_value', 'Given that the address of &lt;span style=\"color:blue;\"&gt;my_var&lt;/span&gt; is ***address_random*** (in decimal)***in_case_not_char***. What\'s the output of the following code:\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	***curr_data_type*** *my_var;\n	printf(\"%p\", my_var + ***add_value***); // Type address in decimal\n}\n&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 6, 'input1', 1, 14),
(175, 'data_type_list = [\'int\', \'float\', \'char\']\ncurr_data_type = choice(data_type_list)\n\nsize_list = [4, 8]\ncurr_size = choice(size_list)\n\nrandom_array_size = randint(2, 7) * 5\n\nif curr_data_type == \'char\':\n	curr_size = 1\n\nans = curr_size * random_array_size', 'Given that the size of a(n) ***curr_data_type*** is ***curr_size*** bytes. What\'s the output of the following code:\n\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	***curr_data_type*** my_array[***random_array_size***];\n	printf(\"%lu\", sizeof(my_array));\n}\n&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 6, 'input1', 1, 14),
(176, 'data_type_list = [\'int\', \'float\', \'char\']\ncurr_data_type = choice(data_type_list)\n\nsize_list = [4, 8]\ncurr_size = choice(size_list)\n\nrandom_array_size = randint(2, 80)# * 5\n\nif curr_data_type == \'char\':\n	curr_size = 1\n\nans = curr_data_type + \' my_array[\' + str(random_array_size) + \'];\'', 'Type the code to declare/create an array &lt;span style=\"color:blue;\"&gt;my_array&lt;/span&gt; of type ***curr_data_type*** of size ***random_array_size*** elements', 'Answer here...', '', '', '', '***ans***', 6, 'input1', 1, 14),
(177, 'data_type_list = [\'int\', \'float\']\ncurr_data_type = choice(data_type_list)\n\ncurr_data_type = \'int\' \n\nrandom_address = randint(4, 20) * 4\n\nsize_list = [4, 8]\ncurr_size = choice(size_list)\n\nmult = randint(2, 5)\nrandom_shift = randint(0, 9)\n\nmy_first_arr = [0*mult, 1*mult, 2*mult, 3*mult, 4*mult, 5*mult, 6*mult, 7*mult, 8*mult, 9*mult]\n\nans = str(random_address + curr_size * random_shift) + \', \' + str(my_first_arr[random_shift])', 'Given that the size of a(n) ***curr_data_type*** is ***curr_size*** bytes, and address of \'my_array\' is ***random_address*** (in decimal). What\'s the output of the following code:\n\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	***curr_data_type*** my_array[10];\n	int counter;\n	for (counter = 0; counter &lt; 10; counter++)\n		my_array[counter] = counter * ***mult***;\n\n	printf(\"%p, %d\", (my_array + ***random_shift***), *(my_array + ***random_shift***));\n	// Type answer of address in decimal\n}\n&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 4, 'input1', 1, 14),
(178, 'data_type_list = [\'int\', \'float\']\ncurr_data_type = choice(data_type_list)\n\ncurr_data_type = \'int\'\n\nrandom_value = randint(50, 200)\n\nsize_list = [4, 8]\ncurr_size = choice(size_list)\n\nnotation_pick = choice([\'using the brackets notation\', \'by explicitly dereferencing the array\'])\n\nmult = randint(2, 5)\nrandom_shift = randint(1, 9)\n\nmy_first_arr = [0*mult, 1*mult, 2*mult, 3*mult, 4*mult, 5*mult, 6*mult, 7*mult, 8*mult, 9*mult]\n\nif notation_pick == \'using the brackets notation\':\n	ans = \'my_array[\' + str(random_shift) + \'] = \' + str(random_value) + \';\'\nelse:\n	ans = \'*(my_array + \' + str(random_shift) + \') = \' + str(random_value) + \';\'\n', 'Write code to change the element at index ***random_shift*** for the array &lt;span style=\"color:blue;\"&gt;my_array&lt;/span&gt; ***notation_pick*** to the value ***random_value***', 'Answer here...', '', '', '', '***ans***', 4, 'input1', 1, 14),
(180, 'def get_line(_num_of_lines, _curr_line, _reg_ini, _reg_not, _reg_all, _reg_array, _curr_array):\n    # This is the first line that we\'re generating\n    #\n    if _curr_line &gt; 1:\n        target_reg = choice(_reg_all)\n        command = choice([\'load word\', \'load word\', \'initialize\', \'add\', \'add\', \'sub\', \'sub\', \'sw\', \'sw\'])\n\n        if command == \'load word\':\n            offset_rand = randint(0, 4) * 4\n            line = \'lw \' + target_reg + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _reg_ini[target_reg] = int(_curr_array[offset_rand//4])\n        elif command == \'initialize\':\n            value_rand = randint(2, 9)\n            _reg_ini[target_reg] = value_rand\n            line = \'addi \' + target_reg + \', $zero, \' + str(value_rand)\n        elif command == \'add\':\n            reg_source_1 = choice(_reg_ini.keys())\n            reg_source_2 = choice(_reg_ini.keys())\n            line = \'add \' + target_reg + \', \' + reg_source_1 + \', \' + reg_source_2\n            _reg_ini[target_reg] = _reg_ini[reg_source_1] + _reg_ini[reg_source_2]\n        elif command == \'sub\':\n            reg_source_1 = choice(_reg_ini.keys())\n            reg_source_2 = choice(_reg_ini.keys())\n            line = \'sub \' + target_reg + \', \' + reg_source_1 + \', \' + reg_source_2\n            _reg_ini[target_reg] = _reg_ini[reg_source_1] - _reg_ini[reg_source_2]\n        elif command == \'sw\':\n            offset_rand = randint(0, 4) * 4\n            reg_to_be_loaded = choice(_reg_ini.keys())\n            line = \'sw \' + reg_to_be_loaded + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _curr_array[offset_rand//4] = _reg_ini[reg_to_be_loaded]\n    else:\n        target_reg = choice(_reg_all)\n        command = choice([\'load word\', \'initialize\'])\n\n        if command == \'load word\':\n            offset_rand = randint(0, 4) * 4\n            line = \'lw \' + target_reg + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _reg_ini[target_reg] = int(_curr_array[offset_rand//4])\n        else:\n            value_rand = randint(2, 9)\n            _reg_ini[target_reg] = value_rand\n            line = \'addi \' + target_reg + \', $zero, \' + str(value_rand)\n\n    return line\n\nreg_ini = {}\n\n# We\'ll assume array size is 5\n#\ncurr_array = [str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20))]\ncurr_array_str = \'[\' + \', \'.join(curr_array) + \']\'\n\narray_size = 5\n\n# We\'ll reserve $s0 for the array pointer\n#\nreg_array_reserved = \'$s0\'\n\nreg_not = [\'$s0\', \'$s1\', \'$s2\', \'$s3\', \'$s4\', \'$s5\', \'$s6\', \'$s7\',\n           \'$t0\', \'$t1\', \'$t2\', \'$t3\', \'$t4\', \'$t5\', \'$t6\', \'$t7\']\nreg_not.remove(reg_array_reserved)\n\n\nreg_all = [\'$s0\', \'$s1\', \'$s2\', \'$s3\', \'$s4\', \'$s5\', \'$s6\', \'$s7\',\n           \'$t0\', \'$t1\', \'$t2\', \'$t3\', \'$t4\', \'$t5\', \'$t6\', \'$t7\']\nreg_all.remove(reg_array_reserved)\n\n\nnum_of_lines = randint(3, 10)\nall_lines = []\nfor curr_line in range(num_of_lines):\n    all_lines.append(get_line(num_of_lines, curr_line, reg_ini, reg_not, reg_all, reg_array_reserved, curr_array))\n\n\nmips_code = \'\\n\'.join(all_lines)\n\nlist_of_ini = reg_ini.keys()[:]\nlist_of_ini.sort()\nquestion_output = \', \'.join(list_of_ini)\n\nlist_of_answers = []\n\nfor curr_register in list_of_ini:\n    list_of_answers.append(str(reg_ini[curr_register]))\n\nall_answers = \', \'.join(list_of_answers)', 'Given that the array &lt;span style=\"color:blue;\"&gt;my_array&lt;/span&gt; contains the following elements ***curr_array_str***; also, assume that the register &lt;span style=\"color:blue;\"&gt;$s0&lt;/span&gt; points to (or contains the address of) the first element in the array. List the values of these registers ***question_output*** in the given order (separate each value by a comma) after executing the code below:\n&lt;div class=\"my_code\"&gt;\n***mips_code***\n&lt;/div&gt;', 'Separate each value by a comma followed by a space', '', '', '', '***all_answers***', 20, 'input1', 1, 21),
(181, 'def get_line(_num_of_lines, _curr_line, _reg_ini, _reg_not, _reg_all, _reg_array, _curr_array):\n    # This is the first line that we\'re generating\n    #\n    if _curr_line &gt; 1:\n        target_reg = choice(_reg_all)\n        command = choice([\'load word\', \'load word\', \'initialize\', \'add\', \'sub\', \'sw\', \'sw\', \'sw\'])\n\n        if command == \'load word\':\n            offset_rand = randint(0, 4) * 4\n            line = \'lw \' + target_reg + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _reg_ini[target_reg] = int(_curr_array[offset_rand//4])\n        elif command == \'initialize\':\n            value_rand = randint(2, 9)\n            _reg_ini[target_reg] = value_rand\n            line = \'addi \' + target_reg + \', $zero, \' + str(value_rand)\n        elif command == \'add\':\n            reg_source_1 = choice(_reg_ini.keys())\n            reg_source_2 = choice(_reg_ini.keys())\n            line = \'add \' + target_reg + \', \' + reg_source_1 + \', \' + reg_source_2\n            _reg_ini[target_reg] = _reg_ini[reg_source_1] + _reg_ini[reg_source_2]\n        elif command == \'sub\':\n            reg_source_1 = choice(_reg_ini.keys())\n            reg_source_2 = choice(_reg_ini.keys())\n            line = \'sub \' + target_reg + \', \' + reg_source_1 + \', \' + reg_source_2\n            _reg_ini[target_reg] = _reg_ini[reg_source_1] - _reg_ini[reg_source_2]\n        elif command == \'sw\':\n            offset_rand = randint(0, 4) * 4\n            reg_to_be_loaded = choice(_reg_ini.keys())\n            line = \'sw \' + reg_to_be_loaded + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _curr_array[offset_rand//4] = str(_reg_ini[reg_to_be_loaded])\n    else:\n        target_reg = choice(_reg_all)\n        command = choice([\'load word\', \'initialize\'])\n\n        if command == \'load word\':\n            offset_rand = randint(0, 4) * 4\n            line = \'lw \' + target_reg + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _reg_ini[target_reg] = int(_curr_array[offset_rand//4])\n        else:\n            value_rand = randint(2, 9)\n            _reg_ini[target_reg] = value_rand\n            line = \'addi \' + target_reg + \', $zero, \' + str(value_rand)\n\n    return line\n\nreg_ini = {}\n\n# We\'ll assume array size is 5\n#\ncurr_array = [str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20))]\ncurr_array_str = \'[\' + \', \'.join(curr_array) + \']\'\n\narray_size = 5\n\n# We\'ll reserve $s0 for the array pointer\n#\nreg_array_reserved = \'$s0\'\n\nreg_not = [\'$s0\', \'$s1\', \'$s2\', \'$s3\', \'$s4\', \'$s5\', \'$s6\', \'$s7\',\n           \'$t0\', \'$t1\', \'$t2\', \'$t3\', \'$t4\', \'$t5\', \'$t6\', \'$t7\']\nreg_not.remove(reg_array_reserved)\n\n\nreg_all = [\'$s0\', \'$s1\', \'$s2\', \'$s3\', \'$s4\', \'$s5\', \'$s6\', \'$s7\',\n           \'$t0\', \'$t1\', \'$t2\', \'$t3\', \'$t4\', \'$t5\', \'$t6\', \'$t7\']\nreg_all.remove(reg_array_reserved)\n\n\nnum_of_lines = randint(3, 10)\nall_lines = []\nfor curr_line in range(num_of_lines):\n    all_lines.append(get_line(num_of_lines, curr_line, reg_ini, reg_not, reg_all, reg_array_reserved, curr_array))\n\n\nmips_code = \'\\n\'.join(all_lines)\n\nlist_of_ini = reg_ini.keys()[:]\nlist_of_ini.sort()\nquestion_output = \', \'.join(list_of_ini)\n\nlist_of_answers = []\n\nfor curr_register in list_of_ini:\n    list_of_answers.append(str(reg_ini[curr_register]))\n\n#all_answers = \', \'.join(list_of_answers)\n\nall_answers = \', \'.join(curr_array)', 'Given that the array &lt;span style=\"color:blue;\"&gt;my_array&lt;/span&gt; contains the following elements ***curr_array_str***; also, assume that the register &lt;span style=\"color:blue;\"&gt;$s0&lt;/span&gt; points to (or contains the address of) the first element in the array. List the values of &lt;span style=\"color:blue;\"&gt;my_array&lt;/span&gt; after executing the code below (don\'t include the square brackets and separate each value by a comma followed by a space):\n&lt;div class=\"my_code\"&gt;\n***mips_code***\n&lt;/div&gt;', 'No square brackets. Separate values by commas followed by space', '', '', '', '***all_answers***', 15, 'input1', 1, 21),
(182, 'def generate_expression(_target_reg, _allowed_vars, _all_mips_lines):\n    rand_num = randint(5, 20)\n    _allowed_vars.append(str(rand_num))\n    shuffle(_allowed_vars)\n    location_of_num = _allowed_vars.index(str(rand_num))\n    if location_of_num == 0:\n        _allowed_vars.append(_allowed_vars[1])\n        _allowed_vars.append(_allowed_vars[0])\n        _allowed_vars.pop(0)\n        _allowed_vars.pop(1)\n    for list_el in range(len(_allowed_vars) - 1):\n        rand_operator = choice([\'+\', \'-\'])\n        _allowed_vars.insert(list_el*2 + 1, rand_operator)\n\n    for list_el in range(len(_allowed_vars)//2):\n        if _allowed_vars[list_el * 2 + 1] == \'+\' and _allowed_vars[list_el * 2 + 2] == str(rand_num):\n            if list_el == 0:\n                _all_mips_lines.append(\'addi \' + _target_reg + \', $\' + _allowed_vars[list_el * 2] + \', \' + str(rand_num))\n            else:\n                _all_mips_lines.append(\'addi \' + _target_reg + \', \' + _target_reg + \', \' + str(rand_num))\n\n        elif _allowed_vars[list_el*2 + 1] == \'-\' and _allowed_vars[list_el * 2 + 2] == str(rand_num):\n            if list_el == 0:\n                _all_mips_lines.append(\'addi \' + _target_reg + \', $\' + _allowed_vars[list_el * 2] + \', \' + str(-1 * rand_num))\n            else:\n                _all_mips_lines.append(\'addi \' + _target_reg + \', \' + _target_reg + \', \' + str(-1 * rand_num))\n\n        # That means it\'s either r + r or r - r\n        #\n        elif _allowed_vars[list_el*2 + 1] == \'+\':\n            if list_el == 0:\n                _all_mips_lines.append(\'add \' + _target_reg + \', $\' + _allowed_vars[list_el * 2] + \', $\' + _allowed_vars[list_el * 2 + 2])\n            else:\n                _all_mips_lines.append(\'add \' + _target_reg + \', \' + _target_reg + \', $\' + _allowed_vars[list_el * 2 + 2])\n\n        elif _allowed_vars[list_el*2 + 1] == \'-\':\n            if list_el == 0:\n                _all_mips_lines.append(\'sub \' + _target_reg + \', $\' + _allowed_vars[list_el * 2] + \', $\' + _allowed_vars[list_el * 2 + 2])\n            else:\n                _all_mips_lines.append(\'sub \' + _target_reg + \', \' + _target_reg + \', $\' + _allowed_vars[list_el * 2 + 2])\n\ntarget_var = \'$s0\'\nallowed_vars = []\n\nall_lines = []\nall_mips_lines = []\n\nfor el_ini in range(randint(1, 4)):\n    rand_value = str(randint(5, 20))\n    all_lines.append(\'int s\' + str(el_ini+1) + \' = \' + rand_value + \';\')\n    allowed_vars.append(\'s\' + str(el_ini+1))\n    all_mips_lines.append(\'addi \' + allowed_vars[-1] + \', $zero, \' + rand_value)\n\ngenerate_expression(target_var, allowed_vars, all_mips_lines)\n\nall_lines.append(\'int result = \' + \' \'.join(allowed_vars) + \';\')\n\nc_code = \'\\n\\t\'.join(all_lines)\n\nans = \'\\n\'.join(all_mips_lines)', 'Convert the following C code to MIPS. Assume the variable &lt;span style=\"color: blue;\"&gt;result&lt;/span&gt; will correspond to register $s0. Write your answer on a piece of paper then compare it with correct answer.\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	***c_code***	\n}\n&lt;/div&gt;', '', '', '', '', '***ans***', 10, 'no_input', 1, 22),
(185, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'How many bits do we need to identify a particular register; given we have ***rand_num*** registers, numbered from 0 to ***rand_num-1***', 'Answer here...', '', '', '', '***val***', 4, 'input1', 1, 23),
(186, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'Assembly language is a:', 'High-level Programming Language', 'Low-level Programming Language', '', '', 'Low-level Programming Language', 2, 'multiple2', 1, 23),
(187, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'Each assembly language is specific to a particular computer architecture.', 'True', 'False', '', '', 'True', 2, 'multiple2', 1, 23),
(188, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'Each type of processor has its own assembly language.', 'True', 'False', '', '', 'True', 2, 'multiple2', 1, 23),
(189, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'The high-level programming language C is architecture-dependent.', 'True', 'False', '', '', 'False', 2, 'multiple2', 1, 23),
(190, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'In MIPS-32 (32-bit MIPS), each pure instruction will be assembled to 32 bits.', 'Always true', 'Most of the time true', '', '', 'Always true', 2, 'multiple2', 1, 23),
(191, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'In MIPS-32 (32-bit MIPS), the size of each register is 32 bits.', 'Always true', 'Always false', 'Most of the time true', 'Depends on CPU', 'Always true', 2, 'multiple4', 1, 23),
(192, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'What\'s the name of the component that translates C to Assembly?', 'Answer here...', '', '', '', 'Compiler', 2, 'input1', 1, 23),
(193, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'What\'s the name of the component that translates Assembly to Machine Language?', 'Answer here...', '', '', '', 'Assembler', 2, 'input1', 1, 23),
(194, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'What does RISC stand for (the first letter of each word should be capitalized)?', 'The first letter of each word should be capitalized', '', '', '', 'Reduced Instruction Set Computing', 2, 'input1', 1, 23),
(195, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'What does CISC stand for (the first letter of each word should be capitalized)?', 'The first letter of each word should be capitalized', '', '', '', 'Complex Instruction Set Computing', 2, 'input1', 1, 23),
(196, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'How many bytes in half a word?', 'Answer here...', '', '', '', '2', 2, 'input1', 1, 23),
(197, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'How many bytes in a word?', 'Answer here...', '', '', '', '4', 2, 'input1', 1, 23),
(198, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'How many bits in a byte?', 'Answer here...', '', '', '', '8', 2, 'input1', 1, 23);
INSERT INTO `main_quizquestion` (`id`, `python_code`, `questionText`, `candidateAnswer1`, `candidateAnswer2`, `candidateAnswer3`, `candidateAnswer4`, `correctAnswer`, `repeat`, `quizType`, `author_id`, `subItem_id`) VALUES
(199, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'In modern computers, memory is bit-addressable; in other words, one particular address refers to one particular bit.', 'True', 'False', '', '', 'False', 2, 'multiple2', 1, 23),
(200, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'What is the special-purpose register that holds/contains the address of the instruction that will be fetched next.', 'PC', 'CP', 'FP', 'SP', 'PC', 2, 'multiple4', 1, 23),
(201, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'In the context of registers, what does PC stand for (the first letter of each word should be capitalized)?', 'Answer here...', '', '', '', 'Program Counter', 2, 'input1', 1, 23),
(202, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'Accessing registers is extremely fast, almost as fast as accessing the random access memory (RAM).', 'True', 'False', '', '', 'False', 2, 'multiple2', 1, 23),
(203, 'def convert_c_to_mips(_all_lines):\n    	ans_all = []\n    	oper = _all_lines[0].split(\' \')\n\n    	if oper[2] == \'&lt;\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n		ans_all.append(\'beq $t0, $zero, ELSE\')\n\n    	elif oper[2] == \'&gt;\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'beq $t0, $zero, ELSE\')\n\n    	elif oper[2] == \'==\':\n        	ans_all.append(\'bne $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'!=\':\n        	ans_all.append(\'beq $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'&lt;=\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'bne $t0, $zero, ELSE\')\n\n    	elif oper[2] == \'&gt;=\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n        	ans_all.append(\'bne $t0, $zero, ELSE\')\n\n\n    	for line_num in range(1, len(_all_lines)):\n        	if _all_lines[line_num] == \'else\':\n            		ans_all.append(\'j AFTER\')\n            		ans_all.append(\'ELSE:\')\n        	elif _all_lines[line_num] != \'{\' and _all_lines[line_num] != \'}\':\n            		ans_all.append(convert_simple_line_c_to_mips(_all_lines[line_num]))\n\n    	ans_all.append(\'AFTER:\')\n\n    	corr_answer_local = \'\\n\'.join(ans_all)\n	return corr_answer_local\n\nall_vars = [\'s0\', \'s1\', \'s2\', \'s3\', \'s4\', \'s5\', \'s6\', \'s7\',\n            \'t0\', \'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\', \'t7\']\n\nall_lines = []\n\nall_op = [\' &lt; \', \' &gt; \', \' &gt;= \', \' &lt;= \', \' == \', \' != \']\n\nshuffle(all_vars)\nf_var = all_vars[0]\ns_var = all_vars[1]\no_rand = choice(all_op)\n\nall_lines.append(\'if (\' + f_var + o_rand + s_var + \')\')\nall_lines.append(\"{\")\nfor r_num in range(randint(1, 2)):\n    all_lines.append(\"\\t\" + choice(all_vars) + \' = \' + choice(all_vars) + choice([\' + \', \' - \']) + choice([str(randint(5, 20)), choice(all_vars)]) + \';\')\nall_lines.append(\"}\")\nall_lines.append(\"else\")\nall_lines.append(\"{\")\nfor r_num in range(randint(1, 2)):\n    all_lines.append(\"\\t\" + choice(all_vars) + \' = \' + choice(all_vars) + choice([\' + \', \' - \']) + choice([str(randint(5, 20)), choice(all_vars)]) + \';\')\nall_lines.append(\"}\")\n\nquestion_text = \'\\n\'.join(all_lines)\n\ncorr_answer = convert_c_to_mips(all_lines)', 'Convert the following C to MIPS:\n&lt;div class=\"my_code\"&gt;\n***question_text***\n&lt;/div&gt;\n&lt;br/&gt;\nWrite your answer on a piece of paper then compare it with correct answer.', '', '', '', '', '***corr_answer***', 18, 'no_input', 1, 24),
(204, 'def convert_c_to_mips(_all_lines):\n    	ans_all = [\'BEG:\']\n    	oper = _all_lines[0].split(\' \')\n\n    	if oper[2] == \'&lt;\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n        	ans_all.append(\'beq $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'&gt;\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'beq $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'==\':\n        	ans_all.append(\'bne $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'!=\':\n        	ans_all.append(\'beq $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'&lt;=\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'bne $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'&gt;=\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n        	ans_all.append(\'bne $t0, $zero, AFTER\')\n\n    	for line_num in range(1, len(_all_lines)):\n        	if _all_lines[line_num] == \'}\':\n            		ans_all.append(\'j BEG\')\n            		ans_all.append(\'AFTER:\')\n        	elif _all_lines[line_num] != \'{\' and _all_lines[line_num] != \'}\':\n            		ans_all.append(convert_simple_line_c_to_mips(_all_lines[line_num]))\n\n	corr_answer_local = \'\\n\'.join(ans_all)\n	return corr_answer_local\n\n\nall_vars = [\'s0\', \'s1\', \'s2\', \'s3\', \'s4\', \'s5\', \'s6\', \'s7\',\n            \'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\', \'t7\']\n\nall_lines = []\n\nall_op = [\' &lt; \', \' &gt; \', \' &gt;= \', \' &lt;= \']\n\nshuffle(all_vars)\nf_var = all_vars[0]\ns_var = all_vars[1]\no_rand = choice(all_op)\n\nall_lines.append(\'while (\' + f_var + o_rand + s_var + \')\')\nall_lines.append(\"{\")\nfor r_num in range(randint(1, 3)):\n    all_lines.append(\"\\t\" + choice(all_vars) + \' = \' + choice(all_vars) + choice([\' + \', \' - \']) + choice([str(randint(5, 20)), choice(all_vars)]) + \';\')\n\nif o_rand == \' &lt; \' or o_rand == \' &lt;= \':\n    all_lines.append(\"\\t\" + f_var + \" = \" + f_var + \" + \" + str(randint(1, 5)) + \';\')\nelif o_rand == \' &gt; \' or o_rand == \' &gt;= \':\n    all_lines.append(\"\\t\" + f_var + \" = \" + f_var + \" - \" + str(randint(1, 5)) + \';\')\n\nall_lines.append(\"}\")\n\nquestion_text = \'\\n\'.join(all_lines)\n\ncorr_answer = convert_c_to_mips(all_lines)', 'Convert the following C to MIPS:\n&lt;div class=\"my_code\"&gt;\n***question_text***\n&lt;/div&gt;\n\n&lt;br/&gt;\nWrite your answer on a piece of paper then compare it with correct answer.', '', '', '', '', '***corr_answer***', 12, 'no_input', 1, 24),
(205, 'def convert_c_to_mips(_all_lines):\n    	ans_all = []\n    	ans_all.append(convert_simple_line_c_to_mips(_all_lines[0]))\n\n    	ans_all.append(\'BEG:\')\n\n    	oper = _all_lines[1].split(\' \')\n\n    	if oper[2] == \'&lt;\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n        	ans_all.append(\'beq $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'&gt;\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'beq $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'==\':\n        	ans_all.append(\'bne $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'!=\':\n        	ans_all.append(\'beq $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'&lt;=\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'bne $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'&gt;=\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n        	ans_all.append(\'bne $t0, $zero, AFTER\')\n\n    	for line_num in range(2, len(_all_lines)):\n        	if _all_lines[line_num] == \'}\':\n            		ans_all.append(\'j BEG\')\n            		ans_all.append(\'AFTER:\')\n        	elif _all_lines[line_num] != \'{\' and _all_lines[line_num] != \'}\':\n            		ans_all.append(convert_simple_line_c_to_mips(_all_lines[line_num]))\n\n	print(ans_all)\n	return \'\\n\'.join(ans_all)\n	\nall_vars = [\'s0\', \'s1\', \'s2\', \'s3\', \'s4\', \'s5\', \'s6\', \'s7\',\n            \'t0\', \'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\', \'t7\']\n\ncontrol_var = choice(all_vars)\nall_vars.remove(control_var)\n\nall_lines = []\nall_lines_to_print = []\n\nall_op = [\' &lt; \', \' &gt; \', \' &gt;= \', \' &lt;= \']\n\nshuffle(all_vars)\nf_var = all_vars[0]\ns_var = all_vars[1]\no_rand = choice(all_op)\n\ncounter_var = randint(5, 10)\no_inside_if_rand = choice([\' + \', \' - \'])\nincrement_rand = randint(1, 3)\n\nfor_line = \'for (\' + control_var +\' = \' + str(counter_var) + \'; \' + control_var + o_rand +  s_var + \'; \' + control_var + \" = \" + control_var + o_inside_if_rand + str(increment_rand) + \")\"\n\nall_lines_to_print.append(\'int \' + control_var + \';\')\nall_lines_to_print.append(for_line)\n\nall_lines.append(\'int \' + control_var + \' = \' + str(counter_var) + \';\')\nall_lines.append(\'while (\' + control_var + o_rand + s_var + \')\')\n\nall_lines.append(\"{\")\nall_lines_to_print.append(\"{\")\n\nfor r_num in range(randint(1, 3)):\n    all_lines_to_print.append(\"\\t\" + choice(all_vars) + \' = \' + choice(all_vars) + choice([\' + \', \' - \']) + choice([str(randint(5, 20)), choice(all_vars)]) + \';\')\n    all_lines.append(all_lines_to_print[-1])\n\n\nif o_rand == \' &lt; \' or o_rand == \' &lt;= \':\n    all_lines_to_print.append(\"\\t\" + f_var + \" = \" + f_var + \" + \" + str(randint(1, 5)) + \';\')\n    all_lines.append(all_lines_to_print[-1])\n\n\nelif o_rand == \' &gt; \' or o_rand == \' &gt;= \':\n    all_lines_to_print.append(\"\\t\" + f_var + \" = \" + f_var + \" - \" + str(randint(1, 5)) + \';\')\n    all_lines.append(all_lines_to_print[-1])\n\nall_lines.append(\"\\t\" + control_var + \" = \" + control_var + o_inside_if_rand + str(increment_rand) + \';\')\n\nall_lines.append(\"}\")\nall_lines_to_print.append(\"}\")\n\nquestion_text = \'\\n\'.join(all_lines_to_print)\n\n\ncorr_answer = convert_c_to_mips(all_lines)', 'Convert the following C to MIPS:\n&lt;div class=\"my_code\"&gt;\n***question_text***\n&lt;/div&gt;\n\n&lt;br/&gt;\nWrite your answer on a piece of paper then compare it with correct answer.', '', '', '', '', '***corr_answer***', 12, 'no_input', 1, 25),
(206, 'def convert_c_to_mips(_all_lines):\n    array_size = _all_lines[0].split(\']\')[0][-1]\n    array_type = _all_lines[0].split(\' \')[0].replace(\'\\t\',\'\')\n\n    inst_str = \'\'\n\n    if array_type == \'int\':\n        multiplier_val = 4\n        inst_str = \'sw \'\n    elif array_type == \'short\':\n        multiplier_val = 2\n        inst_str = \'sh \'\n    elif array_type == \'char\':\n        multiplier_val = 1\n        inst_str = \'sb \'\n\n    ans_all = []\n\n    ans_all.append(\'addi $sp, $sp, -\' + str(int(array_size) * multiplier_val))\n\n    for curr_line in range(1, len(_all_lines)):\n        ans_all.append(\'addi $t0, $zero, \' + _all_lines[curr_line].split(\' \')[-1])\n        ans_all.append(inst_str + \'$t0, \' + str((curr_line-1) * multiplier_val) + \'($sp)\')\n\n    return \'\\n\'.join(ans_all)\n\nall_vars = [\'s0\', \'s1\', \'s2\', \'s3\', \'s4\', \'s5\', \'s6\', \'s7\',\n            \'t0\', \'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\', \'t7\']\n\n\n\n\ncontrol_var = choice(all_vars)\nall_vars.remove(control_var)\n\nall_lines = []\nall_lines_to_print = []\n\nall_op = [\' &lt; \', \' &gt; \', \' &gt;= \', \' &lt;= \']\n\nshuffle(all_vars)\nf_var = all_vars[0]\ns_var = all_vars[1]\no_rand = choice(all_op)\n\ncounter_var = randint(2, 4)\no_inside_if_rand = choice([\' + \', \' - \'])\nincrement_rand = randint(1, 3)\n\nfor_line = \'void main()\'\n\nall_lines_to_print.append(for_line)\nall_lines_to_print.append(\"{\")\n\nall_lines_to_print.append(\"\\t\" + choice([\'int\', \'char\', \'short int\']) + \" my_array[\" + str(counter_var) + \"];\")\nall_lines.append(all_lines_to_print[-1])\n\nfor num, r_num in enumerate(range(counter_var)):\n    all_lines_to_print.append(\"\\tmy_array[\" + str(num) + \"] = \" + str(randint(5, 20)) + \";\")\n    all_lines.append(all_lines_to_print[-1])\n\nall_lines_to_print.append(\"}\")\n\nquestion_text = \'\\n\'.join(all_lines_to_print)\n\n\ncorr_answer = convert_c_to_mips(all_lines)', 'Assuming that the size of a &lt;span style=\"color: blue;\"&gt;short int is 2 bytes&lt;/span&gt;, and the size of an &lt;span style=\"color: green;\"&gt;int is 4 bytes&lt;/span&gt;. Convert the following C to MIPS:\n&lt;div class=\"my_code\"&gt;\n***question_text***\n&lt;/div&gt;\n\n&lt;br/&gt;\nWrite your answer on a piece of paper then compare it with correct answer.', '', '', '', '', '***corr_answer***', 9, 'no_input', 1, 25),
(208, 'all_instructions = [Mips_instruction(\"add\", \"000000\", \"100000\", \"R\"), \nMips_instruction(\"sub\", \"000000\", \"100010\", \"R\"), \nMips_instruction(\"addi\", \"001000\", \"\", \"I\"), Mips_instruction(\"and\", \"000000\", \"100100\", \"R\"),\nMips_instruction(\"andi\", \"001100\", \"\", \"I\"), Mips_instruction(\"or\", \"000000\", \"100101\", \"R\"),\nMips_instruction(\"ori\", \"001101\", \"\", \"I\"), Mips_instruction(\"slt\", \"000000\", \"101010\", \"R\"),\nMips_instruction(\"slti\", \"001010\", \"\", \"I\"), Mips_instruction(\"lw\", \"100011\", \"\", \"I\"),\nMips_instruction(\"sw\", \"101011\", \"\", \"I\")]\n\ndef generate_random_instruction():\n    curr_inst = choice(all_instructions)\n    if curr_inst.inst_type == \"R\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        rd = choice(all_registers)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, rd, 0)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, rd, 0)\n    elif curr_inst.inst_type == \"I\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        imm = randint(-20, 20)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, 0, imm)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, 0, imm)\n\n    return [inst_mips, inst_bin]\n\nq_s = generate_random_instruction()\nquestion = q_s[0]\nans = q_s[1]', 'What\'s the binary sequence that corresponds to the following MIPS instruction (separate fields by single spaces):\n&lt;div class=\"my_code\"&gt;\n***question***\n&lt;/div&gt;', '', '', '', '', '***ans***', 22, 'input1', 1, 28),
(209, 'all_instructions = [Mips_instruction(\"add\", \"000000\", \"100000\", \"R\"), \nMips_instruction(\"sub\", \"000000\", \"100010\", \"R\"), \nMips_instruction(\"addi\", \"001000\", \"\", \"I\"), Mips_instruction(\"and\", \"000000\", \"100100\", \"R\"),\nMips_instruction(\"andi\", \"001100\", \"\", \"I\"), Mips_instruction(\"or\", \"000000\", \"100101\", \"R\"),\nMips_instruction(\"ori\", \"001101\", \"\", \"I\"), Mips_instruction(\"slt\", \"000000\", \"101010\", \"R\"),\nMips_instruction(\"slti\", \"001010\", \"\", \"I\"), Mips_instruction(\"lw\", \"100011\", \"\", \"I\"),\nMips_instruction(\"sw\", \"101011\", \"\", \"I\")]\n\ndef generate_random_instruction():\n    curr_inst = choice(all_instructions)\n    if curr_inst.inst_type == \"R\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        rd = choice(all_registers)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, rd, 0)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, rd, 0)\n    elif curr_inst.inst_type == \"I\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        imm = randint(-20, 20)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, 0, imm)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, 0, imm)\n\n    return [inst_mips, inst_bin]\n\nq_s = generate_random_instruction()\nquestion = q_s[1]\nans = q_s[0]', 'What\'s the MIPS instruction that correspond to the following binary:\n&lt;div class=\"my_code\"&gt;\n***question***\n&lt;/div&gt;', '', '', '', '', '***ans***', 22, 'input1', 1, 29),
(210, 'truth_values = [\'False\', \'True\']\n\np_value = randint(0, 1)\nq_value = randint(0, 1)\nr_value = randint(0, 1)\n\n# (p and q) and (r and q) or ~q\n#\ncurr_v = (p_value and q_value) and (r_value and q_value) or (not q_value)\ncurr_v = curr_v and curr_v\nif curr_v:\n	ans = \'True\'\nelse:\n	ans = \'False\'', 'What\'s the truth value for the output, given the following:\n&lt;div style=\"text-align:center; width: 100%;\"&gt;\n&lt;table style=\"width: 80%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Proposition&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;P&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Q&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;R&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Truth Value&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[p_value]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[q_value]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[r_value]***&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;div style=\"margin-top: 10px;\"&gt;\n&lt;img src=\"static/main/img/circuits/circuit01.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n&lt;/div&gt;', 'True', 'False', '', '', '***ans***', 6, 'multiple2', 1, 32),
(211, 'truth_values = [\'False\', \'True\']\n\np_value = randint(0, 1)\nq_value = randint(0, 1)\nr_value = randint(0, 1)\n\n# (p and q) and (r and q) or ~q\n#\ns_truth = (p_value and q_value) and (r_value or q_value)\ncurr_v = (s_truth and q_value) and (not q_value or s_truth)\nif curr_v:\n	ans = \'True\'\nelse:\n	ans = \'False\'', 'What\'s the truth value for the output, given the following:\n&lt;div style=\"text-align:center; width: 100%;\"&gt;\n&lt;table style=\"width: 80%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Proposition&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;P&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Q&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;R&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Truth Value&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[p_value]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[q_value]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[r_value]***&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;div style=\"margin-top: 10px;\"&gt;\n&lt;img src=\"static/main/img/circuits/circuit02.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n&lt;/div&gt;', 'True', 'False', '', '', '***ans***', 6, 'multiple2', 1, 32),
(212, 'truth_values = [\'False\', \'True\']\n\np_value = randint(0, 1)\nq_value = randint(0, 1)\nr_value = randint(0, 1)\n\n# (p and q) and (r and q) or ~q\n#\ns_truth = (p_value and q_value) and (r_value or q_value)\ncurr_v = (s_truth and q_value) and (not q_value or s_truth)\nif q_value:\n	ans = \'True\'\nelse:\n	ans = \'False\'', 'What\'s the truth value for the output, given the following:\n&lt;div style=\"text-align:center; width: 100%;\"&gt;\n&lt;table style=\"width: 80%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Proposition&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;P&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Q&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;R&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Truth Value&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[p_value]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[q_value]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[r_value]***&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;div style=\"margin-top: 10px;\"&gt;\n&lt;img src=\"static/main/img/circuits/circuit03.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n&lt;/div&gt;', 'True', 'False', '', '', '***ans***', 6, 'multiple2', 1, 32),
(213, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'What\'s the boolean expression that matches the table below:\n&lt;div style=\"text-align:center; width: 100%;\"&gt;\n&lt;table style=\"width: 80%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;P&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Q&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;R&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;?&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[0]***&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[1]***&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[2]***&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[3]***&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[4]***&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[5]***&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[6]***&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[7]***&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;', '***cand1***', '***cand2***', '***cand3***', '***ans***', '***ans***', 10, 'multiple4', 1, 32),
(214, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'A(n) ________ is a compound proposition that is always true, no matter what the truth values of the propositions that occur in it are.', 'Tautology', 'Tautogy', 'Contraditction', 'Implication', 'Tautology', 2, 'multiple4', 1, 28),
(215, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'A(n) ________ is a compound proposition that is always false.', 'Tautology', 'Tautogy', 'Contraditction', 'Implication', 'Contraditction', 2, 'multiple4', 1, 32),
(216, 'rand_1 = choice([\'True\', \'False\'])\nrand_2 = choice([\'True\', \'False\'])\n\nif rand_1 == rand_2:\n	ans = \'False\'\nelse:\n	ans = \'True\'', '***rand_1*** \'exclusive or\' ***rand_2*** is ', 'True', 'False', '', '', '***ans***', 4, 'multiple2', 1, 32),
(217, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'P &lt;span style=\"color:blue;\"&gt;\'exclusive or\'&lt;/span&gt; P is a ________', 'Tautology', 'Tautogy', 'Contraditction', 'None of the answers', 'Contraditction', 2, 'multiple4', 1, 32),
(218, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'P &lt;span style=\"color:blue;\"&gt;\'exclusive or\'&lt;/span&gt; ~P is a ________', 'Tautology', 'Tautogy', 'Contraditction', 'None of the answers', 'Tautology', 2, 'multiple4', 1, 32),
(219, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'P &lt;span style=\"color:blue;\"&gt;\'or\'&lt;/span&gt; ~P is a ________', 'Tautology', 'Tautogy', 'Contraditction', 'None of the answers', 'Tautology', 2, 'multiple4', 1, 32),
(220, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'P &lt;span style=\"color:blue;\"&gt;\'and\'&lt;/span&gt; ~P is a ________', 'Tautology', 'Tautogy', 'Contraditction', 'None of the answers', 'Contraditction', 2, 'multiple4', 1, 32),
(221, 'rand_a = choice([True, False])\nrand_b = choice([True, False])\n\nrand_op_0 = choice([True, False])\nrand_op_1 = choice([True, False])\n\nans = \'\'\n\n# op_0 = 1, op_1 = 1 (\"subtraction\") tested\nif rand_op_0 and rand_op_1:\n	if rand_a == rand_b:\n		ans = \'False (or 0)\'\n	else:\n		ans = \'True (or 1)\'	\n\n# op_0 = 1, op_1 = 0 (\"nand\") tested\nif rand_op_0 and not rand_op_1:\n	if rand_a == 0 or rand_b == 1:\n		ans = \'True (or 1)\'\n	else:\n		ans = \'False (or 0)\'\n\n# op_0 = 0, op_1 = 1 (\"add\") tested\nif not rand_op_0 and rand_op_1:\n	if rand_a == rand_b:\n		ans = \'False (or 0)\'\n	else:\n		ans = \'True (or 1)\'\n\n# op_0 = 0, op_1 = 0 (\"nor\") tested\nif not rand_op_0 and not rand_op_1:\n	if rand_a == 1 or rand_b == 1:\n		ans = \'False (or 0)\'\n	else:\n		ans = \'True (or 1)\'\n', 'What\'s the value of \'&lt;span style=\"color: blue;\"&gt;?&lt;/span&gt;\', given the following:\n&lt;table style=\"width: 95%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;a&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;b&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;Operation_0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;Operation_1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;Result&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;***rand_a***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***rand_b***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***rand_op_0***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***rand_op_1***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;?&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;div style=\"margin-top: 10px;\"&gt;\n	&lt;img src=\"static/main/img/circuits/circuit04.png\" alt=\"Smiley face\" width=\"60%\"&gt;\n&lt;/div&gt;', 'True (or 1)', 'False (or 0)', '', '', '***ans***', 16, 'multiple2', 1, 33),
(222, 'all_poss = [\n[\'True (or 1)\', \'True (or 1)\', \'X\', \'True (or 1)\', \'False (or 0)\'],\n[\'X\', \'True (or 1)\', \'True (or 1)\', \'False (or 0)\', \'True (or 1)\'],\n[\'True (or 1)\', \'True (or 1)\', \'False (or 0)\', \'X\', \'False (or 0)\'],\n[\'True (or 1)\', \'X\', \'False (or 0)\', \'False (or 0)\', \'False (or 0)\'],\n[\'X\', \'True (or 1)\', \'False (or 0)\', \'False (or 0)\', \'False (or 0)\'],\n[\'True (or 1)\', \'False (or 0)\', \'X\', \'True (or 1)\', \'True (or 1)\'],\n[\'True (or 1)\', \'False (or 0)\', \'X\', \'False (or 0)\', \'False (or 0)\'],\n[\'False (or 0)\', \'True (or 1)\', \'True (or 1)\', \'X\', \'True (or 1)\'],\n[\'False (or 0)\', \'True (or 1)\', \'X\', \'True (or 1)\', \'True (or 1)\'],\n[\'False (or 0)\', \'X\', \'True (or 1)\', \'False (or 0)\', \'True (or 1)\'],\n[\'False (or 0)\', \'False (or 0)\', \'X\', \'True (or 1)\', \'False (or 0)\'],\n[\'False (or 0)\', \'False (or 0)\', \'X\', \'False (or 0)\', \'True (or 1)\']]\n\nfirst_rand = choice(all_poss)\nsecond_rand = randint(0, 4)\n\nans = first_rand[second_rand]\nfirst_rand[second_rand] = \'?\'', 'What\'s the value of \'&lt;span style=\"color: blue;\"&gt;?&lt;/span&gt;\', given the following:\n&lt;table style=\"width: 95%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;a&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;b&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;Operation_0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;Operation_1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;Result&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;***first_rand[0]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***first_rand[1]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***first_rand[2]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***first_rand[3]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***first_rand[4]***&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;div style=\"margin-top: 10px;\"&gt;\n	&lt;img src=\"static/main/img/circuits/circuit04.png\" alt=\"Smiley face\" width=\"60%\"&gt;\n&lt;/div&gt;', 'True (or 1)', 'False (or 0)', 'X', 'I don\'t know', '***ans***', 60, 'multiple4', 1, 34),
(223, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', '___ time/delay is the time that the input must be stable before the rising edge of the clock ', 'Setup', 'Hold', 'CLK-to-Q', 'None of the answers', 'Setup', 2, 'multiple4', 1, 35),
(224, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', '___ time/delay is the time that the input must be stable after the rising edge of the clock ', 'Setup', 'Hold', 'CLK-to-Q', 'None of the answers', 'Hold', 2, 'multiple4', 1, 35),
(225, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', '___ time/delay is how long it would take for the output to change, measured starting from the rising edge of the clock', 'Setup', 'Hold', 'CLK-to-Q', 'None of the answers', 'CLK-to-Q', 2, 'multiple4', 1, 35),
(226, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = str(cl_delay+setup_time+clk_to_q_delay) + \' nanoseconds\'', 'Given that the \'&lt;span style=\"color: blue;\"&gt;cominational logic delay&lt;/span&gt;\' is ***cl_delay*** nanoseconds, the \'&lt;span style=\"color: blue;\"&gt;setup time&lt;/span&gt;\' is ***setup_time*** nanoseconds, the \'&lt;span style=\"color: blue;\"&gt;hold time&lt;/span&gt;\' is ***hold_time*** nanoseconds, and the \'&lt;span style=\"color: blue;\"&gt;CLK-to-Q delay&lt;/span&gt;\' is ***clk_to_q_delay*** nanoseconds. What\'s the total delay?', 'Answer here...', 'Hold', 'CLK-to-Q', 'None of the answers', '***ans***', 4, 'input1', 1, 35),
(227, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1000.0 / (cl_delay+setup_time+clk_to_q_delay),2)', 'Given that the \'&lt;span style=\"color: blue;\"&gt;cominational logic delay&lt;/span&gt;\' is ***cl_delay*** nanoseconds, the \'&lt;span style=\"color: blue;\"&gt;setup time&lt;/span&gt;\' is ***setup_time*** nanoseconds, the \'&lt;span style=\"color: blue;\"&gt;hold time&lt;/span&gt;\' is ***hold_time*** nanoseconds, and the \'&lt;span style=\"color: blue;\"&gt;CLK-to-Q delay&lt;/span&gt;\' is ***clk_to_q_delay*** nanoseconds. What\'s the frequency (&lt;span style=\"color: red;\"&gt;in MHz&lt;/span&gt;)? (your answer shouldn\'t be a ratio x/y, round to 2 decimal places)', 'Answer here...', 'Hold', 'CLK-to-Q', 'None of the answers', '***ans***', 3, 'input1', 1, 35),
(228, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1.0 / (cl_delay+setup_time+clk_to_q_delay), 2)', 'Given that the \'&lt;span style=\"color: blue;\"&gt;cominational logic delay&lt;/span&gt;\' is ***cl_delay*** nanoseconds, the \'&lt;span style=\"color: blue;\"&gt;setup time&lt;/span&gt;\' is ***setup_time*** nanoseconds, the \'&lt;span style=\"color: blue;\"&gt;hold time&lt;/span&gt;\' is ***hold_time*** nanoseconds, and the \'&lt;span style=\"color: blue;\"&gt;CLK-to-Q delay&lt;/span&gt;\' is ***clk_to_q_delay*** nanoseconds. What\'s the frequency (&lt;span style=\"color: red;\"&gt;in GHz&lt;/span&gt;)? (your answer shouldn\'t be a ratio x/y, round to 2 decimal places)', 'Answer here...', 'Hold', 'CLK-to-Q', 'None of the answers', '***ans***', 3, 'input1', 1, 35),
(229, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1.0 / (cl_delay+setup_time+clk_to_q_delay), 2)', 'What\'s the portion of the processor that contains the hardware necessary to perform operations required by the processor', 'Datapath', 'Controller (or Control Unit)', 'RAM', 'Cache', 'Datapath', 2, 'multiple4', 1, 35),
(230, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1.0 / (cl_delay+setup_time+clk_to_q_delay), 2)', 'What\'s the portion of the processor that tells the datapath what needs to be done (the brain)', 'Bus', 'Controller (or Control Unit)', 'RAM', 'Cache', 'Controller (or Control Unit)', 2, 'multiple4', 1, 35),
(231, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1.0 / (cl_delay+setup_time+clk_to_q_delay), 2)', 'Which one of these stages will be active for all MIPS instructions?', 'Instruction Decode', 'ALU', '(Data) Memory Access', 'Register Write', 'Instruction Decode', 2, 'multiple4', 1, 35),
(232, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1.0 / (cl_delay+setup_time+clk_to_q_delay), 2)', 'Which one of these stages will be active for all MIPS instructions?', 'Instruction Fetch', 'ALU', '(Data) Memory Access', 'Register Write', 'Instruction Fetch', 2, 'multiple4', 1, 35),
(233, 'five_stages = [\'Instruction Fetch\', \'Instruction Decode (and Register Read)\', \'ALU (Arithmetic Logic Unit)\', \'Memory Access\', \' Register Write\']\n\nall_inst = [[\'add\', True, True, True, False, True],\n[\'sub\', True, True, True, False, True],\n[\'addi\', True, True, True, False, True],\n[\'beq\', True, True, True, False, False],\n[\'bne\', True, True, True, False, False],\n[\'slt\', True, True, True, False, True],\n[\'sw\', True, True, True, True, False],\n[\'lw\', True, True, True, True, True]]\n\nrand_inst = randint(0, len(all_inst)-1)\nrand_stage = randint(0, 4)\n\nans = str(all_inst[rand_inst][rand_stage+1]).title()\n\ncl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n', 'The MIPS instruction ***all_inst[rand_inst][0]*** is active in the following stage: ***five_stages[rand_stage]***', 'True', 'False', '', '', '***ans***', 32, 'multiple2', 1, 35),
(234, 'rand_control_signal = randint(0, 5)\nall_instructions = [[\'add\', 1, \'X\', 1, 0, 1, 0],\n[\'sub\', 1, \'X\', 1, 0, 1, 0],\n[\'ori\', 0, 0, 1, 1, 1, 0],\n[\'lw\', 0, 1, 1, 1, 0, 0],\n[\'sw\', \'X\', 1, 0, 1, \'X\', 1]]\n\nrand_inst = randint(0, len(all_instructions)-1)\n\nans = all_instructions[rand_inst][rand_control_signal+1]', 'What\'s the value of ?&lt;sub&gt;***rand_control_signal***&lt;/sub&gt;, given that our MIPS instruction is ***all_instructions[rand_inst][0]***?\n\n&lt;div style=\"margin-top: 10px;\"&gt;\n	&lt;img src=\"static/main/img/circuits/circuit05.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n&lt;/div&gt;', '1', '0', 'X', 'I have no idea; gotta study more', '***ans***', 30, 'multiple4', 1, 36),
(235, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;unsigned binary&lt;/span&gt; sequence corresponding to the following decimal: ***v1,,randDecimal(0, 31)***', '***can1Ans,,decimalToUnsigned(^v1)***', '***can2Ans,,randBinary(0,31,0)***', '***can3Ans,,randBinary(0,31,0)***', '***can4Ans,,randBinary(0,31,0)***', '***ans,,decimalToUnsigned(^v1)***', 3, 'multiple4', -1, 40),
(236, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;unsigned binary&lt;/span&gt; sequence: ***v1,,randBinary(0, 31, 0)***', '***can1Ans,,binaryToDecimal(^v1)***', '***can2Ans,,randDecimal(0,31)***', '***can3Ans,,randDecimal(0,31)***', '***can4Ans,,randDecimal(0,31)***', '***ans,,binaryToDecimal(^v1)***', 3, 'multiple4', -1, 40),
(237, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;unsigned binary&lt;/span&gt; sequence corresponding to the following decimal: ***v1,,randDecimal(0, 31)*** (use 0b notation)', 'Answer here...', '', '', '', '***ans,,decimalToUnsigned(^v1)***', 3, 'input1', -1, 40),
(238, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;unsigned&lt;/span&gt; binary sequence: ***v1,,randBinary(0, 31,0)***', 'Answer here...', '', '', '', '***ans,,binaryToDecimal(^v1)***', 3, 'input1', -1, 40),
(239, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)***', '***ans,,decimalToSignMagnitude(^v1,6)***', '***can2Ans,,randBinary(0,63,6)***', '***can3Ans,,randBinary(0,63,6)***', '***can4Ans,,randBinary(0,63,6)***', '***ans,,decimalToSignMagnitude(^v1,6)***', 4, 'multiple4', -1, 40),
(240, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)*** (use 0b notation)', 'Answer here...', '', '', '', '***ans,,decimalToSignMagnitude(^v1,6)***', 4, 'input1', -1, 40),
(241, 'binarySequence = bin(randint(0, 63))\r\n\r\nwhile len(binarySequence) != 8:\r\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\r\n\r\nv1 = binarySequence\r\n\r\nans = int(binarySequence[3:], 2)\r\n\r\nif binarySequence[2] ==\'1\':\r\n	ans = ans * -1', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence: ***variable,v1***', '***ans***', '***randint(-31,31)***', '***randint(-31,31)***', '***randint(-31,31)***', '***ans***', 4, 'multiple4', -1, 40),
(242, 'binarySequence = bin(randint(0, 63))\r\n\r\nwhile len(binarySequence) != 8:\r\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\r\n\r\nv1 = binarySequence\r\n\r\nans = int(binarySequence[3:], 2)\r\n\r\nif binarySequence[2] ==\'1\':\r\n	ans = ans * -1', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence: ***variable,v1***', 'Answer here...', '', '', '', '***ans***', 4, 'input1', -1, 40),
(243, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', '***2**(v1 - 1) - 1***', '***randint(1,63)***', '***randint(1,63)***', '***randint(1,63)***', '***2**(v1 - 1) - 1***', 4, 'multiple4', -1, 40),
(244, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', '***-1 * 2**(v1 - 1) + 1***', '***-1 * randint(1,63)***', '***-1 * randint(1,63)***', '***-1 * randint(1,63)***', '***-1 * 2**(v1 - 1) + 1***', 4, 'multiple4', -1, 40),
(245, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', 'Answer here...', '', '', '', '***2**(v1 - 1) - 1***', 4, 'input1', -1, 40),
(246, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', 'Answer here...', '', '', '', '***-1 * 2**(v1 - 1) + 1***', 4, 'input1', -1, 40)</string>
		<string>INSERT INTO `main_subitem` (`id`, `subItem_order`, `subItem_title`, `subItem_category`, `subItem_link`, `subItem_function`, `show`, `item_id`) VALUES
(3, 0, 'PDF Notes', 'PDF', 'anyLink', 'anyFunction', 0, 3),
(4, 20, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 3),
(5, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 8),
(6, 20, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 6),
(7, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 7),
(8, 10, 'Slides (HTML)', 'PDF', 'anyLink', 'anyFunction', 0, 3),
(9, 20, 'Practice Questions (Contributors)', 'Practice', 'anyLink', 'anyFunction', 0, 3),
(10, 10, 'Assigned Reading: (4th) P&amp;H 2.4 | (5th) P&amp;H 2.4', 'Note', 'anyLink', 'anyFunction', 1, 3),
(11, 10, 'Assigned Reading: (4th) P&amp;H 2.4 | (5th) P&amp;H 2.4', 'Note', 'anyLink', 'anyFunction', 1, 6),
(13, 10, 'We didn\'t cover this part in class, hence won\'t be in Quiz. Practice Questions Part I (Pointer to a Pointer)', 'Practice', 'anyLink', 'anyFunction', 1, 9),
(14, 80, 'Practice Questions PART II (Arrays and Pointers Part II)', 'Practice', 'anyLink', 'anyFunction', 1, 9),
(16, 50, 'Revisionist History Ep 04: Carlos Doesn\'t Remember', 'Link', 'http://revisionisthistory.com/episodes/04-carlos-doesnt-remember', 'anyFunction', 0, 9),
(17, 60, 'Revisionist History Ep 05: Food Fight', 'Link', 'http://revisionisthistory.com/episodes/05-food-fight', 'anyFunction', 0, 9),
(18, 60, 'Revisionist History Ep 06: My Little Hundred Million (Interview with John Hennessey)', 'Link', 'http://revisionisthistory.com/episodes/06-my-little-hundred-million', 'anyFunction', 0, 9),
(19, 10, 'Assigned Reading: (4th) P&amp;H 2.1 &amp; 2.2 | (5th) P&amp;H 2.1 &amp; 2.2', 'Note', 'anyLink', 'anyFunction', 1, 10),
(20, 10, 'Assigned Reading: (4th) P&amp;H 2.2 &amp; 2.3 | (5th) P&amp;H 2.2 &amp; 2.3', 'Note', 'anyLink', 'anyFunction', 1, 11),
(21, 10, 'Practice Questions Part I (Trace MIPS Code)', 'Practice', 'anyLink', 'anyFunction', 1, 11),
(22, 10, 'Practice Questions Part II (Convert C to  MIPS)', 'Practice', 'anyLink', 'anyFunction', 1, 11),
(23, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 10),
(24, 10, 'Practice Questions Part I', 'Practice', 'anyLink', 'anyFunction', 1, 12),
(25, 10, 'Practice Questions Part II', 'Practice', 'anyLink', 'anyFunction', 1, 12),
(26, 10, 'Assigned Reading: (4th) P&amp;H 2.7 | (5th) P&amp;H 2.7', 'Note', 'anyLink', 'anyFunction', 1, 23),
(27, 10, 'Assigned Reading: (4th) P&amp;H 2.8 &amp; Appendix B.6 | (5th) P&amp;H 2.8 &amp; Appendix A.6', 'Note', 'anyLink', 'anyFunction', 1, 24),
(28, 20, 'Practice Questions Part I (MIPS to Binary)', 'Practice', 'anyLink', 'anyFunction', 1, 25),
(29, 20, 'Practice Questions Part II (Binary to MIPS)', 'Practice', 'anyLink', 'anyFunction', 1, 25),
(30, 10, 'Assigned Reading: Appendix B.1 (Introduction) &amp; Appendix B.2 (Gates, Truth Tables, and Logic Equations)', 'Note', 'anyLink', 'anyFunction', 1, 26),
(31, 10, 'Assigned Reading: Appendix B.3 (Subtopics \"Multiplexors\" &amp; \"Don\'t Cares\") &amp; Appendix B.5 (Subtopics \"A 1-Bit-ALU\" &amp; \"A 32-Bit ALU\")', 'Note', 'anyLink', 'anyFunction', 1, 27),
(32, 20, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 26),
(33, 10, 'Practice Questions Part I (No Dont Cares)', 'Practice', 'anyLink', 'anyFunction', 1, 28),
(34, 20, 'Practice Questions Part II (With Dont Cares)', 'Practice', 'anyLink', 'anyFunction', 1, 28),
(35, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 29),
(36, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 30),
(37, 10, '', 'Audio', '/static/main/audio/PP3692963319_ep4', 'anyFunction', 1, 31),
(38, 10, '', 'Audio', '/static/main/audio/PP3941264909_ep5', 'anyFunction', 1, 32),
(39, 10, '', 'Audio', '/static/main/audio/PP7918990166_ep6', 'anyFunction', 1, 33),
(40, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 34);
--</string>
		<string>INSERT INTO `main_item` (`id`, `item_order`, `item_content`, `type`, `expand`, `topic_id`) VALUES
(3, 20, 'Converting between Binary, Decimal, &amp; Hexadecimal; and representing Negative Numbers (Sign-Magnitude)', 'simple_expand', 1, 2),
(6, 0, 'Representing Negative Numbers (1s Complement and 2s Complement)', 'simple_expand', 1, 3),
(7, 0, 'Variables; printf; if statements; and loops', 'simple_expand', 1, 4),
(8, 0, 'Functions and Pointers Part I', 'simple_expand', 1, 5),
(9, 0, 'Arrays and Pointers Part II', 'simple_expand', 1, 6),
(10, 0, 'MIPS Assembly Programming Language Part I', 'simple_expand', 1, 7),
(11, 0, 'MIPS Assembly Programming Language Part II', 'simple_expand', 1, 8),
(12, 0, 'MIPS Assembly Programming Language Part IV', 'simple_expand', 1, 10),
(23, 0, 'MIPS Assembly Programming Language Part III', 'simple_expand', 1, 9),
(24, 0, 'MIPS Assembly Programming Language Part V', 'simple_expand', 1, 11),
(25, 0, 'MIPS Assembly Programming Language Part VII', 'simple_expand', 1, 15),
(26, 0, 'Combinational Logic Part I: Gates', 'simple_expand', 1, 17),
(27, 0, 'Combinational Logic Part II: Half Adder, Full Adder, &amp; Muxes', 'simple_expand', 1, 19),
(28, 0, 'Combinational/Sequential Logic Part I: Adders, Subtractors, Functional Completeness, &amp; Domino Computers', 'simple_expand', 1, 21),
(29, 0, 'CPU Clock &amp; Single-cycle Datapath Part I', 'simple_expand', 1, 27),
(30, 0, 'Single-cycle Datapath Part II &amp; The Control Unit', 'simple_expand', 1, 28),
(31, 0, 'Episode 4: Carlos Doesn\'t Remember', 'simple_expand', 1, 38),
(32, 5, 'Episode 5: Food Fight', 'simple_expand', 1, 38),
(33, 10, 'Episode 6: My Little Hundred Million (Interview with John Hennessy)', 'simple_expand', 1, 38),
(34, 0, 'Number Representation', 'simple_expand', 1, 43)</string>
		<string>INSERT INTO `main_topic` (`id`, `topic_order`, `topic_title`, `topic_date`, `week_id_id`) VALUES
(2, 0, 'Number Representation Part I', '2017-08-22', 1),
(3, 0, 'Number Representation Part II', '2017-08-24', 1),
(4, 1, 'Introduction to C Part I', '2017-08-29', 2),
(5, 0, 'Introduction to C Part II', '2017-08-31', 2),
(6, 1, 'Introduction to C Part III', '2017-09-05', 3),
(7, 1, 'MIPS Assembly Programming Language Part I', '2017-09-07', 3),
(8, 1, 'MIPS Assembly Programming Language Part II', '2017-09-14', 4),
(9, 1, 'MIPS Assembly Programming Language Part III', '2017-09-19', 5),
(10, 1, 'MIPS Assembly Programming Language Part IV', '2017-09-21', 5),
(11, 1, 'MIPS Assembly Programming Language Part V', '2017-09-26', 6),
(13, 1, 'MIPS Assembly Programming Language Part VI', '2017-09-28', 6),
(14, 0, 'First Exam', '2017-10-10', 8),
(15, 0, 'MIPS Assembly Programming Language Part VII', '2017-10-03', 7),
(16, 10, 'MIPS Assembly Programming Language Part VIII', '2017-10-05', 7),
(17, 0, 'Combinational Logic Part I: Gates\n', '2017-10-17', 9),
(19, 0, 'Combinational Logic Part II: Half adder, Full adder, &amp; Muxes\n', '2017-10-19', 9),
(21, 0, 'Combinational/Sequential Logic Part I: Adders, Subtracters, Functional Completeness, &amp; Domino Computers', '2017-10-24', 10),
(22, 0, 'Combinational/Sequential Logic Part II: Flip-flops, The Bus, Enablers, Decoders, Accessing the Memory, Circuit Delay, &amp; The Clock', '2017-10-26', 10),
(27, 0, 'CPU Clock &amp; Single-cycle Datapath Part I\n', '2017-10-31', 11),
(28, 0, 'Single-cycle Datapath Part II &amp; The Control Unit', '2017-11-02', 11),
(29, 0, 'Pipelining &amp; Pipelining Hazards Part I', '2017-11-07', 12),
(30, 0, 'Second Exam', '2017-11-09', 12),
(32, 0, 'Pipelining &amp; Pipelining Hazards Part II', '2017-11-14', 13),
(33, 0, 'Pipelining &amp; Pipelining Hazards Part III', '2017-11-16', 13),
(34, 0, 'Cache Part I', '2017-11-28', 15),
(36, 0, 'Cache Part II', '2017-11-30', 15),
(37, 0, 'Floating-Point Representation', '2017-11-21', 14),
(38, 2, 'Revisionist Histroy (Ep. 4 to Ep. 7)', '2017-11-30', 15),
(39, 0, 'CALL: Compiling, Assembling, Linking, and Loading', '2017-10-12', 8),
(41, 0, 'Thanksgiving Holiday (No Class)', '2017-11-23', 14),
(42, 0, 'Classes Canceled Due to Hurricane Irma', '2017-09-12', 4),
(43, 0, '', '2017-09-20', 16)</string>
		<string>INSERT INTO `main_week` (`id`, `week_order`, `week_title`, `week_start_date`, `semester`) VALUES
(1, 1, 'Week 01', '2017-01-09', '2017spring'),
(2, 2, 'Week 02', '2017-01-16', '2017spring'),
(3, 3, 'Week 03', '2017-01-23', '2017spring'),
(4, 4, 'Week 04', '2017-01-30', '2017spring'),
(5, 5, 'Week 05', '2017-02-06', '2017spring'),
(6, 6, 'Week 06', '2017-02-06', '2017spring'),
(7, 7, 'Week 07', '2017-02-06', '2017spring'),
(8, 8, 'Week 08', '2017-02-06', '2017spring'),
(9, 9, 'Week 09', '2017-02-06', '2017spring'),
(10, 10, 'Week 10', '2017-02-06', '2017spring'),
(11, 11, 'Week 11', '2017-02-06', '2017spring'),
(12, 12, 'Week 12', '2017-02-06', '2017spring'),
(13, 13, 'Week 13', '2017-02-06', '2017spring'),
(14, 14, 'Week 14', '2017-02-06', '2017spring'),
(15, 15, 'Week 15', '2017-02-06', '2017spring'),
(16, -10, 'For CSCI220', '2017-01-09', '2017spring')</string>
		<string>INSERT INTO `main_quizquestion` (`id`, `python_code`, `questionText`, `candidateAnswer1`, `candidateAnswer2`, `candidateAnswer3`, `candidateAnswer4`, `correctAnswer`, `repeat`, `quizType`, `author_id`, `subItem_id`) VALUES
(2, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;unsigned binary&lt;/span&gt; sequence corresponding to the following decimal: ***v1,,randDecimal(0, 31)***', '***can1Ans,,decimalToUnsigned(^v1)***', '***can2Ans,,randBinary(0,31,0)***', '***can3Ans,,randBinary(0,31,0)***', '***can4Ans,,randBinary(0,31,0)***', '***ans,,decimalToUnsigned(^v1)***', 3, 'multiple4', -1, 4),
(8, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;unsigned binary&lt;/span&gt; sequence: ***v1,,randBinary(0, 31, 0)***', '***can1Ans,,binaryToDecimal(^v1)***', '***can2Ans,,randDecimal(0,31)***', '***can3Ans,,randDecimal(0,31)***', '***can4Ans,,randDecimal(0,31)***', '***ans,,binaryToDecimal(^v1)***', 3, 'multiple4', -1, 4),
(10, '', 'What\'s the decimal value corresponding to the following hexadecimal sequence: ***v1,,randHex(0, 48)***', '***can1Ans,,hexToDecimal(^v1)***', '***can2Ans,,randDecimal(0,48)***', '***can3Ans,,randDecimal(0,48)***', '***can4Ans,,randDecimal(0,48)***', '***ans,,hexToDecimal(^v1)***', 3, 'multiple4', -1, 4),
(11, '', 'What\'s the binary value corresponding to the following hexadecimal sequence: ***v1,,randHex(0, 31)***', '***can1Ans,,hexToBinary(^v1)***', '***can2Ans,,randBinary(0,31,0)***', '***can3Ans,,randBinary(0,31,0)***', '***can4Ans,,randBinary(0,31,0)***', '***ans,,hexToBinary(^v1)***', 3, 'multiple4', -1, 4),
(13, '', 'What\'s the hexadecimal value corresponding to the following binary sequence: ***v1,,randBinary(0, 31,0)***', '***can1Ans,,binaryToHex(^v1)***', '***can2Ans,,randHex(0,31)***', '***can3Ans,,randHex(0,31)***', '***can4Ans,,randHex(0,31)***', '***ans,,binaryToHex(^v1)***', 3, 'multiple4', -1, 4),
(15, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;unsigned binary&lt;/span&gt; sequence corresponding to the following decimal: ***v1,,randDecimal(0, 31)*** (use 0b notation)', 'Answer here...', '', '', '', '***ans,,decimalToUnsigned(^v1)***', 3, 'input1', -1, 4),
(18, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;unsigned&lt;/span&gt; binary sequence: ***v1,,randBinary(0, 31,0)***', 'Answer here...', '', '', '', '***ans,,binaryToDecimal(^v1)***', 3, 'input1', -1, 4),
(19, '', 'What\'s the decimal value corresponding to the following hexadecimal sequence: ***v1,,randHex(0, 48)***', 'Answer here...', '', '', '', '***ans,,hexToDecimal(^v1)***', 3, 'input1', -1, 4),
(20, '', 'What\'s the binary value corresponding to the following hexadecimal sequence: ***v1,,randHex(0, 31)*** (use 0b notation)', 'Answer here...', '', '', '', '***ans,,hexToBinary(^v1)***', 3, 'input1', -1, 4),
(21, 'v1 = bin(randint(0, 31))\nans = hex(int(v1, 2))', 'What\'s the hexadecimal value corresponding to the following binary sequence: ***variable,v1*** (use 0x notation)', 'Answer here...', '', '', '', '***ans***', 3, 'input1', -1, 4),
(22, 'binarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv1 = binarySequence\n\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv2 = binarySequence\n\nans = addTwoBinaries(v1, v2, 5)', 'Add the two following &lt;span style=\"color: blue;\"&gt;5-bit unsigned&lt;/span&gt; binaries (use 0b notation): &lt;div style=\"margin-top:15px;\"&gt;***variable,v1***&lt;/div&gt;\n&lt;div&gt;***variable,v2***&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 8, 'input1', -1, 4),
(23, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)***', '***ans,,decimalToSignMagnitude(^v1,6)***', '***can2Ans,,randBinary(0,63,6)***', '***can3Ans,,randBinary(0,63,6)***', '***can4Ans,,randBinary(0,63,6)***', '***ans,,decimalToSignMagnitude(^v1,6)***', 4, 'multiple4', -1, 4),
(24, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit one\'s complement&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)***', '***can1Ans,,decimalToOnesComplement(^v1,6)***', '***can2Ans,,randBinary(0,63,6)***', '***can3Ans,,randBinary(0,63,6)***', '***can4Ans,,randBinary(0,63,6)***', '***can1Ans,,decimalToOnesComplement(^v1,6)***', 4, 'multiple4', 1, 6),
(25, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit two\'s complement&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-32, 31)***', '***can1Ans,,decimalToTwosComplement(^v1,6)***', '***can2Ans,,randBinary(0,63,6)***', '***can3Ans,,randBinary(0,63,6)***', '***can4Ans,,randBinary(0,63,6)***', '***ans,,decimalToTwosComplement(^v1,6)***', 4, 'multiple4', 1, 6),
(26, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)*** (use 0b notation)', 'Answer here...', '', '', '', '***ans,,decimalToSignMagnitude(^v1,6)***', 4, 'input1', -1, 4),
(27, 'binarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv1 = binarySequence\n\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv2 = binarySequence\n\nans = addTwoBinaries(v1, v2, 5)\n\n# Now generating a value for candidate 2\n#\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\ncand2 = binarySequence\n\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\ncand3 = binarySequence\n\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\ncand4 = binarySequence\n\n', 'Add the two following &lt;span style=\"color: blue;\"&gt;5-bit unsigned&lt;/span&gt; binaries (use 0b notation): &lt;div style=\"margin-top:15px;\"&gt;***variable,v1,***&lt;/div&gt;\n&lt;div&gt;***variable,v2***&lt;/div&gt;', '***ans***', '***cand2***', '***cand3***', '***cand4***', '***ans***', 4, 'multiple4', -1, 4),
(28, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit one\'s complement&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)***', 'Answer here...', '', '', '', '***ans,,decimalToOnesComplement(^v1,6)***', 4, 'input1', 1, 6),
(29, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit two\'s complement&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-32, 31)***', 'Answer here...', '', '', '', '***ans,,decimalToTwosComplement(^v1,6)***', 4, 'input1', 1, 6),
(30, 'binarySequence = bin(randint(0, 63))\n\nwhile len(binarySequence) != 8:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv1 = binarySequence\n\nans = int(binarySequence[3:], 2)\n\nif binarySequence[2] ==\'1\':\n	ans = ans * -1', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence: ***variable,v1***', '***ans***', '***randint(-31,31)***', '***randint(-31,31)***', '***randint(-31,31)***', '***ans***', 4, 'multiple4', -1, 4),
(31, 'binarySequence = bin(randint(0, 63))\n\nwhile len(binarySequence) != 8:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv1 = binarySequence\n\nans = int(binarySequence[3:], 2)\n\nif binarySequence[2] ==\'1\':\n	ans = ans * -1', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence: ***variable,v1***', 'Answer here...', '', '', '', '***ans***', 4, 'input1', -1, 4),
(32, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit one\'s complement&lt;/span&gt; binary sequence: &lt;br/&gt; ***v1,,randBinary(0,63,6)***', '***can1Ans,,onesComplementToDecimal(^v1)***', '***can2Ans,,randDecimal(-31,31)***', '***can3Ans,,randDecimal(-31,31)***', '***can4Ans,,randDecimal(-31,31)***', '***ans,,onesComplementToDecimal(^v1)***', 4, 'multiple4', 1, 6),
(33, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit one\'s complement&lt;/span&gt; binary sequence: &lt;br/&gt; ***v1,,randBinary(0,63,6)***', 'Answer here...', '', '', '', '***ans,,onesComplementToDecimal(^v1)***', 4, 'input1', 1, 6),
(34, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit two\'s complement&lt;/span&gt; binary sequence:&lt;br/&gt; ***v1,,randBinary(0,63,6)***', '***can1Ans,,twosComplementToDecimal(^v1)***', '***can2Ans,,randDecimal(-32,31)***', '***can3Ans,,randDecimal(-32,31)***', '***can4Ans,,randDecimal(-32,31)***', '***ans,,twosComplementToDecimal(^v1)***', 4, 'multiple4', 1, 6),
(35, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit two\'s complement&lt;/span&gt; binary sequence: ***v1,,randBinary(0,63,6)***', 'Answer here...', '', '', '', '***ans,,twosComplementToDecimal(^v1)***', 4, 'input1', 1, 6),
(36, 'binarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv1 = binarySequence\n\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv2 = binarySequence\n\nans = checkIfOverflow(v1, v2)', 'If we add the two following &lt;span style=\"color: blue;\"&gt;5-bit unsigned&lt;/span&gt; binaries, would we end up with an overflow or not? &lt;div style=\"margin-top:15px;\"&gt;***variable,v1***&lt;/div&gt;\n&lt;div&gt;***variable,v2***&lt;/div&gt;', 'Yes (an overflow will occur)', 'No overflow', '', '', '***ans***', 8, 'multiple2', 2, 4),
(38, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', '***2**(v1 - 1) - 1***', '***randint(1,63)***', '***randint(1,63)***', '***randint(1,63)***', '***2**(v1 - 1) - 1***', 4, 'multiple4', -1, 4),
(39, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', '***-1 * 2**(v1 - 1) + 1***', '***-1 * randint(1,63)***', '***-1 * randint(1,63)***', '***-1 * randint(1,63)***', '***-1 * 2**(v1 - 1) + 1***', 4, 'multiple4', -1, 4),
(40, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', 'Answer here...', '', '', '', '***2**(v1 - 1) - 1***', 4, 'input1', -1, 4),
(42, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', 'Answer here...', '', '', '', '***-1 * 2**(v1 - 1) + 1***', 4, 'input1', -1, 4),
(46, 'v1 = randint(0, 50)\nv2 = randint(0, 50)\nans = v1 + v2', 'What\'s the output of the following code:\n&lt;br/&gt;\n&lt;span style=\"color:red;\"&gt;print(***variable,v1*** + ***variable,v2***)&lt;/span&gt;', '***randint(0, 100)***', '***randint(0, 100)***', '***randint(0, 100)***', '***ans***', '***ans***', 5, 'multiple4', 3, 9),
(47, 'v1 = randint(0, 50)\nv2 = randint(0, 50)\nans = v1 + v2', 'What\'s the output of the following code:\n&lt;br/&gt;\n&lt;span style=\"color:blue;\"&gt;print(***variable,v1*** + ***variable,v2***)&lt;/span&gt;', '***randint(0, 100)***', '***randint(0, 100)***', '***randint(0, 100)***', '***ans***', '***ans***', 5, 'multiple4', 4, 9),
(49, 'v1 = randint(0, 50)\nv2 = randint(0, 50)\nans = v1 + v2', 'What\'s the output of the following Python code:\n&lt;br/&gt;\n&lt;span style=\"color:blue;\"&gt;print(***variable,v1*** + ***variable,v2***)&lt;/span&gt;', '***v1 + v2 + randint(-5, 5)***', '***v1 + v2 + randint(-5, 5)***', '***v1 + v2 + randint(-5, 5)***', '***ans***', '***ans***', 10, 'multiple4', 2, 9),
(50, 'var1 = randint(0,10)\nvar2 = randint(0,10)\nans = var1 + var2\nwhile ans &gt;= 16:\n    var1 = randint(0, 10)\n    var2 = randint(0, 10)\n    ans = var1 + var2\nvar1bin = str(bin(var1))\nvar2bin = str(bin(var2))\nwhile len(var1bin) != 6:\n    var1bin = var1bin[:2] +\'0\' + var1bin[2:]\nwhile len(var2bin) != 6 :\n    var2bin = var2bin[:2] + \'0\' + var2bin[2:]\nans = bin(var1 + var2)\nans = str(ans[2:])\nwhile len(ans) != 4:\n    ans = \'0\' + ans', 'What is the &lt;span style=\"color:green\"&gt;unsigned 4-bit binary&lt;/span&gt; answer to these two &lt;span style=\"color:blue\"&gt;unsigned 4-bit binary&lt;/span&gt; digits.\n&lt;br/&gt;  ***var1bin***\n&lt;br/&gt; +***var2bin***', '', '', '', '', 'ans', 10, 'input1', 3, 9),
(51, 'v1 = randint(3, 7)\nans = -1 * (2 ** (v1 - 1))', 'What\'s the &lt;span style=\"color:blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit two\'s complement&lt;/span&gt; binary sequence?', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans***', '***ans***', 3, 'multiple4', 1, 6),
(52, 'v1 = randint(3, 7)\nans = (2 ** (v1 - 1)) -1', 'What\'s the &lt;span style=\"color:blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit two\'s complement&lt;/span&gt; binary sequence?', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans***', '***ans***', 3, 'multiple4', 1, 6),
(53, 'v1 = randint(3, 7)\nans = -1 * (2 ** (v1 - 1))', 'What\'s the &lt;span style=\"color:blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit two\'s complement&lt;/span&gt; binary sequence?', 'Answer here...', '', '', '', '***ans***', 3, 'input1', 1, 6),
(54, 'v1 = randint(3, 7)\nans = (2 ** (v1 - 1)) -1', 'What\'s the &lt;span style=\"color:blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit two\'s complement&lt;/span&gt; binary sequence?', 'Answer here...', '', '', '', '***ans***', 3, 'input1', 1, 6),
(55, 'v1 = randint(3, 7)\nans = (2 ** (v1 - 1)) -1', 'What\'s the &lt;span style=\"color:blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit one\'s complement&lt;/span&gt; binary sequence?', 'Answer here...', '', '', '', '***ans***', 3, 'input1', 1, 6),
(56, 'v1 = randint(3, 7)\nans = (2 ** (v1 - 1)) -1', 'What\'s the &lt;span style=\"color:blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit one\'s complement&lt;/span&gt; binary sequence?', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans***', '***ans***', 3, 'multiple4', 1, 6),
(57, 'v1 = randint(3, 7)\nans = -1 * ((2 ** (v1 - 1)) -1)', 'What\'s the &lt;span style=\"color:blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit one\'s complement&lt;/span&gt; binary sequence?', 'Answer here...', '', '', '', '***ans***', 3, 'input1', 1, 6),
(58, 'v1 = randint(3, 7)\nans = -1 * ((2 ** (v1 - 1)) -1)', 'What\'s the &lt;span style=\"color:blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a &lt;span style=\"color:blue;\"&gt;***variable,v1***-bit one\'s complement&lt;/span&gt; binary sequence?', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans***', '***ans***', 3, 'multiple4', 1, 6),
(59, 'rand_length = randint(3, 7)\n\nrand_binary_1 = cofc_generate_random_binary(0, 2**rand_length-1, rand_length)\nrand_binary_2 = cofc_generate_random_binary(0, 2**rand_length-1, rand_length)\n\ndecimal_1 = cofc_twos_complement_to_decimal(rand_binary_1)\ndecimal_2 = cofc_twos_complement_to_decimal(rand_binary_2)\n\nmy_sum = decimal_1 + decimal_2\n\nif my_sum &gt; ((2**(rand_length - 1)) -1) or my_sum &lt; (-1 * (2**(rand_length - 1))):\n	ans = \"Yes (an overflow will occur)\"\nelse:\n	ans = \"No overflow\"', 'If we add the two following &lt;span style=\"color:blue;\"&gt;***variable,rand_length***-bit two\'s complement&lt;/span&gt; binaries, would we end up with an overflow or not?\n&lt;div style=\"margin-top:15px;\"&gt;***variable,rand_binary_1***&lt;/div&gt;\n&lt;div&gt;***variable,rand_binary_2***&lt;/div&gt;', 'Yes (an overflow will occur)', 'No overflow', '', '', '***ans***', 8, 'multiple2', 1, 6),
(60, 'rand_binary_length = randint(3, 8)\n\nrandom_binary_1 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\nrandom_binary_2 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\n\nmy_addition = int(random_binary_1, 2) + int(random_binary_2, 2)\n\n# Only for one\'s complement\nif my_addition &gt; (2**rand_binary_length - 1):\n	my_addition = my_addition + 1\n\nans = cofc_convert_decimal_to_unsigned_binary_with_length(my_addition, rand_binary_length)', 'Add the two following &lt;span style=\"color: blue;\"&gt;***variable,rand_binary_length***-bit one\'s complement&lt;/span&gt; binaries: &lt;div style=\"margin-top:15px;\"&gt;***variable,random_binary_1***&lt;/div&gt;\n&lt;div&gt;***variable,random_binary_2***&lt;/div&gt;', '***ans***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***ans***', 6, 'multiple4', 1, 6),
(61, 'rand_binary_length = randint(3, 6)\n\nrandom_binary_1 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\nrandom_binary_2 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\n\nmy_addition = int(random_binary_1, 2) + int(random_binary_2, 2)\n\n# Only for one\'s complement\nif my_addition &gt; (2**rand_binary_length - 1):\n	my_addition = my_addition + 1\n\nans = cofc_convert_decimal_to_unsigned_binary_with_length(my_addition, rand_binary_length)', 'Add the two following &lt;span style=\"color: blue;\"&gt;***variable,rand_binary_length***-bit one\'s complement&lt;/span&gt; binaries (use 0b notation): &lt;div style=\"margin-top:15px;\"&gt;***variable,random_binary_1***&lt;/div&gt;\n&lt;div&gt;***variable,random_binary_2***&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 6, 'input1', 1, 6),
(62, 'rand_binary_length = randint(3, 8)\n\nrandom_binary_1 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\nrandom_binary_2 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\n\nmy_addition = int(random_binary_1, 2) + int(random_binary_2, 2)\n\nans = cofc_convert_decimal_to_unsigned_binary_with_length(my_addition, rand_binary_length)', 'Add the two following &lt;span style=\"color: blue;\"&gt;***variable,rand_binary_length***-bit two\'s complement&lt;/span&gt; binaries: &lt;div style=\"margin-top:15px;\"&gt;***variable,random_binary_1***&lt;/div&gt;\n&lt;div&gt;***variable,random_binary_2***&lt;/div&gt;', '***ans***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***ans***', 4, 'multiple4', 1, 6),
(63, 'rand_binary_length = randint(3, 6)\n\nrandom_binary_1 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\nrandom_binary_2 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\n\nmy_addition = int(random_binary_1, 2) + int(random_binary_2, 2)\n\nans = cofc_convert_decimal_to_unsigned_binary_with_length(my_addition, rand_binary_length)', 'Add the two following &lt;span style=\"color: blue;\"&gt;***variable,rand_binary_length***-bit two\'s complement&lt;/span&gt; binaries: &lt;div style=\"margin-top:15px;\"&gt;***variable,random_binary_1***&lt;/div&gt;\n&lt;div&gt;***variable,random_binary_2***&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 4, 'input1', 1, 6),
(64, ' number = randint(-128,127)\n    binary = str(bin(number))\n    while len(binary) &lt; 10:\n        binary = binary[:2] + \'0\' + binary[2:]\n\n    if number &lt; 0:\n        for i in binary[2:]:\n            if i == \'0\':\n                onesComplement = onesComplement + \'1\'\n\n            if i == \'1\':\n                onesComplement = onesComplement + \'0\'\n\n    else:\n        for i in binary[2:]:\n            if i == \'0\':\n                onesComplement = onesComplement + \'0\'\n\n            if i == \'1\':\n                onesComplement = onesComplement  + \'1\'\n\n\n    onesComplement = \"0b\"\n\n    if number &lt; 0:\n        binary = binary[1:]\n\n', 'something', 'a', 'b', 'c', 'd', 'a', 1, 'multiple4', 4, 9),
(69, 'all_types_dec = [\'int\', \'float\', \'char\']\nall_types = [\'integer\', \'float\', \'character\']\nall_values = [randint(-50, 50), round(random.uniform(-31, 31),2), \"\'\" + chr(randint(65, 90)) + \"\'\"]\n\nrand_index = randint(0, len(all_types)-1)\n\n\nrand_int = randint(-10, 10)\nrand_float = round(random.uniform(-31, 31),2)\n\nans = str(rand_int) + \", \" + str(round(rand_float, 1)) + \", \" + str(rand_int + rand_float)', 'What\'s the output of the following code?\n\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	int my_int = ***rand_int***;\n	float my_float = ***rand_float***;\n	printf(\"%d, %.1f, %f\", my_int, my_float, my_int + my_float);\n}\n&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 4, 'input1', 1, 7),
(70, 'all_types_dec = [\'int\', \'float\', \'char\', \'long\', \'short\', \'char\', \'double\']\nall_types = [\'integer\', \'float\', \'character\']\nall_values = [randint(-50, 50), round(random.uniform(-31, 31),3), \"\'\" + chr(randint(65, 90)) + \"\'\"]\n\nrand_index = randint(0, len(all_types_dec)-1)\n\nans = \'printf(\"The size of a(n) \' + all_types_dec[rand_index] + \' is %lu\", sizeof(\' + all_types_dec[rand_index] + \'));\'', 'Write the C code that will print the following:\n&lt;div class=\"my_code\"&gt;\nThe size of a(n) ***all_types_dec[rand_index]*** is &amp;lt;actual_size_here&amp;gt;\n&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 4, 'input1', 1, 7),
(73, 'rand_1 = randint(-100, 100)\nrand_2 = randint(-100, 100)\n\nif rand_1 &gt; rand_2:\n	ans = \'I am inside the if statement!\'\nelse:\n	ans = \'I am inside the else section!\'', 'What\'s the output of the followig C code:\n&lt;div class=\"my_code\"&gt;\nif (***rand_1*** &gt; ***rand_2***)\n	printf(\"I am inside the if statement!\");\nelse\n	printf(\"I am insde the else section!\");\n&lt;/div&gt;', 'I am inside the if statement!', 'I am inside the else section!', '', '', '***ans***', 4, 'multiple2', 1, 7),
(74, 'surround_else = randint(0, 1)\nnum_of_expressions = randint(2, 5)\n\ntotal_exp = \'\'\npython_exp = \'\'\n\nlogical_symbols = [\' &amp;&amp; \', \' || \']\nlogical_symbols_p = [\' and \', \' or \']\nrelational_symbols = [\' &gt; \', \' &lt; \']\n\nfor el_num in range(num_of_expressions):\n	if num_of_expressions &gt; 1:\n		rand_1_here = randint(-100, 100)\n		relation_rand_here = randint(0,1)\n		rand_2_here = randint(-100, 100)\n		total_exp = total_exp + \'(\' + str(rand_1_here) + relational_symbols[relation_rand_here] + str(rand_2_here) + \')\'\n		python_exp = python_exp + \'(\' + str(rand_1_here) + relational_symbols[relation_rand_here] + str(rand_2_here) + \')\'\n	else:\n		total_exp = total_exp + str(rand_1_here) + relational_symbols[relation_rand_here] + str(rand_2_here)\n	if el_num != num_of_expressions - 1:\n		temp = randint(0, 1)\n		total_exp = total_exp + logical_symbols[temp]\n		python_exp = python_exp + logical_symbols_p[temp]\n\nif eval(python_exp) and surround_else == 1:\n	ans = \'I am inside the if statement!\'\nelif eval(python_exp) and surround_else == 0:\n	ans = \'I am inside the if statement!:)\'\nelse:\n	ans = \'I am inside the else section!:)\'\n\nbeg_a = \'\'\nend_a = \'\'\n\nif surround_else == 1:\n	beg_a = \'\\n{\'\n	end_a = \'\\n}\'\n', 'What\'s the output of the followig C code (note: the \'and\' logical operator has a higher priority than \'or\'):\n&lt;div class=\"my_code\"&gt;\nif (***total_exp***)\n	printf(\"I am inside the if statement!\");\nelse***beg_a***\n	printf(\"I am insde the else section!\");\n	printf(\":)\");***end_a***\n&lt;/div&gt;', 'I am inside the if statement!', 'I am inside the else section!', 'I am inside the if statement!:)', 'I am inside the else section!:)', '***ans***', 8, 'multiple4', 1, 7),
(75, 'c_var = randint(0, 5)\nmax_val = randint(10, 20)\nincrement = randint(1, 3)\nbreak_or_not = randint(0,2)\nbreak_or_con = randint(0,1)\nbreak_num = randint(c_var+ 1, max_val-1) \nadded_section1 = \'\'\nadded_section2 = \'\'\n\nif break_or_not &gt;= 1:\n	added_section1 = \"\\n\\tif (c_var == \" + str(break_num) + \")\"\n	if break_or_con == 1:\n		added_section2 = \"\\n\\t\\tbreak;\"\n	else:\n		added_section2 = \"\\n\\t\\tcontinue;\"\n\noutput = \'\'\n\nfor el_num in range(c_var, max_val, increment):\n	if break_or_not &gt;= 1 and break_or_con == 1 and el_num == break_num:\n		break\n	if break_or_not &gt;= 1 and break_or_con == 0 and el_num == break_num:\n		continue\n	output = output + str(el_num)', 'What\'s the output of the followig C code:\n&lt;div class=\"my_code\"&gt;\nint c_var;\nfor(c_var = ***c_var***; c_var &lt; ***max_val***; c_var = c_var + ***increment***)\n{***added_section1*** ***added_section2***\n	printf(\"%d\", c_var);\n}\n&lt;/div&gt;', 'Answer here...', '', '', '', '***output***', 8, 'input1', 1, 7),
(164, 'var1 = random.uniform(-31, 15)\n\nans = cofc_decimal_to_twos_complement(int(var1), 32)\n\nans = \'Value is: \' + str(cofc_convert_binary_to_hex(ans)[2:])\n\ncand1 = cofc_decimal_to_twos_complement(int(var1), 32)', 'What\'s the output of the following code:\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	int var_1 = ***var1***;\n	printf(\"Value is: %x\", var_1);\n}\n&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 5, 'input1', 1, 7),
(168, 'all_types_dec = [\'int\', \'float\', \'char\']\nall_types = [\'integer\', \'float\', \'character\']\nall_values = [randint(-50, 50), round(random.uniform(-31, 31),3), \"\'\" + chr(randint(65, 90)) + \"\'\"]\n\nrand_index = randint(0, len(all_types)-1)\n\nans = all_types_dec[rand_index] + \' my_var = \' + str(all_values[rand_index]) + \';\'', 'How do you declare a variable \'my_var\' of type ***all_types[rand_index]*** in C and give it the value ***all_values[rand_index]***', 'Answer here...', '', '', '', '***ans***', 5, 'input1', 1, 7),
(169, 'val_of_var_i = randint(0, 20)\n\nstr_var_1 = random.choice([\'value\', \'address\'])\nstr_var_2 = random.choice([\'var_i\', \'var_a\'])\nstr_var_3 = random.choice([\'var_a\', \'var_a_a\'])\n\nif str_var_1 == \'value\' and str_var_2 == \'var_a\' and str_var_3 == \'var_a\': ans = \'printf(\"%p\", var_a);\'\n\nif str_var_1 == \'address\' and str_var_2 == \'var_a\' and str_var_3 == \'var_a\': ans = \'printf(\"%p\", &amp;var_a);\'\n\nif str_var_1 == \'value\' and str_var_2 == \'var_a\' and str_var_3 == \'var_a_a\': ans = \'printf(\"%p\", *var_a_a);\'\n\nif str_var_1 == \'address\' and str_var_2 == \'var_a\' and str_var_3 == \'var_a_a\': ans = \'printf(\"%p\", var_a_a);\'\n\nif str_var_1 == \'value\' and str_var_2 == \'var_i\' and str_var_3 == \'var_a\': ans = \'printf(\"%f\", *var_a);\'\n\nif str_var_1 == \'address\' and str_var_2 == \'var_i\' and str_var_3 == \'var_a\': ans = \'printf(\"%p\", var_a);\'\n\nif str_var_1 == \'value\' and str_var_2 == \'var_i\' and str_var_3 == \'var_a_a\': ans = \'printf(\"%f\", **var_a_a);\'\n\nif str_var_1 == \'address\' and str_var_2 == \'var_i\' and str_var_3 == \'var_a_a\': ans = \'printf(\"%p\", *var_a_a);\'\n', 'Type the C command to print the ***str_var_1*** of ***str_var_2*** using ***str_var_3***\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	float var_i = ***val_of_var_i***;\n	float *var_a = &amp;var_i;\n	float **var_a_a = &amp;var_a;\n}\n&lt;/div&gt;', '', '', '', '', '***ans***', 16, 'input1', 1, 13),
(170, 'val_of_var_i = randint(0, 20)\n\nstr_var_1 = random.choice([\'\', \'*\'])\nstr_var_2 = random.choice([\'\', \'*\', \'&amp;\'])\nstr_var_3 = random.choice([\'\', \'*\', \'&amp;\'])\n\nans = \'\'\n\nif str_var_1 == \'*\' and str_var_2 != \'&amp;\': ans = \'Error(s) in code\'					# 3 cases\n\nif str_var_2 == \'&amp;\': ans = \'Error(s) in code\'										# 6 cases\n\nif str_var_2 == \'*\' and str_var_3 != \'&amp;\':  ans = \'Error(s) in code\'\n\nif str_var_2 == \'\' and str_var_3 != \'\': ans = \'Error(s) in code\'\n\nif str_var_1 == \'*\' and str_var_2 == \'*\' and str_var_3 == \'&amp;\': ans = val_of_var_i + 5	# 1 case\n\nif str_var_1 != \'*\' and str_var_2 == \'*\': ans = \'Error(s) in code\'	# 3 cases\n\nif str_var_1 == \'\' and str_var_2 == \'\' and str_var_3 == \'\': ans = val_of_var_i		# 1 case\n\n', 'What\'s the output to the following code:\n&lt;div class=\"my_code\"&gt;\nvoid change_value(int ***str_var_1***value)\n{\n	***str_var_2***value = ***str_var_2***value + 5;\n}\nvoid main()\n{\n	int var = ***val_of_var_i***;\n	change_value(***str_var_3***var);\n	printf(\"%d\", var);\n}\n&lt;/div&gt;', 'Error(s) in code', '***val_of_var_i + 5***', '***val_of_var_i***', 'No errors but different output', '***ans***', 36, 'multiple4', 1, 5),
(171, 'val_of_var_i = randint(5, 20)\n\nstr_var_1 = random.choice([\'&amp;\', \'*\'])\nstr_var_2 = random.choice([\'\', \'&amp;\', \'*\'])\nstr_var_3 = random.choice([\'\', \'&amp;\', \'*\'])\n\ncon_str = str_var_1 + str_var_2 + str_var_3\n\nans = \'\'\n\nif \'&amp;&amp;\' in con_str or \'***\' in con_str: \n	ans = \'Error\'\nelse:\n	con_str = con_str.replace(\'&amp;*\', \'\')\n	con_str = con_str.replace(\'*&amp;\', \'\')\n	if con_str == \'&amp;\':\n		ans = 80\n	if con_str == \'*\':\n		ans = 40\n	if con_str == \'**\':\n		ans = val_of_var_i\n	if con_str == \'\':\n		ans = 120', 'Given the following pieces of information:\n&lt;table style=\"width: 80%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;a1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;a2&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;a3&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Value&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***val_of_var_i***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;?&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;120&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Address&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;40&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;?&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;80&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n\nWhat\'s the value of &lt;span style=\"color: indianred;\"&gt;***str_var_1+str_var_2+str_var_3***a3&lt;/span&gt; according to the code below: \n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	int a1 = ***val_of_var_i***;\n	int *a2 = &amp;a1;\n	int **a3 = &amp;a2;\n}\n&lt;/div&gt;\n&lt;span style=\"color: blue;\"&gt;Type \'Error\' if code will cause an error.&lt;/span&gt;', 'Answer here...', '', '', '', '***ans***', 36, 'input1', 1, 13),
(172, 'val_of_var_i = randint(0, 20)\naddress_of_var = hex(randint(20, 40) * 4)\n\nans = str(val_of_var_i) + \', \' + str(address_of_var) + \', \' + str(address_of_var) + \', \' +  str(val_of_var_i)', 'Given that the address of &lt;span style=\"color: blue;\"&gt;var_i&lt;/span&gt; is ***address_of_var*** .What\'s the output to the following code:\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	int var_i = ***val_of_var_i***;\n	int *var_p = &amp;var_i;\n	printf(\"%d, %p, %p, %d\", var_i, var_p, &amp;var_i, *var_p);\n}\n&lt;/div&gt;', '', '', '', '', '***ans***', 4, 'input1', 1, 5),
(174, 'data_type_list = [\'int\', \'float\', \'char\']\ncurr_data_type = choice(data_type_list)\n\nsize_list = [4, 8]\ncurr_size = choice(size_list)\n\nadd_value = randint(2, 7)\naddress_random = randint(10, 50) * 4\n\nin_case_not_char = \'; also given that a(n) \' + curr_data_type + \' is \' + str(curr_size) + \' bytes\'\n\nif curr_data_type == \'char\':\n	curr_size = 1\n	in_case_not_char = \'\'\n\nans = address_random + curr_size * add_value', 'Given that the address of &lt;span style=\"color:blue;\"&gt;my_var&lt;/span&gt; is ***address_random*** (in decimal)***in_case_not_char***. What\'s the output of the following code:\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	***curr_data_type*** *my_var;\n	printf(\"%p\", my_var + ***add_value***); // Type address in decimal\n}\n&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 6, 'input1', 1, 14),
(175, 'data_type_list = [\'int\', \'float\', \'char\']\ncurr_data_type = choice(data_type_list)\n\nsize_list = [4, 8]\ncurr_size = choice(size_list)\n\nrandom_array_size = randint(2, 7) * 5\n\nif curr_data_type == \'char\':\n	curr_size = 1\n\nans = curr_size * random_array_size', 'Given that the size of a(n) ***curr_data_type*** is ***curr_size*** bytes. What\'s the output of the following code:\n\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	***curr_data_type*** my_array[***random_array_size***];\n	printf(\"%lu\", sizeof(my_array));\n}\n&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 6, 'input1', 1, 14),
(176, 'data_type_list = [\'int\', \'float\', \'char\']\ncurr_data_type = choice(data_type_list)\n\nsize_list = [4, 8]\ncurr_size = choice(size_list)\n\nrandom_array_size = randint(2, 80)# * 5\n\nif curr_data_type == \'char\':\n	curr_size = 1\n\nans = curr_data_type + \' my_array[\' + str(random_array_size) + \'];\'', 'Type the code to declare/create an array &lt;span style=\"color:blue;\"&gt;my_array&lt;/span&gt; of type ***curr_data_type*** of size ***random_array_size*** elements', 'Answer here...', '', '', '', '***ans***', 6, 'input1', 1, 14),
(177, 'data_type_list = [\'int\', \'float\']\ncurr_data_type = choice(data_type_list)\n\ncurr_data_type = \'int\' \n\nrandom_address = randint(4, 20) * 4\n\nsize_list = [4, 8]\ncurr_size = choice(size_list)\n\nmult = randint(2, 5)\nrandom_shift = randint(0, 9)\n\nmy_first_arr = [0*mult, 1*mult, 2*mult, 3*mult, 4*mult, 5*mult, 6*mult, 7*mult, 8*mult, 9*mult]\n\nans = str(random_address + curr_size * random_shift) + \', \' + str(my_first_arr[random_shift])', 'Given that the size of a(n) ***curr_data_type*** is ***curr_size*** bytes, and address of \'my_array\' is ***random_address*** (in decimal). What\'s the output of the following code:\n\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	***curr_data_type*** my_array[10];\n	int counter;\n	for (counter = 0; counter &lt; 10; counter++)\n		my_array[counter] = counter * ***mult***;\n\n	printf(\"%p, %d\", (my_array + ***random_shift***), *(my_array + ***random_shift***));\n	// Type answer of address in decimal\n}\n&lt;/div&gt;', 'Answer here...', '', '', '', '***ans***', 4, 'input1', 1, 14),
(178, 'data_type_list = [\'int\', \'float\']\ncurr_data_type = choice(data_type_list)\n\ncurr_data_type = \'int\'\n\nrandom_value = randint(50, 200)\n\nsize_list = [4, 8]\ncurr_size = choice(size_list)\n\nnotation_pick = choice([\'using the brackets notation\', \'by explicitly dereferencing the array\'])\n\nmult = randint(2, 5)\nrandom_shift = randint(1, 9)\n\nmy_first_arr = [0*mult, 1*mult, 2*mult, 3*mult, 4*mult, 5*mult, 6*mult, 7*mult, 8*mult, 9*mult]\n\nif notation_pick == \'using the brackets notation\':\n	ans = \'my_array[\' + str(random_shift) + \'] = \' + str(random_value) + \';\'\nelse:\n	ans = \'*(my_array + \' + str(random_shift) + \') = \' + str(random_value) + \';\'\n', 'Write code to change the element at index ***random_shift*** for the array &lt;span style=\"color:blue;\"&gt;my_array&lt;/span&gt; ***notation_pick*** to the value ***random_value***', 'Answer here...', '', '', '', '***ans***', 4, 'input1', 1, 14),
(180, 'def get_line(_num_of_lines, _curr_line, _reg_ini, _reg_not, _reg_all, _reg_array, _curr_array):\n    # This is the first line that we\'re generating\n    #\n    if _curr_line &gt; 1:\n        target_reg = choice(_reg_all)\n        command = choice([\'load word\', \'load word\', \'initialize\', \'add\', \'add\', \'sub\', \'sub\', \'sw\', \'sw\'])\n\n        if command == \'load word\':\n            offset_rand = randint(0, 4) * 4\n            line = \'lw \' + target_reg + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _reg_ini[target_reg] = int(_curr_array[offset_rand//4])\n        elif command == \'initialize\':\n            value_rand = randint(2, 9)\n            _reg_ini[target_reg] = value_rand\n            line = \'addi \' + target_reg + \', $zero, \' + str(value_rand)\n        elif command == \'add\':\n            reg_source_1 = choice(_reg_ini.keys())\n            reg_source_2 = choice(_reg_ini.keys())\n            line = \'add \' + target_reg + \', \' + reg_source_1 + \', \' + reg_source_2\n            _reg_ini[target_reg] = _reg_ini[reg_source_1] + _reg_ini[reg_source_2]\n        elif command == \'sub\':\n            reg_source_1 = choice(_reg_ini.keys())\n            reg_source_2 = choice(_reg_ini.keys())\n            line = \'sub \' + target_reg + \', \' + reg_source_1 + \', \' + reg_source_2\n            _reg_ini[target_reg] = _reg_ini[reg_source_1] - _reg_ini[reg_source_2]\n        elif command == \'sw\':\n            offset_rand = randint(0, 4) * 4\n            reg_to_be_loaded = choice(_reg_ini.keys())\n            line = \'sw \' + reg_to_be_loaded + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _curr_array[offset_rand//4] = _reg_ini[reg_to_be_loaded]\n    else:\n        target_reg = choice(_reg_all)\n        command = choice([\'load word\', \'initialize\'])\n\n        if command == \'load word\':\n            offset_rand = randint(0, 4) * 4\n            line = \'lw \' + target_reg + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _reg_ini[target_reg] = int(_curr_array[offset_rand//4])\n        else:\n            value_rand = randint(2, 9)\n            _reg_ini[target_reg] = value_rand\n            line = \'addi \' + target_reg + \', $zero, \' + str(value_rand)\n\n    return line\n\nreg_ini = {}\n\n# We\'ll assume array size is 5\n#\ncurr_array = [str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20))]\ncurr_array_str = \'[\' + \', \'.join(curr_array) + \']\'\n\narray_size = 5\n\n# We\'ll reserve $s0 for the array pointer\n#\nreg_array_reserved = \'$s0\'\n\nreg_not = [\'$s0\', \'$s1\', \'$s2\', \'$s3\', \'$s4\', \'$s5\', \'$s6\', \'$s7\',\n           \'$t0\', \'$t1\', \'$t2\', \'$t3\', \'$t4\', \'$t5\', \'$t6\', \'$t7\']\nreg_not.remove(reg_array_reserved)\n\n\nreg_all = [\'$s0\', \'$s1\', \'$s2\', \'$s3\', \'$s4\', \'$s5\', \'$s6\', \'$s7\',\n           \'$t0\', \'$t1\', \'$t2\', \'$t3\', \'$t4\', \'$t5\', \'$t6\', \'$t7\']\nreg_all.remove(reg_array_reserved)\n\n\nnum_of_lines = randint(3, 10)\nall_lines = []\nfor curr_line in range(num_of_lines):\n    all_lines.append(get_line(num_of_lines, curr_line, reg_ini, reg_not, reg_all, reg_array_reserved, curr_array))\n\n\nmips_code = \'\\n\'.join(all_lines)\n\nlist_of_ini = reg_ini.keys()[:]\nlist_of_ini.sort()\nquestion_output = \', \'.join(list_of_ini)\n\nlist_of_answers = []\n\nfor curr_register in list_of_ini:\n    list_of_answers.append(str(reg_ini[curr_register]))\n\nall_answers = \', \'.join(list_of_answers)', 'Given that the array &lt;span style=\"color:blue;\"&gt;my_array&lt;/span&gt; contains the following elements ***curr_array_str***; also, assume that the register &lt;span style=\"color:blue;\"&gt;$s0&lt;/span&gt; points to (or contains the address of) the first element in the array. List the values of these registers ***question_output*** in the given order (separate each value by a comma) after executing the code below:\n&lt;div class=\"my_code\"&gt;\n***mips_code***\n&lt;/div&gt;', 'Separate each value by a comma followed by a space', '', '', '', '***all_answers***', 20, 'input1', 1, 21),
(181, 'def get_line(_num_of_lines, _curr_line, _reg_ini, _reg_not, _reg_all, _reg_array, _curr_array):\n    # This is the first line that we\'re generating\n    #\n    if _curr_line &gt; 1:\n        target_reg = choice(_reg_all)\n        command = choice([\'load word\', \'load word\', \'initialize\', \'add\', \'sub\', \'sw\', \'sw\', \'sw\'])\n\n        if command == \'load word\':\n            offset_rand = randint(0, 4) * 4\n            line = \'lw \' + target_reg + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _reg_ini[target_reg] = int(_curr_array[offset_rand//4])\n        elif command == \'initialize\':\n            value_rand = randint(2, 9)\n            _reg_ini[target_reg] = value_rand\n            line = \'addi \' + target_reg + \', $zero, \' + str(value_rand)\n        elif command == \'add\':\n            reg_source_1 = choice(_reg_ini.keys())\n            reg_source_2 = choice(_reg_ini.keys())\n            line = \'add \' + target_reg + \', \' + reg_source_1 + \', \' + reg_source_2\n            _reg_ini[target_reg] = _reg_ini[reg_source_1] + _reg_ini[reg_source_2]\n        elif command == \'sub\':\n            reg_source_1 = choice(_reg_ini.keys())\n            reg_source_2 = choice(_reg_ini.keys())\n            line = \'sub \' + target_reg + \', \' + reg_source_1 + \', \' + reg_source_2\n            _reg_ini[target_reg] = _reg_ini[reg_source_1] - _reg_ini[reg_source_2]\n        elif command == \'sw\':\n            offset_rand = randint(0, 4) * 4\n            reg_to_be_loaded = choice(_reg_ini.keys())\n            line = \'sw \' + reg_to_be_loaded + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _curr_array[offset_rand//4] = str(_reg_ini[reg_to_be_loaded])\n    else:\n        target_reg = choice(_reg_all)\n        command = choice([\'load word\', \'initialize\'])\n\n        if command == \'load word\':\n            offset_rand = randint(0, 4) * 4\n            line = \'lw \' + target_reg + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _reg_ini[target_reg] = int(_curr_array[offset_rand//4])\n        else:\n            value_rand = randint(2, 9)\n            _reg_ini[target_reg] = value_rand\n            line = \'addi \' + target_reg + \', $zero, \' + str(value_rand)\n\n    return line\n\nreg_ini = {}\n\n# We\'ll assume array size is 5\n#\ncurr_array = [str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20))]\ncurr_array_str = \'[\' + \', \'.join(curr_array) + \']\'\n\narray_size = 5\n\n# We\'ll reserve $s0 for the array pointer\n#\nreg_array_reserved = \'$s0\'\n\nreg_not = [\'$s0\', \'$s1\', \'$s2\', \'$s3\', \'$s4\', \'$s5\', \'$s6\', \'$s7\',\n           \'$t0\', \'$t1\', \'$t2\', \'$t3\', \'$t4\', \'$t5\', \'$t6\', \'$t7\']\nreg_not.remove(reg_array_reserved)\n\n\nreg_all = [\'$s0\', \'$s1\', \'$s2\', \'$s3\', \'$s4\', \'$s5\', \'$s6\', \'$s7\',\n           \'$t0\', \'$t1\', \'$t2\', \'$t3\', \'$t4\', \'$t5\', \'$t6\', \'$t7\']\nreg_all.remove(reg_array_reserved)\n\n\nnum_of_lines = randint(3, 10)\nall_lines = []\nfor curr_line in range(num_of_lines):\n    all_lines.append(get_line(num_of_lines, curr_line, reg_ini, reg_not, reg_all, reg_array_reserved, curr_array))\n\n\nmips_code = \'\\n\'.join(all_lines)\n\nlist_of_ini = reg_ini.keys()[:]\nlist_of_ini.sort()\nquestion_output = \', \'.join(list_of_ini)\n\nlist_of_answers = []\n\nfor curr_register in list_of_ini:\n    list_of_answers.append(str(reg_ini[curr_register]))\n\n#all_answers = \', \'.join(list_of_answers)\n\nall_answers = \', \'.join(curr_array)', 'Given that the array &lt;span style=\"color:blue;\"&gt;my_array&lt;/span&gt; contains the following elements ***curr_array_str***; also, assume that the register &lt;span style=\"color:blue;\"&gt;$s0&lt;/span&gt; points to (or contains the address of) the first element in the array. List the values of &lt;span style=\"color:blue;\"&gt;my_array&lt;/span&gt; after executing the code below (don\'t include the square brackets and separate each value by a comma followed by a space):\n&lt;div class=\"my_code\"&gt;\n***mips_code***\n&lt;/div&gt;', 'No square brackets. Separate values by commas followed by space', '', '', '', '***all_answers***', 15, 'input1', 1, 21),
(182, 'def generate_expression(_target_reg, _allowed_vars, _all_mips_lines):\n    rand_num = randint(5, 20)\n    _allowed_vars.append(str(rand_num))\n    shuffle(_allowed_vars)\n    location_of_num = _allowed_vars.index(str(rand_num))\n    if location_of_num == 0:\n        _allowed_vars.append(_allowed_vars[1])\n        _allowed_vars.append(_allowed_vars[0])\n        _allowed_vars.pop(0)\n        _allowed_vars.pop(1)\n    for list_el in range(len(_allowed_vars) - 1):\n        rand_operator = choice([\'+\', \'-\'])\n        _allowed_vars.insert(list_el*2 + 1, rand_operator)\n\n    for list_el in range(len(_allowed_vars)//2):\n        if _allowed_vars[list_el * 2 + 1] == \'+\' and _allowed_vars[list_el * 2 + 2] == str(rand_num):\n            if list_el == 0:\n                _all_mips_lines.append(\'addi \' + _target_reg + \', $\' + _allowed_vars[list_el * 2] + \', \' + str(rand_num))\n            else:\n                _all_mips_lines.append(\'addi \' + _target_reg + \', \' + _target_reg + \', \' + str(rand_num))\n\n        elif _allowed_vars[list_el*2 + 1] == \'-\' and _allowed_vars[list_el * 2 + 2] == str(rand_num):\n            if list_el == 0:\n                _all_mips_lines.append(\'addi \' + _target_reg + \', $\' + _allowed_vars[list_el * 2] + \', \' + str(-1 * rand_num))\n            else:\n                _all_mips_lines.append(\'addi \' + _target_reg + \', \' + _target_reg + \', \' + str(-1 * rand_num))\n\n        # That means it\'s either r + r or r - r\n        #\n        elif _allowed_vars[list_el*2 + 1] == \'+\':\n            if list_el == 0:\n                _all_mips_lines.append(\'add \' + _target_reg + \', $\' + _allowed_vars[list_el * 2] + \', $\' + _allowed_vars[list_el * 2 + 2])\n            else:\n                _all_mips_lines.append(\'add \' + _target_reg + \', \' + _target_reg + \', $\' + _allowed_vars[list_el * 2 + 2])\n\n        elif _allowed_vars[list_el*2 + 1] == \'-\':\n            if list_el == 0:\n                _all_mips_lines.append(\'sub \' + _target_reg + \', $\' + _allowed_vars[list_el * 2] + \', $\' + _allowed_vars[list_el * 2 + 2])\n            else:\n                _all_mips_lines.append(\'sub \' + _target_reg + \', \' + _target_reg + \', $\' + _allowed_vars[list_el * 2 + 2])\n\ntarget_var = \'$s0\'\nallowed_vars = []\n\nall_lines = []\nall_mips_lines = []\n\nfor el_ini in range(randint(1, 4)):\n    rand_value = str(randint(5, 20))\n    all_lines.append(\'int s\' + str(el_ini+1) + \' = \' + rand_value + \';\')\n    allowed_vars.append(\'s\' + str(el_ini+1))\n    all_mips_lines.append(\'addi \' + allowed_vars[-1] + \', $zero, \' + rand_value)\n\ngenerate_expression(target_var, allowed_vars, all_mips_lines)\n\nall_lines.append(\'int result = \' + \' \'.join(allowed_vars) + \';\')\n\nc_code = \'\\n\\t\'.join(all_lines)\n\nans = \'\\n\'.join(all_mips_lines)', 'Convert the following C code to MIPS. Assume the variable &lt;span style=\"color: blue;\"&gt;result&lt;/span&gt; will correspond to register $s0. Write your answer on a piece of paper then compare it with correct answer.\n&lt;div class=\"my_code\"&gt;\nvoid main()\n{\n	***c_code***	\n}\n&lt;/div&gt;', '', '', '', '', '***ans***', 10, 'no_input', 1, 22),
(185, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'How many bits do we need to identify a particular register; given we have ***rand_num*** registers, numbered from 0 to ***rand_num-1***', 'Answer here...', '', '', '', '***val***', 4, 'input1', 1, 23),
(186, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'Assembly language is a:', 'High-level Programming Language', 'Low-level Programming Language', '', '', 'Low-level Programming Language', 2, 'multiple2', 1, 23),
(187, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'Each assembly language is specific to a particular computer architecture.', 'True', 'False', '', '', 'True', 2, 'multiple2', 1, 23),
(188, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'Each type of processor has its own assembly language.', 'True', 'False', '', '', 'True', 2, 'multiple2', 1, 23),
(189, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'The high-level programming language C is architecture-dependent.', 'True', 'False', '', '', 'False', 2, 'multiple2', 1, 23),
(190, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'In MIPS-32 (32-bit MIPS), each pure instruction will be assembled to 32 bits.', 'Always true', 'Most of the time true', '', '', 'Always true', 2, 'multiple2', 1, 23),
(191, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'In MIPS-32 (32-bit MIPS), the size of each register is 32 bits.', 'Always true', 'Always false', 'Most of the time true', 'Depends on CPU', 'Always true', 2, 'multiple4', 1, 23),
(192, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'What\'s the name of the component that translates C to Assembly?', 'Answer here...', '', '', '', 'Compiler', 2, 'input1', 1, 23),
(193, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'What\'s the name of the component that translates Assembly to Machine Language?', 'Answer here...', '', '', '', 'Assembler', 2, 'input1', 1, 23),
(194, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'What does RISC stand for (the first letter of each word should be capitalized)?', 'The first letter of each word should be capitalized', '', '', '', 'Reduced Instruction Set Computing', 2, 'input1', 1, 23),
(195, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'What does CISC stand for (the first letter of each word should be capitalized)?', 'The first letter of each word should be capitalized', '', '', '', 'Complex Instruction Set Computing', 2, 'input1', 1, 23),
(196, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'How many bytes in half a word?', 'Answer here...', '', '', '', '2', 2, 'input1', 1, 23),
(197, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'How many bytes in a word?', 'Answer here...', '', '', '', '4', 2, 'input1', 1, 23),
(198, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'How many bits in a byte?', 'Answer here...', '', '', '', '8', 2, 'input1', 1, 23);
INSERT INTO `main_quizquestion` (`id`, `python_code`, `questionText`, `candidateAnswer1`, `candidateAnswer2`, `candidateAnswer3`, `candidateAnswer4`, `correctAnswer`, `repeat`, `quizType`, `author_id`, `subItem_id`) VALUES
(199, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'In modern computers, memory is bit-addressable; in other words, one particular address refers to one particular bit.', 'True', 'False', '', '', 'False', 2, 'multiple2', 1, 23),
(200, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'What is the special-purpose register that holds/contains the address of the instruction that will be fetched next.', 'PC', 'CP', 'FP', 'SP', 'PC', 2, 'multiple4', 1, 23),
(201, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'In the context of registers, what does PC stand for (the first letter of each word should be capitalized)?', 'Answer here...', '', '', '', 'Program Counter', 2, 'input1', 1, 23),
(202, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'Accessing registers is extremely fast, almost as fast as accessing the random access memory (RAM).', 'True', 'False', '', '', 'False', 2, 'multiple2', 1, 23),
(203, 'def convert_c_to_mips(_all_lines):\n    	ans_all = []\n    	oper = _all_lines[0].split(\' \')\n\n    	if oper[2] == \'&lt;\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n		ans_all.append(\'beq $t0, $zero, ELSE\')\n\n    	elif oper[2] == \'&gt;\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'beq $t0, $zero, ELSE\')\n\n    	elif oper[2] == \'==\':\n        	ans_all.append(\'bne $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'!=\':\n        	ans_all.append(\'beq $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'&lt;=\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'bne $t0, $zero, ELSE\')\n\n    	elif oper[2] == \'&gt;=\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n        	ans_all.append(\'bne $t0, $zero, ELSE\')\n\n\n    	for line_num in range(1, len(_all_lines)):\n        	if _all_lines[line_num] == \'else\':\n            		ans_all.append(\'j AFTER\')\n            		ans_all.append(\'ELSE:\')\n        	elif _all_lines[line_num] != \'{\' and _all_lines[line_num] != \'}\':\n            		ans_all.append(convert_simple_line_c_to_mips(_all_lines[line_num]))\n\n    	ans_all.append(\'AFTER:\')\n\n    	corr_answer_local = \'\\n\'.join(ans_all)\n	return corr_answer_local\n\nall_vars = [\'s0\', \'s1\', \'s2\', \'s3\', \'s4\', \'s5\', \'s6\', \'s7\',\n            \'t0\', \'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\', \'t7\']\n\nall_lines = []\n\nall_op = [\' &lt; \', \' &gt; \', \' &gt;= \', \' &lt;= \', \' == \', \' != \']\n\nshuffle(all_vars)\nf_var = all_vars[0]\ns_var = all_vars[1]\no_rand = choice(all_op)\n\nall_lines.append(\'if (\' + f_var + o_rand + s_var + \')\')\nall_lines.append(\"{\")\nfor r_num in range(randint(1, 2)):\n    all_lines.append(\"\\t\" + choice(all_vars) + \' = \' + choice(all_vars) + choice([\' + \', \' - \']) + choice([str(randint(5, 20)), choice(all_vars)]) + \';\')\nall_lines.append(\"}\")\nall_lines.append(\"else\")\nall_lines.append(\"{\")\nfor r_num in range(randint(1, 2)):\n    all_lines.append(\"\\t\" + choice(all_vars) + \' = \' + choice(all_vars) + choice([\' + \', \' - \']) + choice([str(randint(5, 20)), choice(all_vars)]) + \';\')\nall_lines.append(\"}\")\n\nquestion_text = \'\\n\'.join(all_lines)\n\ncorr_answer = convert_c_to_mips(all_lines)', 'Convert the following C to MIPS:\n&lt;div class=\"my_code\"&gt;\n***question_text***\n&lt;/div&gt;\n&lt;br/&gt;\nWrite your answer on a piece of paper then compare it with correct answer.', '', '', '', '', '***corr_answer***', 18, 'no_input', 1, 24),
(204, 'def convert_c_to_mips(_all_lines):\n    	ans_all = [\'BEG:\']\n    	oper = _all_lines[0].split(\' \')\n\n    	if oper[2] == \'&lt;\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n        	ans_all.append(\'beq $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'&gt;\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'beq $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'==\':\n        	ans_all.append(\'bne $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'!=\':\n        	ans_all.append(\'beq $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'&lt;=\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'bne $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'&gt;=\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n        	ans_all.append(\'bne $t0, $zero, AFTER\')\n\n    	for line_num in range(1, len(_all_lines)):\n        	if _all_lines[line_num] == \'}\':\n            		ans_all.append(\'j BEG\')\n            		ans_all.append(\'AFTER:\')\n        	elif _all_lines[line_num] != \'{\' and _all_lines[line_num] != \'}\':\n            		ans_all.append(convert_simple_line_c_to_mips(_all_lines[line_num]))\n\n	corr_answer_local = \'\\n\'.join(ans_all)\n	return corr_answer_local\n\n\nall_vars = [\'s0\', \'s1\', \'s2\', \'s3\', \'s4\', \'s5\', \'s6\', \'s7\',\n            \'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\', \'t7\']\n\nall_lines = []\n\nall_op = [\' &lt; \', \' &gt; \', \' &gt;= \', \' &lt;= \']\n\nshuffle(all_vars)\nf_var = all_vars[0]\ns_var = all_vars[1]\no_rand = choice(all_op)\n\nall_lines.append(\'while (\' + f_var + o_rand + s_var + \')\')\nall_lines.append(\"{\")\nfor r_num in range(randint(1, 3)):\n    all_lines.append(\"\\t\" + choice(all_vars) + \' = \' + choice(all_vars) + choice([\' + \', \' - \']) + choice([str(randint(5, 20)), choice(all_vars)]) + \';\')\n\nif o_rand == \' &lt; \' or o_rand == \' &lt;= \':\n    all_lines.append(\"\\t\" + f_var + \" = \" + f_var + \" + \" + str(randint(1, 5)) + \';\')\nelif o_rand == \' &gt; \' or o_rand == \' &gt;= \':\n    all_lines.append(\"\\t\" + f_var + \" = \" + f_var + \" - \" + str(randint(1, 5)) + \';\')\n\nall_lines.append(\"}\")\n\nquestion_text = \'\\n\'.join(all_lines)\n\ncorr_answer = convert_c_to_mips(all_lines)', 'Convert the following C to MIPS:\n&lt;div class=\"my_code\"&gt;\n***question_text***\n&lt;/div&gt;\n\n&lt;br/&gt;\nWrite your answer on a piece of paper then compare it with correct answer.', '', '', '', '', '***corr_answer***', 12, 'no_input', 1, 24),
(205, 'def convert_c_to_mips(_all_lines):\n    	ans_all = []\n    	ans_all.append(convert_simple_line_c_to_mips(_all_lines[0]))\n\n    	ans_all.append(\'BEG:\')\n\n    	oper = _all_lines[1].split(\' \')\n\n    	if oper[2] == \'&lt;\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n        	ans_all.append(\'beq $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'&gt;\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'beq $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'==\':\n        	ans_all.append(\'bne $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'!=\':\n        	ans_all.append(\'beq $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'&lt;=\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'bne $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'&gt;=\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n        	ans_all.append(\'bne $t0, $zero, AFTER\')\n\n    	for line_num in range(2, len(_all_lines)):\n        	if _all_lines[line_num] == \'}\':\n            		ans_all.append(\'j BEG\')\n            		ans_all.append(\'AFTER:\')\n        	elif _all_lines[line_num] != \'{\' and _all_lines[line_num] != \'}\':\n            		ans_all.append(convert_simple_line_c_to_mips(_all_lines[line_num]))\n\n	print(ans_all)\n	return \'\\n\'.join(ans_all)\n	\nall_vars = [\'s0\', \'s1\', \'s2\', \'s3\', \'s4\', \'s5\', \'s6\', \'s7\',\n            \'t0\', \'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\', \'t7\']\n\ncontrol_var = choice(all_vars)\nall_vars.remove(control_var)\n\nall_lines = []\nall_lines_to_print = []\n\nall_op = [\' &lt; \', \' &gt; \', \' &gt;= \', \' &lt;= \']\n\nshuffle(all_vars)\nf_var = all_vars[0]\ns_var = all_vars[1]\no_rand = choice(all_op)\n\ncounter_var = randint(5, 10)\no_inside_if_rand = choice([\' + \', \' - \'])\nincrement_rand = randint(1, 3)\n\nfor_line = \'for (\' + control_var +\' = \' + str(counter_var) + \'; \' + control_var + o_rand +  s_var + \'; \' + control_var + \" = \" + control_var + o_inside_if_rand + str(increment_rand) + \")\"\n\nall_lines_to_print.append(\'int \' + control_var + \';\')\nall_lines_to_print.append(for_line)\n\nall_lines.append(\'int \' + control_var + \' = \' + str(counter_var) + \';\')\nall_lines.append(\'while (\' + control_var + o_rand + s_var + \')\')\n\nall_lines.append(\"{\")\nall_lines_to_print.append(\"{\")\n\nfor r_num in range(randint(1, 3)):\n    all_lines_to_print.append(\"\\t\" + choice(all_vars) + \' = \' + choice(all_vars) + choice([\' + \', \' - \']) + choice([str(randint(5, 20)), choice(all_vars)]) + \';\')\n    all_lines.append(all_lines_to_print[-1])\n\n\nif o_rand == \' &lt; \' or o_rand == \' &lt;= \':\n    all_lines_to_print.append(\"\\t\" + f_var + \" = \" + f_var + \" + \" + str(randint(1, 5)) + \';\')\n    all_lines.append(all_lines_to_print[-1])\n\n\nelif o_rand == \' &gt; \' or o_rand == \' &gt;= \':\n    all_lines_to_print.append(\"\\t\" + f_var + \" = \" + f_var + \" - \" + str(randint(1, 5)) + \';\')\n    all_lines.append(all_lines_to_print[-1])\n\nall_lines.append(\"\\t\" + control_var + \" = \" + control_var + o_inside_if_rand + str(increment_rand) + \';\')\n\nall_lines.append(\"}\")\nall_lines_to_print.append(\"}\")\n\nquestion_text = \'\\n\'.join(all_lines_to_print)\n\n\ncorr_answer = convert_c_to_mips(all_lines)', 'Convert the following C to MIPS:\n&lt;div class=\"my_code\"&gt;\n***question_text***\n&lt;/div&gt;\n\n&lt;br/&gt;\nWrite your answer on a piece of paper then compare it with correct answer.', '', '', '', '', '***corr_answer***', 12, 'no_input', 1, 25),
(206, 'def convert_c_to_mips(_all_lines):\n    array_size = _all_lines[0].split(\']\')[0][-1]\n    array_type = _all_lines[0].split(\' \')[0].replace(\'\\t\',\'\')\n\n    inst_str = \'\'\n\n    if array_type == \'int\':\n        multiplier_val = 4\n        inst_str = \'sw \'\n    elif array_type == \'short\':\n        multiplier_val = 2\n        inst_str = \'sh \'\n    elif array_type == \'char\':\n        multiplier_val = 1\n        inst_str = \'sb \'\n\n    ans_all = []\n\n    ans_all.append(\'addi $sp, $sp, -\' + str(int(array_size) * multiplier_val))\n\n    for curr_line in range(1, len(_all_lines)):\n        ans_all.append(\'addi $t0, $zero, \' + _all_lines[curr_line].split(\' \')[-1])\n        ans_all.append(inst_str + \'$t0, \' + str((curr_line-1) * multiplier_val) + \'($sp)\')\n\n    return \'\\n\'.join(ans_all)\n\nall_vars = [\'s0\', \'s1\', \'s2\', \'s3\', \'s4\', \'s5\', \'s6\', \'s7\',\n            \'t0\', \'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\', \'t7\']\n\n\n\n\ncontrol_var = choice(all_vars)\nall_vars.remove(control_var)\n\nall_lines = []\nall_lines_to_print = []\n\nall_op = [\' &lt; \', \' &gt; \', \' &gt;= \', \' &lt;= \']\n\nshuffle(all_vars)\nf_var = all_vars[0]\ns_var = all_vars[1]\no_rand = choice(all_op)\n\ncounter_var = randint(2, 4)\no_inside_if_rand = choice([\' + \', \' - \'])\nincrement_rand = randint(1, 3)\n\nfor_line = \'void main()\'\n\nall_lines_to_print.append(for_line)\nall_lines_to_print.append(\"{\")\n\nall_lines_to_print.append(\"\\t\" + choice([\'int\', \'char\', \'short int\']) + \" my_array[\" + str(counter_var) + \"];\")\nall_lines.append(all_lines_to_print[-1])\n\nfor num, r_num in enumerate(range(counter_var)):\n    all_lines_to_print.append(\"\\tmy_array[\" + str(num) + \"] = \" + str(randint(5, 20)) + \";\")\n    all_lines.append(all_lines_to_print[-1])\n\nall_lines_to_print.append(\"}\")\n\nquestion_text = \'\\n\'.join(all_lines_to_print)\n\n\ncorr_answer = convert_c_to_mips(all_lines)', 'Assuming that the size of a &lt;span style=\"color: blue;\"&gt;short int is 2 bytes&lt;/span&gt;, and the size of an &lt;span style=\"color: green;\"&gt;int is 4 bytes&lt;/span&gt;. Convert the following C to MIPS:\n&lt;div class=\"my_code\"&gt;\n***question_text***\n&lt;/div&gt;\n\n&lt;br/&gt;\nWrite your answer on a piece of paper then compare it with correct answer.', '', '', '', '', '***corr_answer***', 9, 'no_input', 1, 25),
(208, 'all_instructions = [Mips_instruction(\"add\", \"000000\", \"100000\", \"R\"), \nMips_instruction(\"sub\", \"000000\", \"100010\", \"R\"), \nMips_instruction(\"addi\", \"001000\", \"\", \"I\"), Mips_instruction(\"and\", \"000000\", \"100100\", \"R\"),\nMips_instruction(\"andi\", \"001100\", \"\", \"I\"), Mips_instruction(\"or\", \"000000\", \"100101\", \"R\"),\nMips_instruction(\"ori\", \"001101\", \"\", \"I\"), Mips_instruction(\"slt\", \"000000\", \"101010\", \"R\"),\nMips_instruction(\"slti\", \"001010\", \"\", \"I\"), Mips_instruction(\"lw\", \"100011\", \"\", \"I\"),\nMips_instruction(\"sw\", \"101011\", \"\", \"I\")]\n\ndef generate_random_instruction():\n    curr_inst = choice(all_instructions)\n    if curr_inst.inst_type == \"R\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        rd = choice(all_registers)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, rd, 0)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, rd, 0)\n    elif curr_inst.inst_type == \"I\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        imm = randint(-20, 20)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, 0, imm)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, 0, imm)\n\n    return [inst_mips, inst_bin]\n\nq_s = generate_random_instruction()\nquestion = q_s[0]\nans = q_s[1]', 'What\'s the binary sequence that corresponds to the following MIPS instruction (separate fields by single spaces):\n&lt;div class=\"my_code\"&gt;\n***question***\n&lt;/div&gt;', '', '', '', '', '***ans***', 22, 'input1', 1, 28),
(209, 'all_instructions = [Mips_instruction(\"add\", \"000000\", \"100000\", \"R\"), \nMips_instruction(\"sub\", \"000000\", \"100010\", \"R\"), \nMips_instruction(\"addi\", \"001000\", \"\", \"I\"), Mips_instruction(\"and\", \"000000\", \"100100\", \"R\"),\nMips_instruction(\"andi\", \"001100\", \"\", \"I\"), Mips_instruction(\"or\", \"000000\", \"100101\", \"R\"),\nMips_instruction(\"ori\", \"001101\", \"\", \"I\"), Mips_instruction(\"slt\", \"000000\", \"101010\", \"R\"),\nMips_instruction(\"slti\", \"001010\", \"\", \"I\"), Mips_instruction(\"lw\", \"100011\", \"\", \"I\"),\nMips_instruction(\"sw\", \"101011\", \"\", \"I\")]\n\ndef generate_random_instruction():\n    curr_inst = choice(all_instructions)\n    if curr_inst.inst_type == \"R\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        rd = choice(all_registers)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, rd, 0)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, rd, 0)\n    elif curr_inst.inst_type == \"I\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        imm = randint(-20, 20)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, 0, imm)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, 0, imm)\n\n    return [inst_mips, inst_bin]\n\nq_s = generate_random_instruction()\nquestion = q_s[1]\nans = q_s[0]', 'What\'s the MIPS instruction that correspond to the following binary:\n&lt;div class=\"my_code\"&gt;\n***question***\n&lt;/div&gt;', '', '', '', '', '***ans***', 22, 'input1', 1, 29),
(210, 'truth_values = [\'False\', \'True\']\n\np_value = randint(0, 1)\nq_value = randint(0, 1)\nr_value = randint(0, 1)\n\n# (p and q) and (r and q) or ~q\n#\ncurr_v = (p_value and q_value) and (r_value and q_value) or (not q_value)\ncurr_v = curr_v and curr_v\nif curr_v:\n	ans = \'True\'\nelse:\n	ans = \'False\'', 'What\'s the truth value for the output, given the following:\n&lt;div style=\"text-align:center; width: 100%;\"&gt;\n&lt;table style=\"width: 80%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Proposition&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;P&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Q&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;R&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Truth Value&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[p_value]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[q_value]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[r_value]***&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;div style=\"margin-top: 10px;\"&gt;\n&lt;img src=\"static/main/img/circuits/circuit01.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n&lt;/div&gt;', 'True', 'False', '', '', '***ans***', 6, 'multiple2', 1, 32),
(211, 'truth_values = [\'False\', \'True\']\n\np_value = randint(0, 1)\nq_value = randint(0, 1)\nr_value = randint(0, 1)\n\n# (p and q) and (r and q) or ~q\n#\ns_truth = (p_value and q_value) and (r_value or q_value)\ncurr_v = (s_truth and q_value) and (not q_value or s_truth)\nif curr_v:\n	ans = \'True\'\nelse:\n	ans = \'False\'', 'What\'s the truth value for the output, given the following:\n&lt;div style=\"text-align:center; width: 100%;\"&gt;\n&lt;table style=\"width: 80%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Proposition&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;P&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Q&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;R&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Truth Value&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[p_value]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[q_value]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[r_value]***&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;div style=\"margin-top: 10px;\"&gt;\n&lt;img src=\"static/main/img/circuits/circuit02.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n&lt;/div&gt;', 'True', 'False', '', '', '***ans***', 6, 'multiple2', 1, 32),
(212, 'truth_values = [\'False\', \'True\']\n\np_value = randint(0, 1)\nq_value = randint(0, 1)\nr_value = randint(0, 1)\n\n# (p and q) and (r and q) or ~q\n#\ns_truth = (p_value and q_value) and (r_value or q_value)\ncurr_v = (s_truth and q_value) and (not q_value or s_truth)\nif q_value:\n	ans = \'True\'\nelse:\n	ans = \'False\'', 'What\'s the truth value for the output, given the following:\n&lt;div style=\"text-align:center; width: 100%;\"&gt;\n&lt;table style=\"width: 80%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Proposition&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;P&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Q&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;R&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Truth Value&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[p_value]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[q_value]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***truth_values[r_value]***&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;div style=\"margin-top: 10px;\"&gt;\n&lt;img src=\"static/main/img/circuits/circuit03.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n&lt;/div&gt;', 'True', 'False', '', '', '***ans***', 6, 'multiple2', 1, 32),
(213, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'What\'s the boolean expression that matches the table below:\n&lt;div style=\"text-align:center; width: 100%;\"&gt;\n&lt;table style=\"width: 80%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;P&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;Q&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;R&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;?&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[0]***&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[1]***&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[2]***&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[3]***&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[4]***&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[5]***&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[6]***&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 10px;\"&gt;***random_nums[7]***&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;', '***cand1***', '***cand2***', '***cand3***', '***ans***', '***ans***', 10, 'multiple4', 1, 32),
(214, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'A(n) ________ is a compound proposition that is always true, no matter what the truth values of the propositions that occur in it are.', 'Tautology', 'Tautogy', 'Contraditction', 'Implication', 'Tautology', 2, 'multiple4', 1, 28),
(215, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'A(n) ________ is a compound proposition that is always false.', 'Tautology', 'Tautogy', 'Contraditction', 'Implication', 'Contraditction', 2, 'multiple4', 1, 32),
(216, 'rand_1 = choice([\'True\', \'False\'])\nrand_2 = choice([\'True\', \'False\'])\n\nif rand_1 == rand_2:\n	ans = \'False\'\nelse:\n	ans = \'True\'', '***rand_1*** \'exclusive or\' ***rand_2*** is ', 'True', 'False', '', '', '***ans***', 4, 'multiple2', 1, 32),
(217, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'P &lt;span style=\"color:blue;\"&gt;\'exclusive or\'&lt;/span&gt; P is a ________', 'Tautology', 'Tautogy', 'Contraditction', 'None of the answers', 'Contraditction', 2, 'multiple4', 1, 32),
(218, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'P &lt;span style=\"color:blue;\"&gt;\'exclusive or\'&lt;/span&gt; ~P is a ________', 'Tautology', 'Tautogy', 'Contraditction', 'None of the answers', 'Tautology', 2, 'multiple4', 1, 32),
(219, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'P &lt;span style=\"color:blue;\"&gt;\'or\'&lt;/span&gt; ~P is a ________', 'Tautology', 'Tautogy', 'Contraditction', 'None of the answers', 'Tautology', 2, 'multiple4', 1, 32),
(220, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'P &lt;span style=\"color:blue;\"&gt;\'and\'&lt;/span&gt; ~P is a ________', 'Tautology', 'Tautogy', 'Contraditction', 'None of the answers', 'Contraditction', 2, 'multiple4', 1, 32),
(221, 'rand_a = choice([True, False])\nrand_b = choice([True, False])\n\nrand_op_0 = choice([True, False])\nrand_op_1 = choice([True, False])\n\nans = \'\'\n\n# op_0 = 1, op_1 = 1 (\"subtraction\") tested\nif rand_op_0 and rand_op_1:\n	if rand_a == rand_b:\n		ans = \'False (or 0)\'\n	else:\n		ans = \'True (or 1)\'	\n\n# op_0 = 1, op_1 = 0 (\"nand\") tested\nif rand_op_0 and not rand_op_1:\n	if rand_a == 0 or rand_b == 1:\n		ans = \'True (or 1)\'\n	else:\n		ans = \'False (or 0)\'\n\n# op_0 = 0, op_1 = 1 (\"add\") tested\nif not rand_op_0 and rand_op_1:\n	if rand_a == rand_b:\n		ans = \'False (or 0)\'\n	else:\n		ans = \'True (or 1)\'\n\n# op_0 = 0, op_1 = 0 (\"nor\") tested\nif not rand_op_0 and not rand_op_1:\n	if rand_a == 1 or rand_b == 1:\n		ans = \'False (or 0)\'\n	else:\n		ans = \'True (or 1)\'\n', 'What\'s the value of \'&lt;span style=\"color: blue;\"&gt;?&lt;/span&gt;\', given the following:\n&lt;table style=\"width: 95%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;a&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;b&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;Operation_0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;Operation_1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;Result&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;***rand_a***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***rand_b***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***rand_op_0***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***rand_op_1***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;?&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;div style=\"margin-top: 10px;\"&gt;\n	&lt;img src=\"static/main/img/circuits/circuit04.png\" alt=\"Smiley face\" width=\"60%\"&gt;\n&lt;/div&gt;', 'True (or 1)', 'False (or 0)', '', '', '***ans***', 16, 'multiple2', 1, 33),
(222, 'all_poss = [\n[\'True (or 1)\', \'True (or 1)\', \'X\', \'True (or 1)\', \'False (or 0)\'],\n[\'X\', \'True (or 1)\', \'True (or 1)\', \'False (or 0)\', \'True (or 1)\'],\n[\'True (or 1)\', \'True (or 1)\', \'False (or 0)\', \'X\', \'False (or 0)\'],\n[\'True (or 1)\', \'X\', \'False (or 0)\', \'False (or 0)\', \'False (or 0)\'],\n[\'X\', \'True (or 1)\', \'False (or 0)\', \'False (or 0)\', \'False (or 0)\'],\n[\'True (or 1)\', \'False (or 0)\', \'X\', \'True (or 1)\', \'True (or 1)\'],\n[\'True (or 1)\', \'False (or 0)\', \'X\', \'False (or 0)\', \'False (or 0)\'],\n[\'False (or 0)\', \'True (or 1)\', \'True (or 1)\', \'X\', \'True (or 1)\'],\n[\'False (or 0)\', \'True (or 1)\', \'X\', \'True (or 1)\', \'True (or 1)\'],\n[\'False (or 0)\', \'X\', \'True (or 1)\', \'False (or 0)\', \'True (or 1)\'],\n[\'False (or 0)\', \'False (or 0)\', \'X\', \'True (or 1)\', \'False (or 0)\'],\n[\'False (or 0)\', \'False (or 0)\', \'X\', \'False (or 0)\', \'True (or 1)\']]\n\nfirst_rand = choice(all_poss)\nsecond_rand = randint(0, 4)\n\nans = first_rand[second_rand]\nfirst_rand[second_rand] = \'?\'', 'What\'s the value of \'&lt;span style=\"color: blue;\"&gt;?&lt;/span&gt;\', given the following:\n&lt;table style=\"width: 95%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;a&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;b&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;Operation_0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;Operation_1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;Result&lt;/td&gt;\n	&lt;/tr&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;***first_rand[0]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***first_rand[1]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***first_rand[2]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***first_rand[3]***&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid;\"&gt;***first_rand[4]***&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/div&gt;\n&lt;div style=\"margin-top: 10px;\"&gt;\n	&lt;img src=\"static/main/img/circuits/circuit04.png\" alt=\"Smiley face\" width=\"60%\"&gt;\n&lt;/div&gt;', 'True (or 1)', 'False (or 0)', 'X', 'I don\'t know', '***ans***', 60, 'multiple4', 1, 34),
(223, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', '___ time/delay is the time that the input must be stable before the rising edge of the clock ', 'Setup', 'Hold', 'CLK-to-Q', 'None of the answers', 'Setup', 2, 'multiple4', 1, 35),
(224, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', '___ time/delay is the time that the input must be stable after the rising edge of the clock ', 'Setup', 'Hold', 'CLK-to-Q', 'None of the answers', 'Hold', 2, 'multiple4', 1, 35),
(225, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', '___ time/delay is how long it would take for the output to change, measured starting from the rising edge of the clock', 'Setup', 'Hold', 'CLK-to-Q', 'None of the answers', 'CLK-to-Q', 2, 'multiple4', 1, 35),
(226, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = str(cl_delay+setup_time+clk_to_q_delay) + \' nanoseconds\'', 'Given that the \'&lt;span style=\"color: blue;\"&gt;cominational logic delay&lt;/span&gt;\' is ***cl_delay*** nanoseconds, the \'&lt;span style=\"color: blue;\"&gt;setup time&lt;/span&gt;\' is ***setup_time*** nanoseconds, the \'&lt;span style=\"color: blue;\"&gt;hold time&lt;/span&gt;\' is ***hold_time*** nanoseconds, and the \'&lt;span style=\"color: blue;\"&gt;CLK-to-Q delay&lt;/span&gt;\' is ***clk_to_q_delay*** nanoseconds. What\'s the total delay?', 'Answer here...', 'Hold', 'CLK-to-Q', 'None of the answers', '***ans***', 4, 'input1', 1, 35),
(227, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1000.0 / (cl_delay+setup_time+clk_to_q_delay),2)', 'Given that the \'&lt;span style=\"color: blue;\"&gt;cominational logic delay&lt;/span&gt;\' is ***cl_delay*** nanoseconds, the \'&lt;span style=\"color: blue;\"&gt;setup time&lt;/span&gt;\' is ***setup_time*** nanoseconds, the \'&lt;span style=\"color: blue;\"&gt;hold time&lt;/span&gt;\' is ***hold_time*** nanoseconds, and the \'&lt;span style=\"color: blue;\"&gt;CLK-to-Q delay&lt;/span&gt;\' is ***clk_to_q_delay*** nanoseconds. What\'s the frequency (&lt;span style=\"color: red;\"&gt;in MHz&lt;/span&gt;)? (your answer shouldn\'t be a ratio x/y, round to 2 decimal places)', 'Answer here...', 'Hold', 'CLK-to-Q', 'None of the answers', '***ans***', 3, 'input1', 1, 35),
(228, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1.0 / (cl_delay+setup_time+clk_to_q_delay), 2)', 'Given that the \'&lt;span style=\"color: blue;\"&gt;cominational logic delay&lt;/span&gt;\' is ***cl_delay*** nanoseconds, the \'&lt;span style=\"color: blue;\"&gt;setup time&lt;/span&gt;\' is ***setup_time*** nanoseconds, the \'&lt;span style=\"color: blue;\"&gt;hold time&lt;/span&gt;\' is ***hold_time*** nanoseconds, and the \'&lt;span style=\"color: blue;\"&gt;CLK-to-Q delay&lt;/span&gt;\' is ***clk_to_q_delay*** nanoseconds. What\'s the frequency (&lt;span style=\"color: red;\"&gt;in GHz&lt;/span&gt;)? (your answer shouldn\'t be a ratio x/y, round to 2 decimal places)', 'Answer here...', 'Hold', 'CLK-to-Q', 'None of the answers', '***ans***', 3, 'input1', 1, 35),
(229, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1.0 / (cl_delay+setup_time+clk_to_q_delay), 2)', 'What\'s the portion of the processor that contains the hardware necessary to perform operations required by the processor', 'Datapath', 'Controller (or Control Unit)', 'RAM', 'Cache', 'Datapath', 2, 'multiple4', 1, 35),
(230, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1.0 / (cl_delay+setup_time+clk_to_q_delay), 2)', 'What\'s the portion of the processor that tells the datapath what needs to be done (the brain)', 'Bus', 'Controller (or Control Unit)', 'RAM', 'Cache', 'Controller (or Control Unit)', 2, 'multiple4', 1, 35),
(231, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1.0 / (cl_delay+setup_time+clk_to_q_delay), 2)', 'Which one of these stages will be active for all MIPS instructions?', 'Instruction Decode', 'ALU', '(Data) Memory Access', 'Register Write', 'Instruction Decode', 2, 'multiple4', 1, 35),
(232, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1.0 / (cl_delay+setup_time+clk_to_q_delay), 2)', 'Which one of these stages will be active for all MIPS instructions?', 'Instruction Fetch', 'ALU', '(Data) Memory Access', 'Register Write', 'Instruction Fetch', 2, 'multiple4', 1, 35),
(233, 'five_stages = [\'Instruction Fetch\', \'Instruction Decode (and Register Read)\', \'ALU (Arithmetic Logic Unit)\', \'Memory Access\', \' Register Write\']\n\nall_inst = [[\'add\', True, True, True, False, True],\n[\'sub\', True, True, True, False, True],\n[\'addi\', True, True, True, False, True],\n[\'beq\', True, True, True, False, False],\n[\'bne\', True, True, True, False, False],\n[\'slt\', True, True, True, False, True],\n[\'sw\', True, True, True, True, False],\n[\'lw\', True, True, True, True, True]]\n\nrand_inst = randint(0, len(all_inst)-1)\nrand_stage = randint(0, 4)\n\nans = str(all_inst[rand_inst][rand_stage+1]).title()\n\ncl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n', 'The MIPS instruction ***all_inst[rand_inst][0]*** is active in the following stage: ***five_stages[rand_stage]***', 'True', 'False', '', '', '***ans***', 32, 'multiple2', 1, 35),
(234, 'rand_control_signal = randint(0, 5)\nall_instructions = [[\'add\', 1, \'X\', 1, 0, 1, 0],\n[\'sub\', 1, \'X\', 1, 0, 1, 0],\n[\'ori\', 0, 0, 1, 1, 1, 0],\n[\'lw\', 0, 1, 1, 1, 0, 0],\n[\'sw\', \'X\', 1, 0, 1, \'X\', 1]]\n\nrand_inst = randint(0, len(all_instructions)-1)\n\nans = all_instructions[rand_inst][rand_control_signal+1]', 'What\'s the value of ?&lt;sub&gt;***rand_control_signal***&lt;/sub&gt;, given that our MIPS instruction is ***all_instructions[rand_inst][0]***?\n\n&lt;div style=\"margin-top: 10px;\"&gt;\n	&lt;img src=\"static/main/img/circuits/circuit05.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n&lt;/div&gt;', '1', '0', 'X', 'I have no idea; gotta study more', '***ans***', 30, 'multiple4', 1, 36),
(235, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;unsigned binary&lt;/span&gt; sequence corresponding to the following decimal: ***v1,,randDecimal(0, 31)***', '***can1Ans,,decimalToUnsigned(^v1)***', '***can2Ans,,randBinary(0,31,0)***', '***can3Ans,,randBinary(0,31,0)***', '***can4Ans,,randBinary(0,31,0)***', '***ans,,decimalToUnsigned(^v1)***', 3, 'multiple4', -1, 40),
(236, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;unsigned binary&lt;/span&gt; sequence: ***v1,,randBinary(0, 31, 0)***', '***can1Ans,,binaryToDecimal(^v1)***', '***can2Ans,,randDecimal(0,31)***', '***can3Ans,,randDecimal(0,31)***', '***can4Ans,,randDecimal(0,31)***', '***ans,,binaryToDecimal(^v1)***', 3, 'multiple4', -1, 40),
(237, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;unsigned binary&lt;/span&gt; sequence corresponding to the following decimal: ***v1,,randDecimal(0, 31)*** (use 0b notation)', 'Answer here...', '', '', '', '***ans,,decimalToUnsigned(^v1)***', 3, 'input1', -1, 40),
(238, '', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;unsigned&lt;/span&gt; binary sequence: ***v1,,randBinary(0, 31,0)***', 'Answer here...', '', '', '', '***ans,,binaryToDecimal(^v1)***', 3, 'input1', -1, 40),
(239, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)***', '***ans,,decimalToSignMagnitude(^v1,6)***', '***can2Ans,,randBinary(0,63,6)***', '***can3Ans,,randBinary(0,63,6)***', '***can4Ans,,randBinary(0,63,6)***', '***ans,,decimalToSignMagnitude(^v1,6)***', 4, 'multiple4', -1, 40),
(240, '', 'What\'s the &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)*** (use 0b notation)', 'Answer here...', '', '', '', '***ans,,decimalToSignMagnitude(^v1,6)***', 4, 'input1', -1, 40),
(241, 'binarySequence = bin(randint(0, 63))\r\n\r\nwhile len(binarySequence) != 8:\r\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\r\n\r\nv1 = binarySequence\r\n\r\nans = int(binarySequence[3:], 2)\r\n\r\nif binarySequence[2] ==\'1\':\r\n	ans = ans * -1', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence: ***variable,v1***', '***ans***', '***randint(-31,31)***', '***randint(-31,31)***', '***randint(-31,31)***', '***ans***', 4, 'multiple4', -1, 40),
(242, 'binarySequence = bin(randint(0, 63))\r\n\r\nwhile len(binarySequence) != 8:\r\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\r\n\r\nv1 = binarySequence\r\n\r\nans = int(binarySequence[3:], 2)\r\n\r\nif binarySequence[2] ==\'1\':\r\n	ans = ans * -1', 'What\'s the decimal value corresponding to the following &lt;span style=\"color: blue;\"&gt;6-bit sign-magnitude&lt;/span&gt; binary sequence: ***variable,v1***', 'Answer here...', '', '', '', '***ans***', 4, 'input1', -1, 40),
(243, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', '***2**(v1 - 1) - 1***', '***randint(1,63)***', '***randint(1,63)***', '***randint(1,63)***', '***2**(v1 - 1) - 1***', 4, 'multiple4', -1, 40),
(244, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', '***-1 * 2**(v1 - 1) + 1***', '***-1 * randint(1,63)***', '***-1 * randint(1,63)***', '***-1 * randint(1,63)***', '***-1 * 2**(v1 - 1) + 1***', 4, 'multiple4', -1, 40),
(245, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;maximum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', 'Answer here...', '', '', '', '***2**(v1 - 1) - 1***', 4, 'input1', -1, 40),
(246, 'v1 = randint(3, 7)', 'What\'s the &lt;span style=\"color: blue;\"&gt;minimum&lt;/span&gt; value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', 'Answer here...', '', '', '', '***-1 * 2**(v1 - 1) + 1***', 4, 'input1', -1, 40);
--</string>
		<string>INSERT INTO `main_assignment_question` (`id`, `python_code`, `parent_question_id`, `repeat`, `title`, `element_type`, `element_style`, `question_order`, `question_detail_id`, `assignment_id`) VALUES
(4, 'num = randint(1, 31)\n\nans = cofc_convert_decimal_to_unsigned_binary(num)', -1, 5, 'Convert the decimal number: ***num*** to a 5-bit unsigned binary', 'div', 'margin: 5px;', 10, 0, 2),
(5, 'num = randint(10, 25)\n\nans = cofc_convert_decimal_to_unsigned_binary(num)', -1, 1, 'What will be the output of the following C program ?\n\n#include &amp;lt;stdio.h&amp;gt;\nint main()\n{\n	int x = ***num***;\n	int *y;\n	int *z;\n	y = &amp;x; /* Assume address of x is 500 (decimal) and size of integer is 4 byte long */\n	z = y;\n	*y = *z + 1;\n	x = x + 1;\n	printf(\"x = %d, y = %p, z = %p\\n\", x, y, z); // Use decimal when printing pointers\n	return 0;\n}', 'div', 'margin: 5px; white-space: pre', 20, 0, 2),
(6, 'num = randint(2, 5)', -1, 1, 'For a system of n-digit unsigned base ***num*** numbers (n &gt; 1), how many numbers (unique combinations) can be represented?', 'div', 'margin: 5px;', 30, 0, 2),
(9, '', -1, 1, 'For an n-digit 2\'s complement binary number (n &gt; 1), what is the number of negative integers (as a function of n)?', 'div', 'margin: 5px;', 40, 0, 2),
(10, 'num = randint(-20, 20)\n\nans = cofc_convert_decimal_to_unsigned_binary(num)', -1, 5, 'Convert the decimal number: ***num*** to a 5-bit 1\'s complement binary (if value can\'t be represented, answer \'NA\')', 'div', 'margin: 5px;', 12, 0, 2),
(11, 'num = randint(-20, 20)\n\nans = cofc_convert_decimal_to_unsigned_binary(num)', -1, 5, 'Convert the decimal number: ***num*** to a 5-bit 2\'s complement binary (if value can\'t be represented, answer \'NA\')', 'div', 'margin: 5px;', 14, 0, 2),
(12, '', -1, 1, 'For an n-digit 2\'s complement number (n &gt; 1), how many zeros are there?', 'div', 'margin: 5px;', 45, 0, 2),
(13, '', -1, 1, 'Write a \'swap\' function with the following function header:\n\nvoid swap(int *p1, int *p2);\n \nThe \'swap\' function should swap the values of two integers.\n\nint main()\n{\n 	int x = 10;\n 	int y = 20;\n 	// &lt;span style=\'color: indianred;\'&gt;You must figure out how to call the function correctly (include this in your answer)&lt;/span&gt;\n 	// Next line should print out x: 20, y: 10\n 	//\n 	printf(\"x: %d, y: %d\\n\", x, y);\n}', 'div', 'margin: 5px; white-space: pre', 50, 0, 2),
(14, '', -1, 1, 'According to the C standard, arr[0] is actually syntactic shorthand for *(arr+0). Write a C program that loops twice, the first loop is to initialize the elements of some integer array (say size 20), and a second loop to print all the elements of the array (next to their addresses). &lt;span style=\"color: indianred;\"&gt;In both loops, use the alternative notation (* notation).&lt;/span&gt;\n\nThe output of your code should look like the following:\n\n&amp;lt;address of 1st element&amp;gt;, &amp;lt;value of 1st element&amp;gt; (e.g. 0x7fff5fbff63c, 50)\n&amp;lt;address of 2nd element&amp;gt;, &amp;lt;value of 2nd element&amp;gt; (e.g. 0x7fff5fbff640, 50) ', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 60, 0, 2),
(16, '', -1, 1, 'Translate the following C code to MIPS assembly code.\n\nint arr[20];\nvoid main()\n{\n	int counter = 0;\n 	int s0;\n 	int s1;\n 	for(s0 = 0; s0 &lt; 5; s0++)\n 		for (s1 = 0; s1 &lt; 4; s1++)\n 		{\n 			arr[counter] = s0 + s1;\n			counter = counter + 1;\n 		}\n}', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 3),
(17, '', -1, 1, 'Provide a set of pure MIPS instructions that may be used to implement the following pseudo-instruction:\n\nnot $t1, $t2 # bit-wise invert', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 3),
(18, '', -1, 1, 'Translate the following C code to MIPS assembly code.\n\nvoid main()\n{\n	int counter = 20;\n	int loc_arr[16];\n\n 	while(counter &gt;= 5)\n 	{\n 		loc_arr[counter - 5] = 50;\n 		counter = counter - 1;\n 	}\n}', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 3),
(19, '', -1, 1, 'Assume $t0 holds the value 0x00101000. What is the value of $t2 after the following instructions?\n\nslt $t2, $0, $t0\nbne $t2, $0, ELSE\nj DONE\nELSE:\naddi $t2, $t2, 2\nDONE:', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 3),
(20, '', -1, 1, 'Translate the following C code to MIPS assembly code.\n\nint counter = 0;\n\nvoid change_global(int value)\n{\n	counter = counter + value;\n} \n\nvoid main()\n{\n	change_global(5);\n	change_global(10);\n}', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 3),
(21, 'all_instructions = [Mips_instruction(\"add\", \"000000\", \"100000\", \"R\"), \nMips_instruction(\"sub\", \"000000\", \"100010\", \"R\"), \nMips_instruction(\"addi\", \"001000\", \"\", \"I\"), Mips_instruction(\"and\", \"000000\", \"100100\", \"R\"),\nMips_instruction(\"andi\", \"001100\", \"\", \"I\"), Mips_instruction(\"or\", \"000000\", \"100101\", \"R\"),\nMips_instruction(\"ori\", \"001101\", \"\", \"I\"), Mips_instruction(\"slt\", \"000000\", \"101010\", \"R\"),\nMips_instruction(\"slti\", \"001010\", \"\", \"I\"), Mips_instruction(\"lw\", \"100011\", \"\", \"I\"),\nMips_instruction(\"sw\", \"101011\", \"\", \"I\")]\n\ndef generate_random_instruction():\n    curr_inst = choice(all_instructions)\n    if curr_inst.inst_type == \"R\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        rd = choice(all_registers)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, rd, 0)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, rd, 0)\n    elif curr_inst.inst_type == \"I\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        imm = randint(-20, 20)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, 0, imm)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, 0, imm)\n\n    return [inst_mips, inst_bin]\n\nq_s = generate_random_instruction()\nquestion = q_s[1]\nans = q_s[0]', -1, 5, ' Provide the &lt;u&gt;type&lt;/u&gt; and &lt;u&gt;assembly language instruction&lt;/u&gt; for the following binary value:\n\n***question***', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(22, 'all_instructions = [Mips_instruction(\"add\", \"000000\", \"100000\", \"R\"), \nMips_instruction(\"sub\", \"000000\", \"100010\", \"R\"), \nMips_instruction(\"addi\", \"001000\", \"\", \"I\"), Mips_instruction(\"and\", \"000000\", \"100100\", \"R\"),\nMips_instruction(\"andi\", \"001100\", \"\", \"I\"), Mips_instruction(\"or\", \"000000\", \"100101\", \"R\"),\nMips_instruction(\"ori\", \"001101\", \"\", \"I\"), Mips_instruction(\"slt\", \"000000\", \"101010\", \"R\"),\nMips_instruction(\"slti\", \"001010\", \"\", \"I\"), Mips_instruction(\"lw\", \"100011\", \"\", \"I\"),\nMips_instruction(\"sw\", \"101011\", \"\", \"I\")]\n\ndef generate_random_instruction():\n    curr_inst = choice(all_instructions)\n    if curr_inst.inst_type == \"R\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        rd = choice(all_registers)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, rd, 0)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, rd, 0)\n    elif curr_inst.inst_type == \"I\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        imm = randint(-20, 20)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, 0, imm)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, 0, imm)\n\n    return [inst_mips, inst_bin]\n\nq_s = generate_random_instruction()\nquestion = q_s[0]\nans = q_s[1]', -1, 5, ' Provide the &lt;u&gt;type&lt;/u&gt; and &lt;u&gt;hexadecimal representation&lt;/u&gt; of the following instruction:\n\n***question***', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(23, '', -1, 1, 'Provide the &lt;u&gt;type&lt;/u&gt;, &lt;u&gt;assembly language instruction&lt;/u&gt;, and &lt;u&gt;hexadecimal representation&lt;/u&gt; of the instruction described by the following MIPS fields:\n\nop = 0, rs = 3, rt = 2, rd = 3, shamt = 0, funct = 34', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(24, '', -1, 1, 'Provide the &lt;u&gt;type&lt;/u&gt;, &lt;u&gt;assembly language instruction&lt;/u&gt;, and &lt;u&gt;hexadecimal representation&lt;/u&gt; of the instruction described by the following MIPS fields:\n\n op = 0x23, rs = 1, rt = 2, const = 0x4 ', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(25, '', -1, 1, 'Write the &lt;u&gt;\"pure\"&lt;/u&gt; MIPS assembly code that loads the 32-bit constant/immediate below into register $t1\n\n 0010 0000 0000 0001 0100 1001 0010 0100', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(26, '', -1, 1, 'Convert the following MIPS code to binary (or machine language):\n\n100 beq $s0, $s1, IF 		# branch if ( i == j )\n104 addi $s1, $s1, -1 		# j = j - 1\n108 j L1 					# jump over else\n112 IF: addi $s0, $s0, 1 		# i = i + 1\n116 L1: add $s1, $s1, $s0 	# j = j + i\n\nNote here that the address of each line/word is specified in decimal. When you convert to machine language, everything should be in binary. &lt;u style=\"color: indianred;\"&gt;Please add at least one space between the fields of every instruction.&lt;/u&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(27, '', -1, 1, 'Find the output (boolean expression) for the circuit below (&lt;u&gt;without simplifying&lt;/u&gt;):\n\n&lt;img src=\"/static/main/img/circuits/circuit01.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 5),
(28, '', -1, 1, 'Find the output (boolean expression) for the circuit below (&lt;u&gt;without simplifying&lt;/u&gt;):\n\n&lt;img src=\"/static/main/img/circuits/circuit02.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 10, 0, 5),
(29, '', -1, 1, 'Find the output (boolean expression) for the circuit below (&lt;u&gt;without simplifying&lt;/u&gt;):\n\n&lt;img src=\"/static/main/img/circuits/circuit03.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 20, 0, 5),
(30, '', -1, 1, 'What is the number of control/select wires for an 8-1 multiplexer?', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 5, 0, 5),
(31, '', -1, 1, 'The variables p, q, and s have the following truth values: p = True, q = True, s = False.  What\'s the truth value for the following boolean expressions:\n&lt;div style=\"text-align: center; color: indianred;\"&gt;p + ~q&lt;/div&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 13, 0, 5),
(32, '', -1, 1, 'The variables p, q, and s have the following truth values: p = True, q = True, s = False.  What\'s the truth value for the following boolean expressions:\n&lt;div style=\"text-align: center; color: indianred;\"&gt;(p . q) + s&lt;/div&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 14, 0, 5),
(33, '', -1, 1, 'The variables p, q, and s have the following truth values: p = True, q = True, s = False.  What\'s the truth value for the following boolean expressions:\n&lt;div style=\"text-align: center; color: indianred;\"&gt;p . (q + s)&lt;/div&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 15, 0, 5),
(34, '', -1, 1, 'The variables p, q, and s have the following truth values: p = True, q = True, s = False.  What\'s the truth value for the following boolean expressions:\n&lt;div style=\"text-align: center; color: indianred;\"&gt;p + ~(q . s)&lt;/div&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 16, 0, 5),
(35, '', -1, 1, 'The variables p, q, and s have the following truth values: p = True, q = True, s = False.  What\'s the truth value for the following boolean expressions:\n&lt;div style=\"text-align: center; color: indianred;\"&gt;~(q . p . ~s)&lt;/div&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 17, 0, 5),
(36, '', -1, 1, 'How many two-input AND gates are required to realize:\n&lt;div style=\"text-align: center; color: indianred;\"&gt;Y = C . D + E . F + G&lt;/div&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 30, 0, 5),
(37, '', -1, 1, 'How many two-input AND gates and two-input OR gates are required to realize:\n&lt;div style=\"text-align: center; color: indianred;\"&gt;Y = B . D + C . E + A . B&lt;/div&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 35, 0, 5),
(38, '', -1, 1, 'Find the boolean expression that describes \'?\' (without simplifying)\n\n&lt;table style=\"width: 95%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; text-align: center; margin-bottom: 30px;\"&gt;\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;p&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;q&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;s&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;?&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;0&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;0&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;1&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;1&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;1&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;1&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;0&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;0&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 40, 0, 5),
(39, '', -1, 1, 'The diagram below is called a \'Gated SR Latch\' circuit, built from \'NOR\'s and \'AND\'s. Provide the Q value for the 1st, 2nd, 3rd, and 4th state.\r\n\r\n&lt;img src=\"/static/main/img/circuits/circuit06.png\" alt=\"Smiley face\" width=\"100%\"&gt;\r\n\r\n&lt;table style=\"width: 95%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; text-align: center; margin-bottom: 30px;\"&gt;\r\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;State&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;R&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;E&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;S&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;Q&lt;/td&gt;\r\n	&lt;/tr&gt;\r\n\r\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1st State&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;?&lt;/td&gt;\r\n	&lt;/tr&gt;\r\n\r\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;2nd State&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;?&lt;/td&gt;\r\n	&lt;/tr&gt;\r\n\r\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;3rd State&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;?&lt;/td&gt;\r\n	&lt;/tr&gt;\r\n\r\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;4th State&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;1&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;0&lt;/td&gt;\r\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\"&gt;?&lt;/td&gt;\r\n	&lt;/tr&gt;\r\n&lt;/table&gt;', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 45, 0, 5),
(40, '', -1, 1, 'According to the diagram and table below:\n\n&lt;img src=\"/static/main/img/circuits/circuit07.png\" alt=\"Smiley face\" width=\"100%\"&gt;\n\n&lt;table style=\"width: 100%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; text-align: center;\"&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Operation&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;AND&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;OR&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;ADD&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;SUB&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;ALUCtr&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;00&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;01&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;10&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;11&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\n\nList the values for \'&lt;u style=\"color: green;\"&gt;RegDst&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;ExtOp&lt;/u&gt;\' ,\'&lt;u style=\"color: green;\"&gt;ALUCtr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemWr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemtoReg&lt;/u&gt;\' and \'&lt;u style=\"color: green;\"&gt;RegWr&lt;/u&gt;\' for the \'&lt;u style=\"color: indianred;\"&gt;add&lt;/u&gt;\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 6),
(41, '', -1, 1, 'According to the diagram and table shown in the first question. List the values for \'&lt;u style=\"color: green;\"&gt;RegDst&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;ExtOp&lt;/u&gt;\' ,\'&lt;u style=\"color: green;\"&gt;ALUCtr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemWr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemtoReg&lt;/u&gt;\' and \'&lt;u style=\"color: green;\"&gt;RegWr&lt;/u&gt;\' for the \'&lt;u style=\"color: indianred;\"&gt;ori&lt;/u&gt;\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 10, 0, 6),
(42, '', -1, 1, 'According to the diagram and table shown in the first question. List the values for \'&lt;u style=\"color: green;\"&gt;RegDst&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;ExtOp&lt;/u&gt;\' ,\'&lt;u style=\"color: green;\"&gt;ALUCtr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemWr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemtoReg&lt;/u&gt;\' and \'&lt;u style=\"color: green;\"&gt;RegWr&lt;/u&gt;\' for the \'&lt;u style=\"color: indianred;\"&gt;lw&lt;/u&gt;\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 20, 0, 6),
(43, '', -1, 1, 'According to the diagram and table shown in the first question. List the values for \'&lt;u style=\"color: green;\"&gt;RegDst&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;ExtOp&lt;/u&gt;\' ,\'&lt;u style=\"color: green;\"&gt;ALUCtr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemWr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemtoReg&lt;/u&gt;\' and \'&lt;u style=\"color: green;\"&gt;RegWr&lt;/u&gt;\' for the \'&lt;u style=\"color: indianred;\"&gt;sw&lt;/u&gt;\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 30, 0, 6),
(44, '', -1, 1, 'According to the diagram and table shown in the first question. List the values for \'&lt;u style=\"color: green;\"&gt;RegDst&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;ExtOp&lt;/u&gt;\' ,\'&lt;u style=\"color: green;\"&gt;ALUCtr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemWr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemtoReg&lt;/u&gt;\' and \'&lt;u style=\"color: green;\"&gt;RegWr&lt;/u&gt;\' for the \'&lt;u style=\"color: indianred;\"&gt;sub&lt;/u&gt;\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 40, 0, 6),
(45, '', -1, 1, 'According to the diagram and table shown in the first question. List the values for \'&lt;u style=\"color: green;\"&gt;RegDst&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;ExtOp&lt;/u&gt;\' ,\'&lt;u style=\"color: green;\"&gt;ALUCtr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemWr&lt;/u&gt;\', \'&lt;u style=\"color: green;\"&gt;MemtoReg&lt;/u&gt;\' and \'&lt;u style=\"color: green;\"&gt;RegWr&lt;/u&gt;\' for the \'&lt;u style=\"color: indianred;\"&gt;and&lt;/u&gt;\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 40, 0, 6),
(46, 'rand_1 = randint(150, 250)\nrand_2 = randint(50, 150)\nrand_3 = randint(100, 250)\nrand_4 = randint(200, 250)\nrand_5 = randint(50, 150)', -1, 1, 'Assume the times for CPU stages are as follows:\n\n&lt;table style=\"width: 95%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; text-align: center;\"&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Instruction fetch&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Register Read / Instruction Decode&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;ALU&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Memory Access&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Register Write&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;***rand_1***ps&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;***rand_2***ps&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;***rand_3***ps&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;***rand_4***ps&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;***rand_5***ps&lt;/td&gt;\n	&lt;/tr&gt;\n\n&lt;/table&gt;\n\na) Without pipelining, what\'s the maximum speed (Hertz) we can clock this CPU (according to the numbers above)?\n\nb) With pipelining, what\'s the maximum speed (Hertz) we can clock this CPU (according to the numbers above)?', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 50, 0, 6),
(48, 'rand_1 = randint(150, 250)\nrand_2 = randint(50, 150)\nrand_3 = randint(100, 250)\nrand_4 = randint(200, 250)\nrand_5 = randint(50, 150)', -1, 1, 'Reorder the following sets of instructions to account for the branch delay slot. Only use a \'nop\' if you must\n\naddi $t0, $t1, 5\nori $t2, $t3, -20\nbeq $t0, $s0, label\nlw $t4, 0($t0)', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 60, 0, 6),
(49, 'rand_1 = randint(150, 250)\nrand_2 = randint(50, 150)\nrand_3 = randint(100, 250)\nrand_4 = randint(200, 250)\nrand_5 = randint(50, 150)', -1, 1, 'Reorder the following sets of instructions to account for the branch delay slot. Only use a \'nop\' if you must\n\naddi $t0, $t1, 5\nori $t2, $t3, -20\nbeq $t0, $t2, label\nlw $t4, 0($t0)', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 70, 0, 6),
(50, 'rand_1 = randint(150, 250)\nrand_2 = randint(50, 150)\nrand_3 = randint(100, 250)\nrand_4 = randint(200, 250)\nrand_5 = randint(50, 150)', -1, 1, 'Using the circuit shown in the first question, and according to the following delays for the circuit elements:\n\n&lt;table style=\"width: 100%; font-size: large; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; text-align: center; margin-bottom: 10px;\"&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Element&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Register CLK-to-Q&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Register SETUP&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;MUX&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;ALU&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;(Instruction or Data) Memory Read&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Memory Write&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Register-file Read&lt;/td&gt;\n	&lt;/tr&gt;\n\n	&lt;tr style=\"border: 1px lightgrey solid;\"&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;Delays (PS)&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;30&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;20&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;25&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;200&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;250&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;200&lt;/td&gt;\n		&lt;td style=\"border: 1px lightgrey solid; padding: 5px;\"&gt;150&lt;/td&gt;\n	&lt;/tr&gt;\n&lt;/table&gt;\na) What instruction (store, add, load, sub, ...) exercises the critical path?\n\nb) What is the duration (in pico seconds) for the critical path?', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 80, 0, 6);
--</string>
		<string>INSERT INTO `main_subitem` (`id`, `subItem_order`, `subItem_title`, `subItem_category`, `subItem_link`, `subItem_function`, `show`, `item_id`) VALUES
(3, 0, 'PDF Notes', 'PDF', 'anyLink', 'anyFunction', 0, 3),
(4, 20, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 3),
(5, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 8),
(6, 20, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 6),
(7, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 7),
(8, 10, 'Slides (HTML)', 'PDF', 'anyLink', 'anyFunction', 0, 3),
(9, 20, 'Practice Questions (Contributors)', 'Practice', 'anyLink', 'anyFunction', 0, 3),
(10, 10, 'Assigned Reading: (4th) P&amp;H 2.4 | (5th) P&amp;H 2.4', 'Note', 'anyLink', 'anyFunction', 1, 3),
(11, 10, 'Assigned Reading: (4th) P&amp;H 2.4 | (5th) P&amp;H 2.4', 'Note', 'anyLink', 'anyFunction', 1, 6),
(13, 10, 'We didn\'t cover this part in class, hence won\'t be in Quiz. Practice Questions Part I (Pointer to a Pointer)', 'Practice', 'anyLink', 'anyFunction', 1, 9),
(14, 80, 'Practice Questions PART II (Arrays and Pointers Part II)', 'Practice', 'anyLink', 'anyFunction', 1, 9),
(16, 50, 'Revisionist History Ep 04: Carlos Doesn\'t Remember', 'Link', 'http://revisionisthistory.com/episodes/04-carlos-doesnt-remember', 'anyFunction', 0, 9),
(17, 60, 'Revisionist History Ep 05: Food Fight', 'Link', 'http://revisionisthistory.com/episodes/05-food-fight', 'anyFunction', 0, 9),
(18, 60, 'Revisionist History Ep 06: My Little Hundred Million (Interview with John Hennessey)', 'Link', 'http://revisionisthistory.com/episodes/06-my-little-hundred-million', 'anyFunction', 0, 9),
(19, 10, 'Assigned Reading: (4th) P&amp;H 2.1 &amp; 2.2 | (5th) P&amp;H 2.1 &amp; 2.2', 'Note', 'anyLink', 'anyFunction', 1, 10),
(20, 10, 'Assigned Reading: (4th) P&amp;H 2.2 &amp; 2.3 | (5th) P&amp;H 2.2 &amp; 2.3', 'Note', 'anyLink', 'anyFunction', 1, 11),
(21, 10, 'Practice Questions Part I (Trace MIPS Code)', 'Practice', 'anyLink', 'anyFunction', 1, 11),
(22, 10, 'Practice Questions Part II (Convert C to  MIPS)', 'Practice', 'anyLink', 'anyFunction', 1, 11),
(23, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 10),
(24, 10, 'Practice Questions Part I', 'Practice', 'anyLink', 'anyFunction', 1, 12),
(25, 10, 'Practice Questions Part II', 'Practice', 'anyLink', 'anyFunction', 1, 12),
(26, 10, 'Assigned Reading: (4th) P&amp;H 2.7 | (5th) P&amp;H 2.7', 'Note', 'anyLink', 'anyFunction', 1, 23),
(27, 10, 'Assigned Reading: (4th) P&amp;H 2.8 &amp; Appendix B.6 | (5th) P&amp;H 2.8 &amp; Appendix A.6', 'Note', 'anyLink', 'anyFunction', 1, 24),
(28, 20, 'Practice Questions Part I (MIPS to Binary)', 'Practice', 'anyLink', 'anyFunction', 1, 25),
(29, 20, 'Practice Questions Part II (Binary to MIPS)', 'Practice', 'anyLink', 'anyFunction', 1, 25),
(30, 10, 'Assigned Reading: Appendix B.1 (Introduction) &amp; Appendix B.2 (Gates, Truth Tables, and Logic Equations)', 'Note', 'anyLink', 'anyFunction', 1, 26),
(31, 10, 'Assigned Reading: Appendix B.3 (Subtopics \"Multiplexors\" &amp; \"Don\'t Cares\") &amp; Appendix B.5 (Subtopics \"A 1-Bit-ALU\" &amp; \"A 32-Bit ALU\")', 'Note', 'anyLink', 'anyFunction', 1, 27),
(32, 20, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 26),
(33, 10, 'Practice Questions Part I (No Dont Cares)', 'Practice', 'anyLink', 'anyFunction', 1, 28),
(34, 20, 'Practice Questions Part II (With Dont Cares)', 'Practice', 'anyLink', 'anyFunction', 1, 28),
(35, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 29),
(36, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 30),
(37, 10, '', 'Audio', '/static/main/audio/PP3692963319_ep4', 'anyFunction', 1, 31),
(38, 10, '', 'Audio', '/static/main/audio/PP3941264909_ep5', 'anyFunction', 1, 32),
(39, 10, '', 'Audio', '/static/main/audio/PP7918990166_ep6', 'anyFunction', 1, 33),
(40, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 34)</string>
		<string>INSERT INTO `main_final_exam` (`id`, `section_full_title`, `order`) VALUES
(1, 'Section 1: Tuesday, December 12 from 8:00am to 11:00am', 0),
(2, 'Section 2: Thursday, December 7 from 8:00am to 11:00am', 1)</string>
		<string>COMMIT</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.7.19</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>

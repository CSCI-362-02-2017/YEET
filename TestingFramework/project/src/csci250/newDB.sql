-- phpMyAdmin SQL Dump
-- version 4.7.2
-- https://www.phpmyadmin.net/
--
-- Host: localhost
-- Generation Time: Oct 02, 2017 at 03:54 PM
-- Server version: 5.6.37-82.2
-- PHP Version: 5.6.31

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `course_csci_250_django111`
--

--
-- Dumping data for table `main_assignments`
--



INSERT INTO `main_assignments` (`id`, `assignment_title`, `assignment_short_title`, `assignment_order`, `assignment_due_date_time`, `assignment_date_tbd`) VALUES
(2, 'Assignment 1 (Numeral Systems & Intro to C)', 'Assignment01', 10, '2017-09-22 03:59:00', 0),
(3, 'Assignment 2 (C to MIPS)', 'Assignment02', 20, '2017-10-11 03:59:00', 0),
(4, 'Assignment 3 (MIPS to Machine Code & Vice-versa)', 'Assignment03', 30, '2017-07-25 03:59:00', 1),
(5, 'Assignment 4 (Combinational & Sequential Logic)', 'Assignment04', 40, '2017-07-28 03:59:00', 1),
(6, 'Assignment 5 (Single-cycle CPU, Pipelining & Data Hazards)', 'Assignment05', 50, '2017-08-02 03:59:00', 1);

--
-- Dumping data for table `main_assignment_answer`
--

INSERT INTO `main_assignment_answer` (`id`, `answer_python_code`, `answer_element_type`, `answer_element_style`, `question_id`, `placeholder`) VALUES
(3, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 4, ''),
(4, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 80%;', 5, ''),
(5, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 6, ''),
(6, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 9, ''),
(7, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 10, ''),
(8, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 11, ''),
(9, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 12, ''),
(10, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 0 auto; width: 97%; margin-bottom: 15px;', 13, ''),
(11, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 0 auto; width: 97%; margin-bottom: 15px;', 14, ''),
(12, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 350px;', 16, ''),
(13, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 70px;', 17, ''),
(14, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 350px;', 18, ''),
(15, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 19, ''),
(16, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 350px;', 20, ''),
(17, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 21, ''),
(18, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 22, ''),
(19, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 23, ''),
(20, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 24, ''),
(22, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 100px;', 25, ''),
(23, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 125px;', 26, ''),
(24, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 80%;', 27, ''),
(25, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 80%;', 28, ''),
(26, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 80%;', 29, ''),
(27, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 30, ''),
(28, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 31, 'True/False'),
(29, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 32, 'True/False'),
(30, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 33, 'True/False'),
(31, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 34, 'True/False'),
(32, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 35, 'True/False'),
(33, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px;', 36, ''),
(34, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 50%;', 37, ''),
(35, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 38, ''),
(36, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 39, '1st State = 0/1, 2nd State = 0/1, ...'),
(37, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 40, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(38, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 41, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(39, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 42, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(40, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 43, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(41, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 44, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(42, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 45, 'RegDst = 0/1/X, ExtOp = 0/1/X, ...'),
(43, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 46, 'Without Pipelining = x. With pipelining = y.'),
(45, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 125px;', 48, ''),
(46, '', 'textarea', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%; height: 125px;', 49, ''),
(47, '', 'input', 'font-size: 20px; padding: 5px; margin: 5px; width: 100%;', 50, 'Critical path instruction = x. Critical path duration = y.');

--
-- Dumping data for table `main_assignment_question`
--

INSERT INTO `main_assignment_question` (`id`, `python_code`, `parent_question_id`, `repeat`, `title`, `element_type`, `element_style`, `question_order`, `question_detail_id`, `assignment_id`) VALUES
(4, 'num = randint(1, 31)\n\nans = cofc_convert_decimal_to_unsigned_binary(num)', -1, 5, 'Convert the decimal number: ***num*** to a 5-bit unsigned binary', 'div', 'margin: 5px;', 10, 0, 2),
(5, 'num = randint(10, 25)\n\nans = cofc_convert_decimal_to_unsigned_binary(num)', -1, 1, 'What will be the output of the following C program ?\n\n#include &lt;stdio.h&gt;\nint main()\n{\n	int x = ***num***;\n	int *y;\n	int *z;\n	y = &x; /* Assume address of x is 500 (decimal) and size of integer is 4 byte long */\n	z = y;\n	*y = *z + 1;\n	x = x + 1;\n	printf(\"x = %d, y = %p, z = %p\\n\", x, y, z); // Use decimal when printing pointers\n	return 0;\n}', 'div', 'margin: 5px; white-space: pre', 20, 0, 2),
(6, 'num = randint(2, 5)', -1, 1, 'For a system of n-digit unsigned base ***num*** numbers (n > 1), how many numbers (unique combinations) can be represented?', 'div', 'margin: 5px;', 30, 0, 2),
(9, '', -1, 1, 'For an n-digit 2\'s complement binary number (n > 1), what is the number of negative integers (as a function of n)?', 'div', 'margin: 5px;', 40, 0, 2),
(10, 'num = randint(-20, 20)\n\nans = cofc_convert_decimal_to_unsigned_binary(num)', -1, 5, 'Convert the decimal number: ***num*** to a 5-bit 1\'s complement binary (if value can\'t be represented, answer \'NA\')', 'div', 'margin: 5px;', 12, 0, 2),
(11, 'num = randint(-20, 20)\n\nans = cofc_convert_decimal_to_unsigned_binary(num)', -1, 5, 'Convert the decimal number: ***num*** to a 5-bit 2\'s complement binary (if value can\'t be represented, answer \'NA\')', 'div', 'margin: 5px;', 14, 0, 2),
(12, '', -1, 1, 'For an n-digit 2\'s complement number (n > 1), how many zeros are there?', 'div', 'margin: 5px;', 45, 0, 2),
(13, '', -1, 1, 'Write a \'swap\' function with the following function header:\n\nvoid swap(int *p1, int *p2);\n \nThe \'swap\' function should swap the values of two integers.\n\nint main()\n{\n 	int x = 10;\n 	int y = 20;\n 	// <span style=\'color: indianred;\'>You must figure out how to call the function correctly (include this in your answer)</span>\n 	// Next line should print out x: 20, y: 10\n 	//\n 	printf(\"x: %d, y: %d\\n\", x, y);\n}', 'div', 'margin: 5px; white-space: pre', 50, 0, 2),
(14, '', -1, 1, 'According to the C standard, arr[0] is actually syntactic shorthand for *(arr+0). Write a C program that loops twice, the first loop is to initialize the elements of some integer array (say size 20), and a second loop to print all the elements of the array (next to their addresses). <span style=\"color: indianred;\">In both loops, use the alternative notation (* notation).</span>\n\nThe output of your code should look like the following:\n\n&lt;address of 1st element&gt;, &lt;value of 1st element&gt; (e.g. 0x7fff5fbff63c, 50)\n&lt;address of 2nd element&gt;, &lt;value of 2nd element&gt; (e.g. 0x7fff5fbff640, 50) ', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 60, 0, 2),
(16, '', -1, 1, 'Translate the following C code to MIPS assembly code.\n\nint arr[20];\nvoid main()\n{\n	int counter = 0;\n 	int s0;\n 	int s1;\n 	for(s0 = 0; s0 < 5; s0++)\n 		for (s1 = 0; s1 < 4; s1++)\n 		{\n 			arr[counter] = s0 + s1;\n			counter = counter + 1;\n 		}\n}', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 3),
(17, '', -1, 1, 'Provide a set of pure MIPS instructions that may be used to implement the following pseudo-instruction:\n\nnot $t1, $t2 # bit-wise invert', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 3),
(18, '', -1, 1, 'Translate the following C code to MIPS assembly code.\n\nvoid main()\n{\n	int counter = 20;\n	int loc_arr[16];\n\n 	while(counter >= 5)\n 	{\n 		loc_arr[counter - 5] = 50;\n 		counter = counter - 1;\n 	}\n}', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 3),
(19, '', -1, 1, 'Assume $t0 holds the value 0x00101000. What is the value of $t2 after the following instructions?\n\nslt $t2, $0, $t0\nbne $t2, $0, ELSE\nj DONE\nELSE:\naddi $t2, $t2, 2\nDONE:', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 3),
(20, '', -1, 1, 'Translate the following C code to MIPS assembly code.\n\nint counter = 0;\n\nvoid change_global(int value)\n{\n	counter = counter + value;\n} \n\nvoid main()\n{\n	change_global(5);\n	change_global(10);\n}', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 3),
(21, 'all_instructions = [Mips_instruction(\"add\", \"000000\", \"100000\", \"R\"), \nMips_instruction(\"sub\", \"000000\", \"100010\", \"R\"), \nMips_instruction(\"addi\", \"001000\", \"\", \"I\"), Mips_instruction(\"and\", \"000000\", \"100100\", \"R\"),\nMips_instruction(\"andi\", \"001100\", \"\", \"I\"), Mips_instruction(\"or\", \"000000\", \"100101\", \"R\"),\nMips_instruction(\"ori\", \"001101\", \"\", \"I\"), Mips_instruction(\"slt\", \"000000\", \"101010\", \"R\"),\nMips_instruction(\"slti\", \"001010\", \"\", \"I\"), Mips_instruction(\"lw\", \"100011\", \"\", \"I\"),\nMips_instruction(\"sw\", \"101011\", \"\", \"I\")]\n\ndef generate_random_instruction():\n    curr_inst = choice(all_instructions)\n    if curr_inst.inst_type == \"R\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        rd = choice(all_registers)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, rd, 0)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, rd, 0)\n    elif curr_inst.inst_type == \"I\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        imm = randint(-20, 20)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, 0, imm)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, 0, imm)\n\n    return [inst_mips, inst_bin]\n\nq_s = generate_random_instruction()\nquestion = q_s[1]\nans = q_s[0]', -1, 5, ' Provide the <u>type</u> and <u>assembly language instruction</u> for the following binary value:\n\n***question***', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(22, 'all_instructions = [Mips_instruction(\"add\", \"000000\", \"100000\", \"R\"), \nMips_instruction(\"sub\", \"000000\", \"100010\", \"R\"), \nMips_instruction(\"addi\", \"001000\", \"\", \"I\"), Mips_instruction(\"and\", \"000000\", \"100100\", \"R\"),\nMips_instruction(\"andi\", \"001100\", \"\", \"I\"), Mips_instruction(\"or\", \"000000\", \"100101\", \"R\"),\nMips_instruction(\"ori\", \"001101\", \"\", \"I\"), Mips_instruction(\"slt\", \"000000\", \"101010\", \"R\"),\nMips_instruction(\"slti\", \"001010\", \"\", \"I\"), Mips_instruction(\"lw\", \"100011\", \"\", \"I\"),\nMips_instruction(\"sw\", \"101011\", \"\", \"I\")]\n\ndef generate_random_instruction():\n    curr_inst = choice(all_instructions)\n    if curr_inst.inst_type == \"R\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        rd = choice(all_registers)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, rd, 0)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, rd, 0)\n    elif curr_inst.inst_type == \"I\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        imm = randint(-20, 20)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, 0, imm)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, 0, imm)\n\n    return [inst_mips, inst_bin]\n\nq_s = generate_random_instruction()\nquestion = q_s[0]\nans = q_s[1]', -1, 5, ' Provide the <u>type</u> and <u>hexadecimal representation</u> of the following instruction:\n\n***question***', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(23, '', -1, 1, 'Provide the <u>type</u>, <u>assembly language instruction</u>, and <u>hexadecimal representation</u> of the instruction described by the following MIPS fields:\n\nop = 0, rs = 3, rt = 2, rd = 3, shamt = 0, funct = 34', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(24, '', -1, 1, 'Provide the <u>type</u>, <u>assembly language instruction</u>, and <u>hexadecimal representation</u> of the instruction described by the following MIPS fields:\n\n op = 0x23, rs = 1, rt = 2, const = 0x4 ', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(25, '', -1, 1, 'Write the <u>\"pure\"</u> MIPS assembly code that loads the 32-bit constant/immediate below into register $t1\n\n 0010 0000 0000 0001 0100 1001 0010 0100', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(26, '', -1, 1, 'Convert the following MIPS code to binary (or machine language):\n\n100 beq $s0, $s1, IF 		# branch if ( i == j )\n104 addi $s1, $s1, -1 		# j = j - 1\n108 j L1 					# jump over else\n112 IF: addi $s0, $s0, 1 		# i = i + 1\n116 L1: add $s1, $s1, $s0 	# j = j + i\n\nNote here that the address of each line/word is specified in decimal. When you convert to machine language, everything should be in binary. <u style=\"color: indianred;\">Please add at least one space between the fields of every instruction.</u>', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 4),
(27, '', -1, 1, 'Find the output (boolean expression) for the circuit below (<u>without simplifying</u>):\n\n<img src=\"/static/main/img/circuits/circuit01.png\" alt=\"Smiley face\" width=\"100%\">\n', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 5),
(28, '', -1, 1, 'Find the output (boolean expression) for the circuit below (<u>without simplifying</u>):\n\n<img src=\"/static/main/img/circuits/circuit02.png\" alt=\"Smiley face\" width=\"100%\">\n', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 10, 0, 5),
(29, '', -1, 1, 'Find the output (boolean expression) for the circuit below (<u>without simplifying</u>):\n\n<img src=\"/static/main/img/circuits/circuit03.png\" alt=\"Smiley face\" width=\"100%\">\n', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 20, 0, 5),
(30, '', -1, 1, 'What is the number of control/select wires for an 8-1 multiplexer?', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 5, 0, 5),
(31, '', -1, 1, 'The variables p, q, and s have the following truth values: p = True, q = True, s = False.  What\'s the truth value for the following boolean expressions:\n<div style=\"text-align: center; color: indianred;\">p + ~q</div>', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 13, 0, 5),
(32, '', -1, 1, 'The variables p, q, and s have the following truth values: p = True, q = True, s = False.  What\'s the truth value for the following boolean expressions:\n<div style=\"text-align: center; color: indianred;\">(p . q) + s</div>', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 14, 0, 5),
(33, '', -1, 1, 'The variables p, q, and s have the following truth values: p = True, q = True, s = False.  What\'s the truth value for the following boolean expressions:\n<div style=\"text-align: center; color: indianred;\">p . (q + s)</div>', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 15, 0, 5),
(34, '', -1, 1, 'The variables p, q, and s have the following truth values: p = True, q = True, s = False.  What\'s the truth value for the following boolean expressions:\n<div style=\"text-align: center; color: indianred;\">p + ~(q . s)</div>', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 16, 0, 5),
(35, '', -1, 1, 'The variables p, q, and s have the following truth values: p = True, q = True, s = False.  What\'s the truth value for the following boolean expressions:\n<div style=\"text-align: center; color: indianred;\">~(q . p . ~s)</div>', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 17, 0, 5),
(36, '', -1, 1, 'How many two-input AND gates are required to realize:\n<div style=\"text-align: center; color: indianred;\">Y = C . D + E . F + G</div>', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 30, 0, 5),
(37, '', -1, 1, 'How many two-input AND gates and two-input OR gates are required to realize:\n<div style=\"text-align: center; color: indianred;\">Y = B . D + C . E + A . B</div>', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 35, 0, 5),
(38, '', -1, 1, 'Find the boolean expression that describes \'?\' (without simplifying)\n\n<table style=\"width: 95%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; text-align: center; margin-bottom: 30px;\">\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">p</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">q</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">s</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\">?</td>\n	</tr>\n\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\">0</td>\n	</tr>\n\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\">0</td>\n	</tr>\n\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\">1</td>\n	</tr>\n\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\">1</td>\n	</tr>\n\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\">1</td>\n	</tr>\n\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\">1</td>\n	</tr>\n\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\">0</td>\n	</tr>\n\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\">0</td>\n	</tr>\n</table>', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 40, 0, 5),
(39, '', -1, 1, 'The diagram below is called a \'Gated SR Latch\' circuit, built from \'NOR\'s and \'AND\'s. Provide the Q value for the 1st, 2nd, 3rd, and 4th state.\r\n\r\n<img src=\"/static/main/img/circuits/circuit06.png\" alt=\"Smiley face\" width=\"100%\">\r\n\r\n<table style=\"width: 95%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; text-align: center; margin-bottom: 30px;\">\r\n	<tr style=\"border: 1px lightgrey solid;\">\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">State</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">R</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">E</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">S</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\">Q</td>\r\n	</tr>\r\n\r\n	<tr style=\"border: 1px lightgrey solid;\">\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1st State</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\">?</td>\r\n	</tr>\r\n\r\n	<tr style=\"border: 1px lightgrey solid;\">\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">2nd State</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\">?</td>\r\n	</tr>\r\n\r\n	<tr style=\"border: 1px lightgrey solid;\">\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">3rd State</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\">?</td>\r\n	</tr>\r\n\r\n	<tr style=\"border: 1px lightgrey solid;\">\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">4th State</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">1</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">0</td>\r\n		<td style=\"border: 1px lightgrey solid; padding: 5px; color: indianred;\">?</td>\r\n	</tr>\r\n</table>', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 45, 0, 5),
(40, '', -1, 1, 'According to the diagram and table below:\n\n<img src=\"/static/main/img/circuits/circuit07.png\" alt=\"Smiley face\" width=\"100%\">\n\n<table style=\"width: 100%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; text-align: center;\">\n\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">Operation</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">AND</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">OR</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">ADD</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">SUB</td>\n	</tr>\n\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">ALUCtr</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">00</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">01</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">10</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">11</td>\n	</tr>\n</table>\n\nList the values for \'<u style=\"color: green;\">RegDst</u>\', \'<u style=\"color: green;\">ExtOp</u>\' ,\'<u style=\"color: green;\">ALUCtr</u>\', \'<u style=\"color: green;\">MemWr</u>\', \'<u style=\"color: green;\">MemtoReg</u>\' and \'<u style=\"color: green;\">RegWr</u>\' for the \'<u style=\"color: indianred;\">add</u>\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 0, 0, 6),
(41, '', -1, 1, 'According to the diagram and table shown in the first question. List the values for \'<u style=\"color: green;\">RegDst</u>\', \'<u style=\"color: green;\">ExtOp</u>\' ,\'<u style=\"color: green;\">ALUCtr</u>\', \'<u style=\"color: green;\">MemWr</u>\', \'<u style=\"color: green;\">MemtoReg</u>\' and \'<u style=\"color: green;\">RegWr</u>\' for the \'<u style=\"color: indianred;\">ori</u>\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 10, 0, 6),
(42, '', -1, 1, 'According to the diagram and table shown in the first question. List the values for \'<u style=\"color: green;\">RegDst</u>\', \'<u style=\"color: green;\">ExtOp</u>\' ,\'<u style=\"color: green;\">ALUCtr</u>\', \'<u style=\"color: green;\">MemWr</u>\', \'<u style=\"color: green;\">MemtoReg</u>\' and \'<u style=\"color: green;\">RegWr</u>\' for the \'<u style=\"color: indianred;\">lw</u>\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 20, 0, 6),
(43, '', -1, 1, 'According to the diagram and table shown in the first question. List the values for \'<u style=\"color: green;\">RegDst</u>\', \'<u style=\"color: green;\">ExtOp</u>\' ,\'<u style=\"color: green;\">ALUCtr</u>\', \'<u style=\"color: green;\">MemWr</u>\', \'<u style=\"color: green;\">MemtoReg</u>\' and \'<u style=\"color: green;\">RegWr</u>\' for the \'<u style=\"color: indianred;\">sw</u>\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 30, 0, 6),
(44, '', -1, 1, 'According to the diagram and table shown in the first question. List the values for \'<u style=\"color: green;\">RegDst</u>\', \'<u style=\"color: green;\">ExtOp</u>\' ,\'<u style=\"color: green;\">ALUCtr</u>\', \'<u style=\"color: green;\">MemWr</u>\', \'<u style=\"color: green;\">MemtoReg</u>\' and \'<u style=\"color: green;\">RegWr</u>\' for the \'<u style=\"color: indianred;\">sub</u>\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 40, 0, 6),
(45, '', -1, 1, 'According to the diagram and table shown in the first question. List the values for \'<u style=\"color: green;\">RegDst</u>\', \'<u style=\"color: green;\">ExtOp</u>\' ,\'<u style=\"color: green;\">ALUCtr</u>\', \'<u style=\"color: green;\">MemWr</u>\', \'<u style=\"color: green;\">MemtoReg</u>\' and \'<u style=\"color: green;\">RegWr</u>\' for the \'<u style=\"color: indianred;\">and</u>\' instruction.', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 40, 0, 6),
(46, 'rand_1 = randint(150, 250)\nrand_2 = randint(50, 150)\nrand_3 = randint(100, 250)\nrand_4 = randint(200, 250)\nrand_5 = randint(50, 150)', -1, 1, 'Assume the times for CPU stages are as follows:\n\n<table style=\"width: 95%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; text-align: center;\">\n\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">Instruction fetch</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">Register Read / Instruction Decode</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">ALU</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">Memory Access</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">Register Write</td>\n	</tr>\n\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">***rand_1***ps</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">***rand_2***ps</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">***rand_3***ps</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">***rand_4***ps</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">***rand_5***ps</td>\n	</tr>\n\n</table>\n\na) Without pipelining, what\'s the maximum speed (Hertz) we can clock this CPU (according to the numbers above)?\n\nb) With pipelining, what\'s the maximum speed (Hertz) we can clock this CPU (according to the numbers above)?', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 50, 0, 6),
(48, 'rand_1 = randint(150, 250)\nrand_2 = randint(50, 150)\nrand_3 = randint(100, 250)\nrand_4 = randint(200, 250)\nrand_5 = randint(50, 150)', -1, 1, 'Reorder the following sets of instructions to account for the branch delay slot. Only use a \'nop\' if you must\n\naddi $t0, $t1, 5\nori $t2, $t3, -20\nbeq $t0, $s0, label\nlw $t4, 0($t0)', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 60, 0, 6),
(49, 'rand_1 = randint(150, 250)\nrand_2 = randint(50, 150)\nrand_3 = randint(100, 250)\nrand_4 = randint(200, 250)\nrand_5 = randint(50, 150)', -1, 1, 'Reorder the following sets of instructions to account for the branch delay slot. Only use a \'nop\' if you must\n\naddi $t0, $t1, 5\nori $t2, $t3, -20\nbeq $t0, $t2, label\nlw $t4, 0($t0)', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 70, 0, 6),
(50, 'rand_1 = randint(150, 250)\nrand_2 = randint(50, 150)\nrand_3 = randint(100, 250)\nrand_4 = randint(200, 250)\nrand_5 = randint(50, 150)', -1, 1, 'Using the circuit shown in the first question, and according to the following delays for the circuit elements:\n\n<table style=\"width: 100%; font-size: large; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; text-align: center; margin-bottom: 10px;\">\n\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">Element</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">Register CLK-to-Q</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">Register SETUP</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">MUX</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">ALU</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">(Instruction or Data) Memory Read</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">Memory Write</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">Register-file Read</td>\n	</tr>\n\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">Delays (PS)</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">30</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">20</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">25</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">200</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">250</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">200</td>\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">150</td>\n	</tr>\n</table>\na) What instruction (store, add, load, sub, ...) exercises the critical path?\n\nb) What is the duration (in pico seconds) for the critical path?', 'div', 'margin: 5px; white-space: pre-wrap; text-align: justify;', 80, 0, 6);

--
-- Dumping data for table `main_final_exam`
--

INSERT INTO `main_final_exam` (`id`, `section_full_title`, `order`) VALUES
(1, 'Section 1: Tuesday, December 12 from 8:00am to 11:00am', 0),
(2, 'Section 2: Thursday, December 7 from 8:00am to 11:00am', 1);

-- --------------------------------------------------------

--
-- Table structure for table `main_item`
--

CREATE TABLE `main_item` (
  `id` int(11) NOT NULL,
  `item_order` int(11) NOT NULL,
  `item_content` varchar(400) NOT NULL,
  `type` varchar(40) NOT NULL,
  `expand` tinyint(1) NOT NULL,
  `topic_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `main_item`
--

INSERT INTO `main_item` (`id`, `item_order`, `item_content`, `type`, `expand`, `topic_id`) VALUES
(3, 20, 'Converting between Binary, Decimal, & Hexadecimal; and representing Negative Numbers (Sign-Magnitude)', 'simple_expand', 1, 2),
(6, 0, 'Representing Negative Numbers (1s Complement and 2s Complement)', 'simple_expand', 1, 3),
(7, 0, 'Variables; printf; if statements; and loops', 'simple_expand', 1, 4),
(8, 0, 'Functions and Pointers Part I', 'simple_expand', 1, 5),
(9, 0, 'Arrays and Pointers Part II', 'simple_expand', 1, 6),
(10, 0, 'MIPS Assembly Programming Language Part I', 'simple_expand', 1, 7),
(11, 0, 'MIPS Assembly Programming Language Part II', 'simple_expand', 1, 8),
(12, 0, 'MIPS Assembly Programming Language Part IV', 'simple_expand', 1, 10),
(23, 0, 'MIPS Assembly Programming Language Part III', 'simple_expand', 1, 9),
(24, 0, 'MIPS Assembly Programming Language Part V', 'simple_expand', 1, 11),
(25, 0, 'MIPS Assembly Programming Language Part VII', 'simple_expand', 1, 15),
(26, 0, 'Combinational Logic Part I: Gates', 'simple_expand', 1, 17),
(27, 0, 'Combinational Logic Part II: Half Adder, Full Adder, & Muxes', 'simple_expand', 1, 19),
(28, 0, 'Combinational/Sequential Logic Part I: Adders, Subtractors, Functional Completeness, & Domino Computers', 'simple_expand', 1, 21),
(29, 0, 'CPU Clock & Single-cycle Datapath Part I', 'simple_expand', 1, 27),
(30, 0, 'Single-cycle Datapath Part II & The Control Unit', 'simple_expand', 1, 28),
(31, 0, 'Episode 4: Carlos Doesn\'t Remember', 'simple_expand', 1, 38),
(32, 5, 'Episode 5: Food Fight', 'simple_expand', 1, 38),
(33, 10, 'Episode 6: My Little Hundred Million (Interview with John Hennessy)', 'simple_expand', 1, 38),
(34, 0, 'Number Representation', 'simple_expand', 1, 43);

--
-- Dumping data for table `main_quizquestion`
--

INSERT INTO `main_quizquestion` (`id`, `python_code`, `questionText`, `candidateAnswer1`, `candidateAnswer2`, `candidateAnswer3`, `candidateAnswer4`, `correctAnswer`, `repeat`, `quizType`, `author_id`, `subItem_id`) VALUES
(2, '', 'What\'s the <span style=\"color: blue;\">unsigned binary</span> sequence corresponding to the following decimal: ***v1,,randDecimal(0, 31)***', '***can1Ans,,decimalToUnsigned(^v1)***', '***can2Ans,,randBinary(0,31,0)***', '***can3Ans,,randBinary(0,31,0)***', '***can4Ans,,randBinary(0,31,0)***', '***ans,,decimalToUnsigned(^v1)***', 3, 'multiple4', -1, 4),
(8, '', 'What\'s the decimal value corresponding to the following <span style=\"color: blue;\">unsigned binary</span> sequence: ***v1,,randBinary(0, 31, 0)***', '***can1Ans,,binaryToDecimal(^v1)***', '***can2Ans,,randDecimal(0,31)***', '***can3Ans,,randDecimal(0,31)***', '***can4Ans,,randDecimal(0,31)***', '***ans,,binaryToDecimal(^v1)***', 3, 'multiple4', -1, 4),
(10, '', 'What\'s the decimal value corresponding to the following hexadecimal sequence: ***v1,,randHex(0, 48)***', '***can1Ans,,hexToDecimal(^v1)***', '***can2Ans,,randDecimal(0,48)***', '***can3Ans,,randDecimal(0,48)***', '***can4Ans,,randDecimal(0,48)***', '***ans,,hexToDecimal(^v1)***', 3, 'multiple4', -1, 4),
(11, '', 'What\'s the binary value corresponding to the following hexadecimal sequence: ***v1,,randHex(0, 31)***', '***can1Ans,,hexToBinary(^v1)***', '***can2Ans,,randBinary(0,31,0)***', '***can3Ans,,randBinary(0,31,0)***', '***can4Ans,,randBinary(0,31,0)***', '***ans,,hexToBinary(^v1)***', 3, 'multiple4', -1, 4),
(13, '', 'What\'s the hexadecimal value corresponding to the following binary sequence: ***v1,,randBinary(0, 31,0)***', '***can1Ans,,binaryToHex(^v1)***', '***can2Ans,,randHex(0,31)***', '***can3Ans,,randHex(0,31)***', '***can4Ans,,randHex(0,31)***', '***ans,,binaryToHex(^v1)***', 3, 'multiple4', -1, 4),
(15, '', 'What\'s the <span style=\"color: blue;\">unsigned binary</span> sequence corresponding to the following decimal: ***v1,,randDecimal(0, 31)*** (use 0b notation)', 'Answer here...', '', '', '', '***ans,,decimalToUnsigned(^v1)***', 3, 'input1', -1, 4),
(18, '', 'What\'s the decimal value corresponding to the following <span style=\"color: blue;\">unsigned</span> binary sequence: ***v1,,randBinary(0, 31,0)***', 'Answer here...', '', '', '', '***ans,,binaryToDecimal(^v1)***', 3, 'input1', -1, 4),
(19, '', 'What\'s the decimal value corresponding to the following hexadecimal sequence: ***v1,,randHex(0, 48)***', 'Answer here...', '', '', '', '***ans,,hexToDecimal(^v1)***', 3, 'input1', -1, 4),
(20, '', 'What\'s the binary value corresponding to the following hexadecimal sequence: ***v1,,randHex(0, 31)*** (use 0b notation)', 'Answer here...', '', '', '', '***ans,,hexToBinary(^v1)***', 3, 'input1', -1, 4),
(21, 'v1 = bin(randint(0, 31))\nans = hex(int(v1, 2))', 'What\'s the hexadecimal value corresponding to the following binary sequence: ***variable,v1*** (use 0x notation)', 'Answer here...', '', '', '', '***ans***', 3, 'input1', -1, 4),
(22, 'binarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv1 = binarySequence\n\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv2 = binarySequence\n\nans = addTwoBinaries(v1, v2, 5)', 'Add the two following <span style=\"color: blue;\">5-bit unsigned</span> binaries (use 0b notation): <div style=\"margin-top:15px;\">***variable,v1***</div>\n<div>***variable,v2***</div>', 'Answer here...', '', '', '', '***ans***', 8, 'input1', -1, 4),
(23, '', 'What\'s the <span style=\"color: blue;\">6-bit sign-magnitude</span> binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)***', '***ans,,decimalToSignMagnitude(^v1,6)***', '***can2Ans,,randBinary(0,63,6)***', '***can3Ans,,randBinary(0,63,6)***', '***can4Ans,,randBinary(0,63,6)***', '***ans,,decimalToSignMagnitude(^v1,6)***', 4, 'multiple4', -1, 4),
(24, '', 'What\'s the <span style=\"color: blue;\">6-bit one\'s complement</span> binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)***', '***can1Ans,,decimalToOnesComplement(^v1,6)***', '***can2Ans,,randBinary(0,63,6)***', '***can3Ans,,randBinary(0,63,6)***', '***can4Ans,,randBinary(0,63,6)***', '***can1Ans,,decimalToOnesComplement(^v1,6)***', 4, 'multiple4', 1, 6),
(25, '', 'What\'s the <span style=\"color: blue;\">6-bit two\'s complement</span> binary sequence corresponding to the following decimal: ***v1,,randDecimal(-32, 31)***', '***can1Ans,,decimalToTwosComplement(^v1,6)***', '***can2Ans,,randBinary(0,63,6)***', '***can3Ans,,randBinary(0,63,6)***', '***can4Ans,,randBinary(0,63,6)***', '***ans,,decimalToTwosComplement(^v1,6)***', 4, 'multiple4', 1, 6),
(26, '', 'What\'s the <span style=\"color: blue;\">6-bit sign-magnitude</span> binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)*** (use 0b notation)', 'Answer here...', '', '', '', '***ans,,decimalToSignMagnitude(^v1,6)***', 4, 'input1', -1, 4),
(27, 'binarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv1 = binarySequence\n\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv2 = binarySequence\n\nans = addTwoBinaries(v1, v2, 5)\n\n# Now generating a value for candidate 2\n#\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\ncand2 = binarySequence\n\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\ncand3 = binarySequence\n\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\ncand4 = binarySequence\n\n', 'Add the two following <span style=\"color: blue;\">5-bit unsigned</span> binaries (use 0b notation): <div style=\"margin-top:15px;\">***variable,v1,***</div>\n<div>***variable,v2***</div>', '***ans***', '***cand2***', '***cand3***', '***cand4***', '***ans***', 4, 'multiple4', -1, 4),
(28, '', 'What\'s the <span style=\"color: blue;\">6-bit one\'s complement</span> binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)***', 'Answer here...', '', '', '', '***ans,,decimalToOnesComplement(^v1,6)***', 4, 'input1', 1, 6),
(29, '', 'What\'s the <span style=\"color: blue;\">6-bit two\'s complement</span> binary sequence corresponding to the following decimal: ***v1,,randDecimal(-32, 31)***', 'Answer here...', '', '', '', '***ans,,decimalToTwosComplement(^v1,6)***', 4, 'input1', 1, 6),
(30, 'binarySequence = bin(randint(0, 63))\n\nwhile len(binarySequence) != 8:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv1 = binarySequence\n\nans = int(binarySequence[3:], 2)\n\nif binarySequence[2] ==\'1\':\n	ans = ans * -1', 'What\'s the decimal value corresponding to the following <span style=\"color: blue;\">6-bit sign-magnitude</span> binary sequence: ***variable,v1***', '***ans***', '***randint(-31,31)***', '***randint(-31,31)***', '***randint(-31,31)***', '***ans***', 4, 'multiple4', -1, 4),
(31, 'binarySequence = bin(randint(0, 63))\n\nwhile len(binarySequence) != 8:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv1 = binarySequence\n\nans = int(binarySequence[3:], 2)\n\nif binarySequence[2] ==\'1\':\n	ans = ans * -1', 'What\'s the decimal value corresponding to the following <span style=\"color: blue;\">6-bit sign-magnitude</span> binary sequence: ***variable,v1***', 'Answer here...', '', '', '', '***ans***', 4, 'input1', -1, 4),
(32, '', 'What\'s the decimal value corresponding to the following <span style=\"color: blue;\">6-bit one\'s complement</span> binary sequence: <br/> ***v1,,randBinary(0,63,6)***', '***can1Ans,,onesComplementToDecimal(^v1)***', '***can2Ans,,randDecimal(-31,31)***', '***can3Ans,,randDecimal(-31,31)***', '***can4Ans,,randDecimal(-31,31)***', '***ans,,onesComplementToDecimal(^v1)***', 4, 'multiple4', 1, 6),
(33, '', 'What\'s the decimal value corresponding to the following <span style=\"color: blue;\">6-bit one\'s complement</span> binary sequence: <br/> ***v1,,randBinary(0,63,6)***', 'Answer here...', '', '', '', '***ans,,onesComplementToDecimal(^v1)***', 4, 'input1', 1, 6),
(34, '', 'What\'s the decimal value corresponding to the following <span style=\"color: blue;\">6-bit two\'s complement</span> binary sequence:<br/> ***v1,,randBinary(0,63,6)***', '***can1Ans,,twosComplementToDecimal(^v1)***', '***can2Ans,,randDecimal(-32,31)***', '***can3Ans,,randDecimal(-32,31)***', '***can4Ans,,randDecimal(-32,31)***', '***ans,,twosComplementToDecimal(^v1)***', 4, 'multiple4', 1, 6),
(35, '', 'What\'s the decimal value corresponding to the following <span style=\"color: blue;\">6-bit two\'s complement</span> binary sequence: ***v1,,randBinary(0,63,6)***', 'Answer here...', '', '', '', '***ans,,twosComplementToDecimal(^v1)***', 4, 'input1', 1, 6),
(36, 'binarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv1 = binarySequence\n\nbinarySequence = bin(randint(0, 31))\n\nwhile len(binarySequence) != 7:\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\n\nv2 = binarySequence\n\nans = checkIfOverflow(v1, v2)', 'If we add the two following <span style=\"color: blue;\">5-bit unsigned</span> binaries, would we end up with an overflow or not? <div style=\"margin-top:15px;\">***variable,v1***</div>\n<div>***variable,v2***</div>', 'Yes (an overflow will occur)', 'No overflow', '', '', '***ans***', 8, 'multiple2', 2, 4),
(38, 'v1 = randint(3, 7)', 'What\'s the <span style=\"color: blue;\">maximum</span> value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', '***2**(v1 - 1) - 1***', '***randint(1,63)***', '***randint(1,63)***', '***randint(1,63)***', '***2**(v1 - 1) - 1***', 4, 'multiple4', -1, 4),
(39, 'v1 = randint(3, 7)', 'What\'s the <span style=\"color: blue;\">minimum</span> value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', '***-1 * 2**(v1 - 1) + 1***', '***-1 * randint(1,63)***', '***-1 * randint(1,63)***', '***-1 * randint(1,63)***', '***-1 * 2**(v1 - 1) + 1***', 4, 'multiple4', -1, 4),
(40, 'v1 = randint(3, 7)', 'What\'s the <span style=\"color: blue;\">maximum</span> value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', 'Answer here...', '', '', '', '***2**(v1 - 1) - 1***', 4, 'input1', -1, 4),
(42, 'v1 = randint(3, 7)', 'What\'s the <span style=\"color: blue;\">minimum</span> value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', 'Answer here...', '', '', '', '***-1 * 2**(v1 - 1) + 1***', 4, 'input1', -1, 4),
(46, 'v1 = randint(0, 50)\nv2 = randint(0, 50)\nans = v1 + v2', 'What\'s the output of the following code:\n<br/>\n<span style=\"color:red;\">print(***variable,v1*** + ***variable,v2***)</span>', '***randint(0, 100)***', '***randint(0, 100)***', '***randint(0, 100)***', '***ans***', '***ans***', 5, 'multiple4', 3, 9),
(47, 'v1 = randint(0, 50)\nv2 = randint(0, 50)\nans = v1 + v2', 'What\'s the output of the following code:\n<br/>\n<span style=\"color:blue;\">print(***variable,v1*** + ***variable,v2***)</span>', '***randint(0, 100)***', '***randint(0, 100)***', '***randint(0, 100)***', '***ans***', '***ans***', 5, 'multiple4', 4, 9),
(49, 'v1 = randint(0, 50)\nv2 = randint(0, 50)\nans = v1 + v2', 'What\'s the output of the following Python code:\n<br/>\n<span style=\"color:blue;\">print(***variable,v1*** + ***variable,v2***)</span>', '***v1 + v2 + randint(-5, 5)***', '***v1 + v2 + randint(-5, 5)***', '***v1 + v2 + randint(-5, 5)***', '***ans***', '***ans***', 10, 'multiple4', 2, 9),
(50, 'var1 = randint(0,10)\nvar2 = randint(0,10)\nans = var1 + var2\nwhile ans >= 16:\n    var1 = randint(0, 10)\n    var2 = randint(0, 10)\n    ans = var1 + var2\nvar1bin = str(bin(var1))\nvar2bin = str(bin(var2))\nwhile len(var1bin) != 6:\n    var1bin = var1bin[:2] +\'0\' + var1bin[2:]\nwhile len(var2bin) != 6 :\n    var2bin = var2bin[:2] + \'0\' + var2bin[2:]\nans = bin(var1 + var2)\nans = str(ans[2:])\nwhile len(ans) != 4:\n    ans = \'0\' + ans', 'What is the <span style=\"color:green\">unsigned 4-bit binary</span> answer to these two <span style=\"color:blue\">unsigned 4-bit binary</span> digits.\n<br/>  ***var1bin***\n<br/> +***var2bin***', '', '', '', '', 'ans', 10, 'input1', 3, 9),
(51, 'v1 = randint(3, 7)\nans = -1 * (2 ** (v1 - 1))', 'What\'s the <span style=\"color:blue;\">minimum</span> value (in decimal) that can be represented using a <span style=\"color:blue;\">***variable,v1***-bit two\'s complement</span> binary sequence?', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans***', '***ans***', 3, 'multiple4', 1, 6),
(52, 'v1 = randint(3, 7)\nans = (2 ** (v1 - 1)) -1', 'What\'s the <span style=\"color:blue;\">maximum</span> value (in decimal) that can be represented using a <span style=\"color:blue;\">***variable,v1***-bit two\'s complement</span> binary sequence?', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans***', '***ans***', 3, 'multiple4', 1, 6),
(53, 'v1 = randint(3, 7)\nans = -1 * (2 ** (v1 - 1))', 'What\'s the <span style=\"color:blue;\">minimum</span> value (in decimal) that can be represented using a <span style=\"color:blue;\">***variable,v1***-bit two\'s complement</span> binary sequence?', 'Answer here...', '', '', '', '***ans***', 3, 'input1', 1, 6),
(54, 'v1 = randint(3, 7)\nans = (2 ** (v1 - 1)) -1', 'What\'s the <span style=\"color:blue;\">maximum</span> value (in decimal) that can be represented using a <span style=\"color:blue;\">***variable,v1***-bit two\'s complement</span> binary sequence?', 'Answer here...', '', '', '', '***ans***', 3, 'input1', 1, 6),
(55, 'v1 = randint(3, 7)\nans = (2 ** (v1 - 1)) -1', 'What\'s the <span style=\"color:blue;\">maximum</span> value (in decimal) that can be represented using a <span style=\"color:blue;\">***variable,v1***-bit one\'s complement</span> binary sequence?', 'Answer here...', '', '', '', '***ans***', 3, 'input1', 1, 6),
(56, 'v1 = randint(3, 7)\nans = (2 ** (v1 - 1)) -1', 'What\'s the <span style=\"color:blue;\">maximum</span> value (in decimal) that can be represented using a <span style=\"color:blue;\">***variable,v1***-bit one\'s complement</span> binary sequence?', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans***', '***ans***', 3, 'multiple4', 1, 6),
(57, 'v1 = randint(3, 7)\nans = -1 * ((2 ** (v1 - 1)) -1)', 'What\'s the <span style=\"color:blue;\">minimum</span> value (in decimal) that can be represented using a <span style=\"color:blue;\">***variable,v1***-bit one\'s complement</span> binary sequence?', 'Answer here...', '', '', '', '***ans***', 3, 'input1', 1, 6),
(58, 'v1 = randint(3, 7)\nans = -1 * ((2 ** (v1 - 1)) -1)', 'What\'s the <span style=\"color:blue;\">minimum</span> value (in decimal) that can be represented using a <span style=\"color:blue;\">***variable,v1***-bit one\'s complement</span> binary sequence?', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans + randint(-10, 10)***', '***ans***', '***ans***', 3, 'multiple4', 1, 6),
(59, 'rand_length = randint(3, 7)\n\nrand_binary_1 = cofc_generate_random_binary(0, 2**rand_length-1, rand_length)\nrand_binary_2 = cofc_generate_random_binary(0, 2**rand_length-1, rand_length)\n\ndecimal_1 = cofc_twos_complement_to_decimal(rand_binary_1)\ndecimal_2 = cofc_twos_complement_to_decimal(rand_binary_2)\n\nmy_sum = decimal_1 + decimal_2\n\nif my_sum > ((2**(rand_length - 1)) -1) or my_sum < (-1 * (2**(rand_length - 1))):\n	ans = \"Yes (an overflow will occur)\"\nelse:\n	ans = \"No overflow\"', 'If we add the two following <span style=\"color:blue;\">***variable,rand_length***-bit two\'s complement</span> binaries, would we end up with an overflow or not?\n<div style=\"margin-top:15px;\">***variable,rand_binary_1***</div>\n<div>***variable,rand_binary_2***</div>', 'Yes (an overflow will occur)', 'No overflow', '', '', '***ans***', 8, 'multiple2', 1, 6),
(60, 'rand_binary_length = randint(3, 8)\n\nrandom_binary_1 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\nrandom_binary_2 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\n\nmy_addition = int(random_binary_1, 2) + int(random_binary_2, 2)\n\n# Only for one\'s complement\nif my_addition > (2**rand_binary_length - 1):\n	my_addition = my_addition + 1\n\nans = cofc_convert_decimal_to_unsigned_binary_with_length(my_addition, rand_binary_length)', 'Add the two following <span style=\"color: blue;\">***variable,rand_binary_length***-bit one\'s complement</span> binaries: <div style=\"margin-top:15px;\">***variable,random_binary_1***</div>\n<div>***variable,random_binary_2***</div>', '***ans***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***ans***', 6, 'multiple4', 1, 6),
(61, 'rand_binary_length = randint(3, 6)\n\nrandom_binary_1 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\nrandom_binary_2 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\n\nmy_addition = int(random_binary_1, 2) + int(random_binary_2, 2)\n\n# Only for one\'s complement\nif my_addition > (2**rand_binary_length - 1):\n	my_addition = my_addition + 1\n\nans = cofc_convert_decimal_to_unsigned_binary_with_length(my_addition, rand_binary_length)', 'Add the two following <span style=\"color: blue;\">***variable,rand_binary_length***-bit one\'s complement</span> binaries (use 0b notation): <div style=\"margin-top:15px;\">***variable,random_binary_1***</div>\n<div>***variable,random_binary_2***</div>', 'Answer here...', '', '', '', '***ans***', 6, 'input1', 1, 6),
(62, 'rand_binary_length = randint(3, 8)\n\nrandom_binary_1 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\nrandom_binary_2 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\n\nmy_addition = int(random_binary_1, 2) + int(random_binary_2, 2)\n\nans = cofc_convert_decimal_to_unsigned_binary_with_length(my_addition, rand_binary_length)', 'Add the two following <span style=\"color: blue;\">***variable,rand_binary_length***-bit two\'s complement</span> binaries: <div style=\"margin-top:15px;\">***variable,random_binary_1***</div>\n<div>***variable,random_binary_2***</div>', '***ans***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***cofc_generate_random_binary(0, 2**rand_binary_length -1, rand_binary_length)***', '***ans***', 4, 'multiple4', 1, 6),
(63, 'rand_binary_length = randint(3, 6)\n\nrandom_binary_1 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\nrandom_binary_2 = cofc_generate_random_binary(0, 2**rand_binary_length - 1, rand_binary_length)\n\nmy_addition = int(random_binary_1, 2) + int(random_binary_2, 2)\n\nans = cofc_convert_decimal_to_unsigned_binary_with_length(my_addition, rand_binary_length)', 'Add the two following <span style=\"color: blue;\">***variable,rand_binary_length***-bit two\'s complement</span> binaries: <div style=\"margin-top:15px;\">***variable,random_binary_1***</div>\n<div>***variable,random_binary_2***</div>', 'Answer here...', '', '', '', '***ans***', 4, 'input1', 1, 6),
(64, ' number = randint(-128,127)\n    binary = str(bin(number))\n    while len(binary) < 10:\n        binary = binary[:2] + \'0\' + binary[2:]\n\n    if number < 0:\n        for i in binary[2:]:\n            if i == \'0\':\n                onesComplement = onesComplement + \'1\'\n\n            if i == \'1\':\n                onesComplement = onesComplement + \'0\'\n\n    else:\n        for i in binary[2:]:\n            if i == \'0\':\n                onesComplement = onesComplement + \'0\'\n\n            if i == \'1\':\n                onesComplement = onesComplement  + \'1\'\n\n\n    onesComplement = \"0b\"\n\n    if number < 0:\n        binary = binary[1:]\n\n', 'something', 'a', 'b', 'c', 'd', 'a', 1, 'multiple4', 4, 9),
(69, 'all_types_dec = [\'int\', \'float\', \'char\']\nall_types = [\'integer\', \'float\', \'character\']\nall_values = [randint(-50, 50), round(random.uniform(-31, 31),2), \"\'\" + chr(randint(65, 90)) + \"\'\"]\n\nrand_index = randint(0, len(all_types)-1)\n\n\nrand_int = randint(-10, 10)\nrand_float = round(random.uniform(-31, 31),2)\n\nans = str(rand_int) + \", \" + str(round(rand_float, 1)) + \", \" + str(rand_int + rand_float)', 'What\'s the output of the following code?\n\n<div class=\"my_code\">\nvoid main()\n{\n	int my_int = ***rand_int***;\n	float my_float = ***rand_float***;\n	printf(\"%d, %.1f, %f\", my_int, my_float, my_int + my_float);\n}\n</div>', 'Answer here...', '', '', '', '***ans***', 4, 'input1', 1, 7),
(70, 'all_types_dec = [\'int\', \'float\', \'char\', \'long\', \'short\', \'char\', \'double\']\nall_types = [\'integer\', \'float\', \'character\']\nall_values = [randint(-50, 50), round(random.uniform(-31, 31),3), \"\'\" + chr(randint(65, 90)) + \"\'\"]\n\nrand_index = randint(0, len(all_types_dec)-1)\n\nans = \'printf(\"The size of a(n) \' + all_types_dec[rand_index] + \' is %lu\", sizeof(\' + all_types_dec[rand_index] + \'));\'', 'Write the C code that will print the following:\n<div class=\"my_code\">\nThe size of a(n) ***all_types_dec[rand_index]*** is &lt;actual_size_here&gt;\n</div>', 'Answer here...', '', '', '', '***ans***', 4, 'input1', 1, 7),
(73, 'rand_1 = randint(-100, 100)\nrand_2 = randint(-100, 100)\n\nif rand_1 > rand_2:\n	ans = \'I am inside the if statement!\'\nelse:\n	ans = \'I am inside the else section!\'', 'What\'s the output of the followig C code:\n<div class=\"my_code\">\nif (***rand_1*** > ***rand_2***)\n	printf(\"I am inside the if statement!\");\nelse\n	printf(\"I am insde the else section!\");\n</div>', 'I am inside the if statement!', 'I am inside the else section!', '', '', '***ans***', 4, 'multiple2', 1, 7),
(74, 'surround_else = randint(0, 1)\nnum_of_expressions = randint(2, 5)\n\ntotal_exp = \'\'\npython_exp = \'\'\n\nlogical_symbols = [\' && \', \' || \']\nlogical_symbols_p = [\' and \', \' or \']\nrelational_symbols = [\' > \', \' < \']\n\nfor el_num in range(num_of_expressions):\n	if num_of_expressions > 1:\n		rand_1_here = randint(-100, 100)\n		relation_rand_here = randint(0,1)\n		rand_2_here = randint(-100, 100)\n		total_exp = total_exp + \'(\' + str(rand_1_here) + relational_symbols[relation_rand_here] + str(rand_2_here) + \')\'\n		python_exp = python_exp + \'(\' + str(rand_1_here) + relational_symbols[relation_rand_here] + str(rand_2_here) + \')\'\n	else:\n		total_exp = total_exp + str(rand_1_here) + relational_symbols[relation_rand_here] + str(rand_2_here)\n	if el_num != num_of_expressions - 1:\n		temp = randint(0, 1)\n		total_exp = total_exp + logical_symbols[temp]\n		python_exp = python_exp + logical_symbols_p[temp]\n\nif eval(python_exp) and surround_else == 1:\n	ans = \'I am inside the if statement!\'\nelif eval(python_exp) and surround_else == 0:\n	ans = \'I am inside the if statement!:)\'\nelse:\n	ans = \'I am inside the else section!:)\'\n\nbeg_a = \'\'\nend_a = \'\'\n\nif surround_else == 1:\n	beg_a = \'\\n{\'\n	end_a = \'\\n}\'\n', 'What\'s the output of the followig C code (note: the \'and\' logical operator has a higher priority than \'or\'):\n<div class=\"my_code\">\nif (***total_exp***)\n	printf(\"I am inside the if statement!\");\nelse***beg_a***\n	printf(\"I am insde the else section!\");\n	printf(\":)\");***end_a***\n</div>', 'I am inside the if statement!', 'I am inside the else section!', 'I am inside the if statement!:)', 'I am inside the else section!:)', '***ans***', 8, 'multiple4', 1, 7),
(75, 'c_var = randint(0, 5)\nmax_val = randint(10, 20)\nincrement = randint(1, 3)\nbreak_or_not = randint(0,2)\nbreak_or_con = randint(0,1)\nbreak_num = randint(c_var+ 1, max_val-1) \nadded_section1 = \'\'\nadded_section2 = \'\'\n\nif break_or_not >= 1:\n	added_section1 = \"\\n\\tif (c_var == \" + str(break_num) + \")\"\n	if break_or_con == 1:\n		added_section2 = \"\\n\\t\\tbreak;\"\n	else:\n		added_section2 = \"\\n\\t\\tcontinue;\"\n\noutput = \'\'\n\nfor el_num in range(c_var, max_val, increment):\n	if break_or_not >= 1 and break_or_con == 1 and el_num == break_num:\n		break\n	if break_or_not >= 1 and break_or_con == 0 and el_num == break_num:\n		continue\n	output = output + str(el_num)', 'What\'s the output of the followig C code:\n<div class=\"my_code\">\nint c_var;\nfor(c_var = ***c_var***; c_var < ***max_val***; c_var = c_var + ***increment***)\n{***added_section1*** ***added_section2***\n	printf(\"%d\", c_var);\n}\n</div>', 'Answer here...', '', '', '', '***output***', 8, 'input1', 1, 7),
(164, 'var1 = random.uniform(-31, 15)\n\nans = cofc_decimal_to_twos_complement(int(var1), 32)\n\nans = \'Value is: \' + str(cofc_convert_binary_to_hex(ans)[2:])\n\ncand1 = cofc_decimal_to_twos_complement(int(var1), 32)', 'What\'s the output of the following code:\n<div class=\"my_code\">\nvoid main()\n{\n	int var_1 = ***var1***;\n	printf(\"Value is: %x\", var_1);\n}\n</div>', 'Answer here...', '', '', '', '***ans***', 5, 'input1', 1, 7),
(168, 'all_types_dec = [\'int\', \'float\', \'char\']\nall_types = [\'integer\', \'float\', \'character\']\nall_values = [randint(-50, 50), round(random.uniform(-31, 31),3), \"\'\" + chr(randint(65, 90)) + \"\'\"]\n\nrand_index = randint(0, len(all_types)-1)\n\nans = all_types_dec[rand_index] + \' my_var = \' + str(all_values[rand_index]) + \';\'', 'How do you declare a variable \'my_var\' of type ***all_types[rand_index]*** in C and give it the value ***all_values[rand_index]***', 'Answer here...', '', '', '', '***ans***', 5, 'input1', 1, 7),
(169, 'val_of_var_i = randint(0, 20)\n\nstr_var_1 = random.choice([\'value\', \'address\'])\nstr_var_2 = random.choice([\'var_i\', \'var_a\'])\nstr_var_3 = random.choice([\'var_a\', \'var_a_a\'])\n\nif str_var_1 == \'value\' and str_var_2 == \'var_a\' and str_var_3 == \'var_a\': ans = \'printf(\"%p\", var_a);\'\n\nif str_var_1 == \'address\' and str_var_2 == \'var_a\' and str_var_3 == \'var_a\': ans = \'printf(\"%p\", &var_a);\'\n\nif str_var_1 == \'value\' and str_var_2 == \'var_a\' and str_var_3 == \'var_a_a\': ans = \'printf(\"%p\", *var_a_a);\'\n\nif str_var_1 == \'address\' and str_var_2 == \'var_a\' and str_var_3 == \'var_a_a\': ans = \'printf(\"%p\", var_a_a);\'\n\nif str_var_1 == \'value\' and str_var_2 == \'var_i\' and str_var_3 == \'var_a\': ans = \'printf(\"%f\", *var_a);\'\n\nif str_var_1 == \'address\' and str_var_2 == \'var_i\' and str_var_3 == \'var_a\': ans = \'printf(\"%p\", var_a);\'\n\nif str_var_1 == \'value\' and str_var_2 == \'var_i\' and str_var_3 == \'var_a_a\': ans = \'printf(\"%f\", **var_a_a);\'\n\nif str_var_1 == \'address\' and str_var_2 == \'var_i\' and str_var_3 == \'var_a_a\': ans = \'printf(\"%p\", *var_a_a);\'\n', 'Type the C command to print the ***str_var_1*** of ***str_var_2*** using ***str_var_3***\n<div class=\"my_code\">\nvoid main()\n{\n	float var_i = ***val_of_var_i***;\n	float *var_a = &var_i;\n	float **var_a_a = &var_a;\n}\n</div>', '', '', '', '', '***ans***', 16, 'input1', 1, 13),
(170, 'val_of_var_i = randint(0, 20)\n\nstr_var_1 = random.choice([\'\', \'*\'])\nstr_var_2 = random.choice([\'\', \'*\', \'&\'])\nstr_var_3 = random.choice([\'\', \'*\', \'&\'])\n\nans = \'\'\n\nif str_var_1 == \'*\' and str_var_2 != \'&\': ans = \'Error(s) in code\'					# 3 cases\n\nif str_var_2 == \'&\': ans = \'Error(s) in code\'										# 6 cases\n\nif str_var_2 == \'*\' and str_var_3 != \'&\':  ans = \'Error(s) in code\'\n\nif str_var_2 == \'\' and str_var_3 != \'\': ans = \'Error(s) in code\'\n\nif str_var_1 == \'*\' and str_var_2 == \'*\' and str_var_3 == \'&\': ans = val_of_var_i + 5	# 1 case\n\nif str_var_1 != \'*\' and str_var_2 == \'*\': ans = \'Error(s) in code\'	# 3 cases\n\nif str_var_1 == \'\' and str_var_2 == \'\' and str_var_3 == \'\': ans = val_of_var_i		# 1 case\n\n', 'What\'s the output to the following code:\n<div class=\"my_code\">\nvoid change_value(int ***str_var_1***value)\n{\n	***str_var_2***value = ***str_var_2***value + 5;\n}\nvoid main()\n{\n	int var = ***val_of_var_i***;\n	change_value(***str_var_3***var);\n	printf(\"%d\", var);\n}\n</div>', 'Error(s) in code', '***val_of_var_i + 5***', '***val_of_var_i***', 'No errors but different output', '***ans***', 36, 'multiple4', 1, 5),
(171, 'val_of_var_i = randint(5, 20)\n\nstr_var_1 = random.choice([\'&\', \'*\'])\nstr_var_2 = random.choice([\'\', \'&\', \'*\'])\nstr_var_3 = random.choice([\'\', \'&\', \'*\'])\n\ncon_str = str_var_1 + str_var_2 + str_var_3\n\nans = \'\'\n\nif \'&&\' in con_str or \'***\' in con_str: \n	ans = \'Error\'\nelse:\n	con_str = con_str.replace(\'&*\', \'\')\n	con_str = con_str.replace(\'*&\', \'\')\n	if con_str == \'&\':\n		ans = 80\n	if con_str == \'*\':\n		ans = 40\n	if con_str == \'**\':\n		ans = val_of_var_i\n	if con_str == \'\':\n		ans = 120', 'Given the following pieces of information:\n<table style=\"width: 80%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\">\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\"></td>\n		<td style=\"border: 1px lightgrey solid;\">a1</td>\n		<td style=\"border: 1px lightgrey solid;\">a2</td>\n		<td style=\"border: 1px lightgrey solid;\">a3</td>\n	</tr>\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">Value</td>\n		<td style=\"border: 1px lightgrey solid;\">***val_of_var_i***</td>\n		<td style=\"border: 1px lightgrey solid;\">?</td>\n		<td style=\"border: 1px lightgrey solid;\">120</td>\n	</tr>\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">Address</td>\n		<td style=\"border: 1px lightgrey solid;\">40</td>\n		<td style=\"border: 1px lightgrey solid;\">?</td>\n		<td style=\"border: 1px lightgrey solid;\">80</td>\n	</tr>\n</table>\n\nWhat\'s the value of <span style=\"color: indianred;\">***str_var_1+str_var_2+str_var_3***a3</span> according to the code below: \n<div class=\"my_code\">\nvoid main()\n{\n	int a1 = ***val_of_var_i***;\n	int *a2 = &a1;\n	int **a3 = &a2;\n}\n</div>\n<span style=\"color: blue;\">Type \'Error\' if code will cause an error.</span>', 'Answer here...', '', '', '', '***ans***', 36, 'input1', 1, 13),
(172, 'val_of_var_i = randint(0, 20)\naddress_of_var = hex(randint(20, 40) * 4)\n\nans = str(val_of_var_i) + \', \' + str(address_of_var) + \', \' + str(address_of_var) + \', \' +  str(val_of_var_i)', 'Given that the address of <span style=\"color: blue;\">var_i</span> is ***address_of_var*** .What\'s the output to the following code:\n<div class=\"my_code\">\nvoid main()\n{\n	int var_i = ***val_of_var_i***;\n	int *var_p = &var_i;\n	printf(\"%d, %p, %p, %d\", var_i, var_p, &var_i, *var_p);\n}\n</div>', '', '', '', '', '***ans***', 4, 'input1', 1, 5),
(174, 'data_type_list = [\'int\', \'float\', \'char\']\ncurr_data_type = choice(data_type_list)\n\nsize_list = [4, 8]\ncurr_size = choice(size_list)\n\nadd_value = randint(2, 7)\naddress_random = randint(10, 50) * 4\n\nin_case_not_char = \'; also given that a(n) \' + curr_data_type + \' is \' + str(curr_size) + \' bytes\'\n\nif curr_data_type == \'char\':\n	curr_size = 1\n	in_case_not_char = \'\'\n\nans = address_random + curr_size * add_value', 'Given that the address of <span style=\"color:blue;\">my_var</span> is ***address_random*** (in decimal)***in_case_not_char***. What\'s the output of the following code:\n<div class=\"my_code\">\nvoid main()\n{\n	***curr_data_type*** *my_var;\n	printf(\"%p\", my_var + ***add_value***); // Type address in decimal\n}\n</div>', 'Answer here...', '', '', '', '***ans***', 6, 'input1', 1, 14),
(175, 'data_type_list = [\'int\', \'float\', \'char\']\ncurr_data_type = choice(data_type_list)\n\nsize_list = [4, 8]\ncurr_size = choice(size_list)\n\nrandom_array_size = randint(2, 7) * 5\n\nif curr_data_type == \'char\':\n	curr_size = 1\n\nans = curr_size * random_array_size', 'Given that the size of a(n) ***curr_data_type*** is ***curr_size*** bytes. What\'s the output of the following code:\n\n<div class=\"my_code\">\nvoid main()\n{\n	***curr_data_type*** my_array[***random_array_size***];\n	printf(\"%lu\", sizeof(my_array));\n}\n</div>', 'Answer here...', '', '', '', '***ans***', 6, 'input1', 1, 14),
(176, 'data_type_list = [\'int\', \'float\', \'char\']\ncurr_data_type = choice(data_type_list)\n\nsize_list = [4, 8]\ncurr_size = choice(size_list)\n\nrandom_array_size = randint(2, 80)# * 5\n\nif curr_data_type == \'char\':\n	curr_size = 1\n\nans = curr_data_type + \' my_array[\' + str(random_array_size) + \'];\'', 'Type the code to declare/create an array <span style=\"color:blue;\">my_array</span> of type ***curr_data_type*** of size ***random_array_size*** elements', 'Answer here...', '', '', '', '***ans***', 6, 'input1', 1, 14),
(177, 'data_type_list = [\'int\', \'float\']\ncurr_data_type = choice(data_type_list)\n\ncurr_data_type = \'int\' \n\nrandom_address = randint(4, 20) * 4\n\nsize_list = [4, 8]\ncurr_size = choice(size_list)\n\nmult = randint(2, 5)\nrandom_shift = randint(0, 9)\n\nmy_first_arr = [0*mult, 1*mult, 2*mult, 3*mult, 4*mult, 5*mult, 6*mult, 7*mult, 8*mult, 9*mult]\n\nans = str(random_address + curr_size * random_shift) + \', \' + str(my_first_arr[random_shift])', 'Given that the size of a(n) ***curr_data_type*** is ***curr_size*** bytes, and address of \'my_array\' is ***random_address*** (in decimal). What\'s the output of the following code:\n\n<div class=\"my_code\">\nvoid main()\n{\n	***curr_data_type*** my_array[10];\n	int counter;\n	for (counter = 0; counter < 10; counter++)\n		my_array[counter] = counter * ***mult***;\n\n	printf(\"%p, %d\", (my_array + ***random_shift***), *(my_array + ***random_shift***));\n	// Type answer of address in decimal\n}\n</div>', 'Answer here...', '', '', '', '***ans***', 4, 'input1', 1, 14),
(178, 'data_type_list = [\'int\', \'float\']\ncurr_data_type = choice(data_type_list)\n\ncurr_data_type = \'int\'\n\nrandom_value = randint(50, 200)\n\nsize_list = [4, 8]\ncurr_size = choice(size_list)\n\nnotation_pick = choice([\'using the brackets notation\', \'by explicitly dereferencing the array\'])\n\nmult = randint(2, 5)\nrandom_shift = randint(1, 9)\n\nmy_first_arr = [0*mult, 1*mult, 2*mult, 3*mult, 4*mult, 5*mult, 6*mult, 7*mult, 8*mult, 9*mult]\n\nif notation_pick == \'using the brackets notation\':\n	ans = \'my_array[\' + str(random_shift) + \'] = \' + str(random_value) + \';\'\nelse:\n	ans = \'*(my_array + \' + str(random_shift) + \') = \' + str(random_value) + \';\'\n', 'Write code to change the element at index ***random_shift*** for the array <span style=\"color:blue;\">my_array</span> ***notation_pick*** to the value ***random_value***', 'Answer here...', '', '', '', '***ans***', 4, 'input1', 1, 14),
(180, 'def get_line(_num_of_lines, _curr_line, _reg_ini, _reg_not, _reg_all, _reg_array, _curr_array):\n    # This is the first line that we\'re generating\n    #\n    if _curr_line > 1:\n        target_reg = choice(_reg_all)\n        command = choice([\'load word\', \'load word\', \'initialize\', \'add\', \'add\', \'sub\', \'sub\', \'sw\', \'sw\'])\n\n        if command == \'load word\':\n            offset_rand = randint(0, 4) * 4\n            line = \'lw \' + target_reg + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _reg_ini[target_reg] = int(_curr_array[offset_rand//4])\n        elif command == \'initialize\':\n            value_rand = randint(2, 9)\n            _reg_ini[target_reg] = value_rand\n            line = \'addi \' + target_reg + \', $zero, \' + str(value_rand)\n        elif command == \'add\':\n            reg_source_1 = choice(_reg_ini.keys())\n            reg_source_2 = choice(_reg_ini.keys())\n            line = \'add \' + target_reg + \', \' + reg_source_1 + \', \' + reg_source_2\n            _reg_ini[target_reg] = _reg_ini[reg_source_1] + _reg_ini[reg_source_2]\n        elif command == \'sub\':\n            reg_source_1 = choice(_reg_ini.keys())\n            reg_source_2 = choice(_reg_ini.keys())\n            line = \'sub \' + target_reg + \', \' + reg_source_1 + \', \' + reg_source_2\n            _reg_ini[target_reg] = _reg_ini[reg_source_1] - _reg_ini[reg_source_2]\n        elif command == \'sw\':\n            offset_rand = randint(0, 4) * 4\n            reg_to_be_loaded = choice(_reg_ini.keys())\n            line = \'sw \' + reg_to_be_loaded + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _curr_array[offset_rand//4] = _reg_ini[reg_to_be_loaded]\n    else:\n        target_reg = choice(_reg_all)\n        command = choice([\'load word\', \'initialize\'])\n\n        if command == \'load word\':\n            offset_rand = randint(0, 4) * 4\n            line = \'lw \' + target_reg + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _reg_ini[target_reg] = int(_curr_array[offset_rand//4])\n        else:\n            value_rand = randint(2, 9)\n            _reg_ini[target_reg] = value_rand\n            line = \'addi \' + target_reg + \', $zero, \' + str(value_rand)\n\n    return line\n\nreg_ini = {}\n\n# We\'ll assume array size is 5\n#\ncurr_array = [str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20))]\ncurr_array_str = \'[\' + \', \'.join(curr_array) + \']\'\n\narray_size = 5\n\n# We\'ll reserve $s0 for the array pointer\n#\nreg_array_reserved = \'$s0\'\n\nreg_not = [\'$s0\', \'$s1\', \'$s2\', \'$s3\', \'$s4\', \'$s5\', \'$s6\', \'$s7\',\n           \'$t0\', \'$t1\', \'$t2\', \'$t3\', \'$t4\', \'$t5\', \'$t6\', \'$t7\']\nreg_not.remove(reg_array_reserved)\n\n\nreg_all = [\'$s0\', \'$s1\', \'$s2\', \'$s3\', \'$s4\', \'$s5\', \'$s6\', \'$s7\',\n           \'$t0\', \'$t1\', \'$t2\', \'$t3\', \'$t4\', \'$t5\', \'$t6\', \'$t7\']\nreg_all.remove(reg_array_reserved)\n\n\nnum_of_lines = randint(3, 10)\nall_lines = []\nfor curr_line in range(num_of_lines):\n    all_lines.append(get_line(num_of_lines, curr_line, reg_ini, reg_not, reg_all, reg_array_reserved, curr_array))\n\n\nmips_code = \'\\n\'.join(all_lines)\n\nlist_of_ini = reg_ini.keys()[:]\nlist_of_ini.sort()\nquestion_output = \', \'.join(list_of_ini)\n\nlist_of_answers = []\n\nfor curr_register in list_of_ini:\n    list_of_answers.append(str(reg_ini[curr_register]))\n\nall_answers = \', \'.join(list_of_answers)', 'Given that the array <span style=\"color:blue;\">my_array</span> contains the following elements ***curr_array_str***; also, assume that the register <span style=\"color:blue;\">$s0</span> points to (or contains the address of) the first element in the array. List the values of these registers ***question_output*** in the given order (separate each value by a comma) after executing the code below:\n<div class=\"my_code\">\n***mips_code***\n</div>', 'Separate each value by a comma followed by a space', '', '', '', '***all_answers***', 20, 'input1', 1, 21),
(181, 'def get_line(_num_of_lines, _curr_line, _reg_ini, _reg_not, _reg_all, _reg_array, _curr_array):\n    # This is the first line that we\'re generating\n    #\n    if _curr_line > 1:\n        target_reg = choice(_reg_all)\n        command = choice([\'load word\', \'load word\', \'initialize\', \'add\', \'sub\', \'sw\', \'sw\', \'sw\'])\n\n        if command == \'load word\':\n            offset_rand = randint(0, 4) * 4\n            line = \'lw \' + target_reg + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _reg_ini[target_reg] = int(_curr_array[offset_rand//4])\n        elif command == \'initialize\':\n            value_rand = randint(2, 9)\n            _reg_ini[target_reg] = value_rand\n            line = \'addi \' + target_reg + \', $zero, \' + str(value_rand)\n        elif command == \'add\':\n            reg_source_1 = choice(_reg_ini.keys())\n            reg_source_2 = choice(_reg_ini.keys())\n            line = \'add \' + target_reg + \', \' + reg_source_1 + \', \' + reg_source_2\n            _reg_ini[target_reg] = _reg_ini[reg_source_1] + _reg_ini[reg_source_2]\n        elif command == \'sub\':\n            reg_source_1 = choice(_reg_ini.keys())\n            reg_source_2 = choice(_reg_ini.keys())\n            line = \'sub \' + target_reg + \', \' + reg_source_1 + \', \' + reg_source_2\n            _reg_ini[target_reg] = _reg_ini[reg_source_1] - _reg_ini[reg_source_2]\n        elif command == \'sw\':\n            offset_rand = randint(0, 4) * 4\n            reg_to_be_loaded = choice(_reg_ini.keys())\n            line = \'sw \' + reg_to_be_loaded + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _curr_array[offset_rand//4] = str(_reg_ini[reg_to_be_loaded])\n    else:\n        target_reg = choice(_reg_all)\n        command = choice([\'load word\', \'initialize\'])\n\n        if command == \'load word\':\n            offset_rand = randint(0, 4) * 4\n            line = \'lw \' + target_reg + \', \' + str(offset_rand) + \'(\' + _reg_array + \')\'\n            _reg_ini[target_reg] = int(_curr_array[offset_rand//4])\n        else:\n            value_rand = randint(2, 9)\n            _reg_ini[target_reg] = value_rand\n            line = \'addi \' + target_reg + \', $zero, \' + str(value_rand)\n\n    return line\n\nreg_ini = {}\n\n# We\'ll assume array size is 5\n#\ncurr_array = [str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20)), str(randint(5, 20))]\ncurr_array_str = \'[\' + \', \'.join(curr_array) + \']\'\n\narray_size = 5\n\n# We\'ll reserve $s0 for the array pointer\n#\nreg_array_reserved = \'$s0\'\n\nreg_not = [\'$s0\', \'$s1\', \'$s2\', \'$s3\', \'$s4\', \'$s5\', \'$s6\', \'$s7\',\n           \'$t0\', \'$t1\', \'$t2\', \'$t3\', \'$t4\', \'$t5\', \'$t6\', \'$t7\']\nreg_not.remove(reg_array_reserved)\n\n\nreg_all = [\'$s0\', \'$s1\', \'$s2\', \'$s3\', \'$s4\', \'$s5\', \'$s6\', \'$s7\',\n           \'$t0\', \'$t1\', \'$t2\', \'$t3\', \'$t4\', \'$t5\', \'$t6\', \'$t7\']\nreg_all.remove(reg_array_reserved)\n\n\nnum_of_lines = randint(3, 10)\nall_lines = []\nfor curr_line in range(num_of_lines):\n    all_lines.append(get_line(num_of_lines, curr_line, reg_ini, reg_not, reg_all, reg_array_reserved, curr_array))\n\n\nmips_code = \'\\n\'.join(all_lines)\n\nlist_of_ini = reg_ini.keys()[:]\nlist_of_ini.sort()\nquestion_output = \', \'.join(list_of_ini)\n\nlist_of_answers = []\n\nfor curr_register in list_of_ini:\n    list_of_answers.append(str(reg_ini[curr_register]))\n\n#all_answers = \', \'.join(list_of_answers)\n\nall_answers = \', \'.join(curr_array)', 'Given that the array <span style=\"color:blue;\">my_array</span> contains the following elements ***curr_array_str***; also, assume that the register <span style=\"color:blue;\">$s0</span> points to (or contains the address of) the first element in the array. List the values of <span style=\"color:blue;\">my_array</span> after executing the code below (don\'t include the square brackets and separate each value by a comma followed by a space):\n<div class=\"my_code\">\n***mips_code***\n</div>', 'No square brackets. Separate values by commas followed by space', '', '', '', '***all_answers***', 15, 'input1', 1, 21),
(182, 'def generate_expression(_target_reg, _allowed_vars, _all_mips_lines):\n    rand_num = randint(5, 20)\n    _allowed_vars.append(str(rand_num))\n    shuffle(_allowed_vars)\n    location_of_num = _allowed_vars.index(str(rand_num))\n    if location_of_num == 0:\n        _allowed_vars.append(_allowed_vars[1])\n        _allowed_vars.append(_allowed_vars[0])\n        _allowed_vars.pop(0)\n        _allowed_vars.pop(1)\n    for list_el in range(len(_allowed_vars) - 1):\n        rand_operator = choice([\'+\', \'-\'])\n        _allowed_vars.insert(list_el*2 + 1, rand_operator)\n\n    for list_el in range(len(_allowed_vars)//2):\n        if _allowed_vars[list_el * 2 + 1] == \'+\' and _allowed_vars[list_el * 2 + 2] == str(rand_num):\n            if list_el == 0:\n                _all_mips_lines.append(\'addi \' + _target_reg + \', $\' + _allowed_vars[list_el * 2] + \', \' + str(rand_num))\n            else:\n                _all_mips_lines.append(\'addi \' + _target_reg + \', \' + _target_reg + \', \' + str(rand_num))\n\n        elif _allowed_vars[list_el*2 + 1] == \'-\' and _allowed_vars[list_el * 2 + 2] == str(rand_num):\n            if list_el == 0:\n                _all_mips_lines.append(\'addi \' + _target_reg + \', $\' + _allowed_vars[list_el * 2] + \', \' + str(-1 * rand_num))\n            else:\n                _all_mips_lines.append(\'addi \' + _target_reg + \', \' + _target_reg + \', \' + str(-1 * rand_num))\n\n        # That means it\'s either r + r or r - r\n        #\n        elif _allowed_vars[list_el*2 + 1] == \'+\':\n            if list_el == 0:\n                _all_mips_lines.append(\'add \' + _target_reg + \', $\' + _allowed_vars[list_el * 2] + \', $\' + _allowed_vars[list_el * 2 + 2])\n            else:\n                _all_mips_lines.append(\'add \' + _target_reg + \', \' + _target_reg + \', $\' + _allowed_vars[list_el * 2 + 2])\n\n        elif _allowed_vars[list_el*2 + 1] == \'-\':\n            if list_el == 0:\n                _all_mips_lines.append(\'sub \' + _target_reg + \', $\' + _allowed_vars[list_el * 2] + \', $\' + _allowed_vars[list_el * 2 + 2])\n            else:\n                _all_mips_lines.append(\'sub \' + _target_reg + \', \' + _target_reg + \', $\' + _allowed_vars[list_el * 2 + 2])\n\ntarget_var = \'$s0\'\nallowed_vars = []\n\nall_lines = []\nall_mips_lines = []\n\nfor el_ini in range(randint(1, 4)):\n    rand_value = str(randint(5, 20))\n    all_lines.append(\'int s\' + str(el_ini+1) + \' = \' + rand_value + \';\')\n    allowed_vars.append(\'s\' + str(el_ini+1))\n    all_mips_lines.append(\'addi \' + allowed_vars[-1] + \', $zero, \' + rand_value)\n\ngenerate_expression(target_var, allowed_vars, all_mips_lines)\n\nall_lines.append(\'int result = \' + \' \'.join(allowed_vars) + \';\')\n\nc_code = \'\\n\\t\'.join(all_lines)\n\nans = \'\\n\'.join(all_mips_lines)', 'Convert the following C code to MIPS. Assume the variable <span style=\"color: blue;\">result</span> will correspond to register $s0. Write your answer on a piece of paper then compare it with correct answer.\n<div class=\"my_code\">\nvoid main()\n{\n	***c_code***	\n}\n</div>', '', '', '', '', '***ans***', 10, 'no_input', 1, 22),
(185, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'How many bits do we need to identify a particular register; given we have ***rand_num*** registers, numbered from 0 to ***rand_num-1***', 'Answer here...', '', '', '', '***val***', 4, 'input1', 1, 23),
(186, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'Assembly language is a:', 'High-level Programming Language', 'Low-level Programming Language', '', '', 'Low-level Programming Language', 2, 'multiple2', 1, 23),
(187, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'Each assembly language is specific to a particular computer architecture.', 'True', 'False', '', '', 'True', 2, 'multiple2', 1, 23),
(188, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'Each type of processor has its own assembly language.', 'True', 'False', '', '', 'True', 2, 'multiple2', 1, 23),
(189, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'The high-level programming language C is architecture-dependent.', 'True', 'False', '', '', 'False', 2, 'multiple2', 1, 23),
(190, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'In MIPS-32 (32-bit MIPS), each pure instruction will be assembled to 32 bits.', 'Always true', 'Most of the time true', '', '', 'Always true', 2, 'multiple2', 1, 23),
(191, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'In MIPS-32 (32-bit MIPS), the size of each register is 32 bits.', 'Always true', 'Always false', 'Most of the time true', 'Depends on CPU', 'Always true', 2, 'multiple4', 1, 23),
(192, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'What\'s the name of the component that translates C to Assembly?', 'Answer here...', '', '', '', 'Compiler', 2, 'input1', 1, 23),
(193, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'What\'s the name of the component that translates Assembly to Machine Language?', 'Answer here...', '', '', '', 'Assembler', 2, 'input1', 1, 23),
(194, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'What does RISC stand for (the first letter of each word should be capitalized)?', 'The first letter of each word should be capitalized', '', '', '', 'Reduced Instruction Set Computing', 2, 'input1', 1, 23),
(195, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'What does CISC stand for (the first letter of each word should be capitalized)?', 'The first letter of each word should be capitalized', '', '', '', 'Complex Instruction Set Computing', 2, 'input1', 1, 23),
(196, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'How many bytes in half a word?', 'Answer here...', '', '', '', '2', 2, 'input1', 1, 23),
(197, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'How many bytes in a word?', 'Answer here...', '', '', '', '4', 2, 'input1', 1, 23),
(198, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'How many bits in a byte?', 'Answer here...', '', '', '', '8', 2, 'input1', 1, 23);
INSERT INTO `main_quizquestion` (`id`, `python_code`, `questionText`, `candidateAnswer1`, `candidateAnswer2`, `candidateAnswer3`, `candidateAnswer4`, `correctAnswer`, `repeat`, `quizType`, `author_id`, `subItem_id`) VALUES
(199, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'In modern computers, memory is bit-addressable; in other words, one particular address refers to one particular bit.', 'True', 'False', '', '', 'False', 2, 'multiple2', 1, 23),
(200, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'What is the special-purpose register that holds/contains the address of the instruction that will be fetched next.', 'PC', 'CP', 'FP', 'SP', 'PC', 2, 'multiple4', 1, 23),
(201, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'In the context of registers, what does PC stand for (the first letter of each word should be capitalized)?', 'Answer here...', '', '', '', 'Program Counter', 2, 'input1', 1, 23),
(202, 'val = randint(2, 6)\nrand_num = 2 ** val\n', 'Accessing registers is extremely fast, almost as fast as accessing the random access memory (RAM).', 'True', 'False', '', '', 'False', 2, 'multiple2', 1, 23),
(203, 'def convert_c_to_mips(_all_lines):\n    	ans_all = []\n    	oper = _all_lines[0].split(\' \')\n\n    	if oper[2] == \'<\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n		ans_all.append(\'beq $t0, $zero, ELSE\')\n\n    	elif oper[2] == \'>\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'beq $t0, $zero, ELSE\')\n\n    	elif oper[2] == \'==\':\n        	ans_all.append(\'bne $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'!=\':\n        	ans_all.append(\'beq $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'<=\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'bne $t0, $zero, ELSE\')\n\n    	elif oper[2] == \'>=\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n        	ans_all.append(\'bne $t0, $zero, ELSE\')\n\n\n    	for line_num in range(1, len(_all_lines)):\n        	if _all_lines[line_num] == \'else\':\n            		ans_all.append(\'j AFTER\')\n            		ans_all.append(\'ELSE:\')\n        	elif _all_lines[line_num] != \'{\' and _all_lines[line_num] != \'}\':\n            		ans_all.append(convert_simple_line_c_to_mips(_all_lines[line_num]))\n\n    	ans_all.append(\'AFTER:\')\n\n    	corr_answer_local = \'\\n\'.join(ans_all)\n	return corr_answer_local\n\nall_vars = [\'s0\', \'s1\', \'s2\', \'s3\', \'s4\', \'s5\', \'s6\', \'s7\',\n            \'t0\', \'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\', \'t7\']\n\nall_lines = []\n\nall_op = [\' < \', \' > \', \' >= \', \' <= \', \' == \', \' != \']\n\nshuffle(all_vars)\nf_var = all_vars[0]\ns_var = all_vars[1]\no_rand = choice(all_op)\n\nall_lines.append(\'if (\' + f_var + o_rand + s_var + \')\')\nall_lines.append(\"{\")\nfor r_num in range(randint(1, 2)):\n    all_lines.append(\"\\t\" + choice(all_vars) + \' = \' + choice(all_vars) + choice([\' + \', \' - \']) + choice([str(randint(5, 20)), choice(all_vars)]) + \';\')\nall_lines.append(\"}\")\nall_lines.append(\"else\")\nall_lines.append(\"{\")\nfor r_num in range(randint(1, 2)):\n    all_lines.append(\"\\t\" + choice(all_vars) + \' = \' + choice(all_vars) + choice([\' + \', \' - \']) + choice([str(randint(5, 20)), choice(all_vars)]) + \';\')\nall_lines.append(\"}\")\n\nquestion_text = \'\\n\'.join(all_lines)\n\ncorr_answer = convert_c_to_mips(all_lines)', 'Convert the following C to MIPS:\n<div class=\"my_code\">\n***question_text***\n</div>\n<br/>\nWrite your answer on a piece of paper then compare it with correct answer.', '', '', '', '', '***corr_answer***', 18, 'no_input', 1, 24),
(204, 'def convert_c_to_mips(_all_lines):\n    	ans_all = [\'BEG:\']\n    	oper = _all_lines[0].split(\' \')\n\n    	if oper[2] == \'<\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n        	ans_all.append(\'beq $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'>\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'beq $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'==\':\n        	ans_all.append(\'bne $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'!=\':\n        	ans_all.append(\'beq $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'<=\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'bne $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'>=\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n        	ans_all.append(\'bne $t0, $zero, AFTER\')\n\n    	for line_num in range(1, len(_all_lines)):\n        	if _all_lines[line_num] == \'}\':\n            		ans_all.append(\'j BEG\')\n            		ans_all.append(\'AFTER:\')\n        	elif _all_lines[line_num] != \'{\' and _all_lines[line_num] != \'}\':\n            		ans_all.append(convert_simple_line_c_to_mips(_all_lines[line_num]))\n\n	corr_answer_local = \'\\n\'.join(ans_all)\n	return corr_answer_local\n\n\nall_vars = [\'s0\', \'s1\', \'s2\', \'s3\', \'s4\', \'s5\', \'s6\', \'s7\',\n            \'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\', \'t7\']\n\nall_lines = []\n\nall_op = [\' < \', \' > \', \' >= \', \' <= \']\n\nshuffle(all_vars)\nf_var = all_vars[0]\ns_var = all_vars[1]\no_rand = choice(all_op)\n\nall_lines.append(\'while (\' + f_var + o_rand + s_var + \')\')\nall_lines.append(\"{\")\nfor r_num in range(randint(1, 3)):\n    all_lines.append(\"\\t\" + choice(all_vars) + \' = \' + choice(all_vars) + choice([\' + \', \' - \']) + choice([str(randint(5, 20)), choice(all_vars)]) + \';\')\n\nif o_rand == \' < \' or o_rand == \' <= \':\n    all_lines.append(\"\\t\" + f_var + \" = \" + f_var + \" + \" + str(randint(1, 5)) + \';\')\nelif o_rand == \' > \' or o_rand == \' >= \':\n    all_lines.append(\"\\t\" + f_var + \" = \" + f_var + \" - \" + str(randint(1, 5)) + \';\')\n\nall_lines.append(\"}\")\n\nquestion_text = \'\\n\'.join(all_lines)\n\ncorr_answer = convert_c_to_mips(all_lines)', 'Convert the following C to MIPS:\n<div class=\"my_code\">\n***question_text***\n</div>\n\n<br/>\nWrite your answer on a piece of paper then compare it with correct answer.', '', '', '', '', '***corr_answer***', 12, 'no_input', 1, 24),
(205, 'def convert_c_to_mips(_all_lines):\n    	ans_all = []\n    	ans_all.append(convert_simple_line_c_to_mips(_all_lines[0]))\n\n    	ans_all.append(\'BEG:\')\n\n    	oper = _all_lines[1].split(\' \')\n\n    	if oper[2] == \'<\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n        	ans_all.append(\'beq $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'>\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'beq $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'==\':\n        	ans_all.append(\'bne $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'!=\':\n        	ans_all.append(\'beq $\' + oper[1][1:] + \', $\' + oper[3][:-1] + \", ELSE\")\n\n    	elif oper[2] == \'<=\':\n        	ans_all.append(\'slt $t0, $\' + oper[3][:-1] + \', $\' + oper[1][1:])\n        	ans_all.append(\'bne $t0, $zero, AFTER\')\n\n    	elif oper[2] == \'>=\':\n        	ans_all.append(\'slt $t0, $\' + oper[1][1:] + \', $\' + oper[3][:-1])\n        	ans_all.append(\'bne $t0, $zero, AFTER\')\n\n    	for line_num in range(2, len(_all_lines)):\n        	if _all_lines[line_num] == \'}\':\n            		ans_all.append(\'j BEG\')\n            		ans_all.append(\'AFTER:\')\n        	elif _all_lines[line_num] != \'{\' and _all_lines[line_num] != \'}\':\n            		ans_all.append(convert_simple_line_c_to_mips(_all_lines[line_num]))\n\n	print(ans_all)\n	return \'\\n\'.join(ans_all)\n	\nall_vars = [\'s0\', \'s1\', \'s2\', \'s3\', \'s4\', \'s5\', \'s6\', \'s7\',\n            \'t0\', \'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\', \'t7\']\n\ncontrol_var = choice(all_vars)\nall_vars.remove(control_var)\n\nall_lines = []\nall_lines_to_print = []\n\nall_op = [\' < \', \' > \', \' >= \', \' <= \']\n\nshuffle(all_vars)\nf_var = all_vars[0]\ns_var = all_vars[1]\no_rand = choice(all_op)\n\ncounter_var = randint(5, 10)\no_inside_if_rand = choice([\' + \', \' - \'])\nincrement_rand = randint(1, 3)\n\nfor_line = \'for (\' + control_var +\' = \' + str(counter_var) + \'; \' + control_var + o_rand +  s_var + \'; \' + control_var + \" = \" + control_var + o_inside_if_rand + str(increment_rand) + \")\"\n\nall_lines_to_print.append(\'int \' + control_var + \';\')\nall_lines_to_print.append(for_line)\n\nall_lines.append(\'int \' + control_var + \' = \' + str(counter_var) + \';\')\nall_lines.append(\'while (\' + control_var + o_rand + s_var + \')\')\n\nall_lines.append(\"{\")\nall_lines_to_print.append(\"{\")\n\nfor r_num in range(randint(1, 3)):\n    all_lines_to_print.append(\"\\t\" + choice(all_vars) + \' = \' + choice(all_vars) + choice([\' + \', \' - \']) + choice([str(randint(5, 20)), choice(all_vars)]) + \';\')\n    all_lines.append(all_lines_to_print[-1])\n\n\nif o_rand == \' < \' or o_rand == \' <= \':\n    all_lines_to_print.append(\"\\t\" + f_var + \" = \" + f_var + \" + \" + str(randint(1, 5)) + \';\')\n    all_lines.append(all_lines_to_print[-1])\n\n\nelif o_rand == \' > \' or o_rand == \' >= \':\n    all_lines_to_print.append(\"\\t\" + f_var + \" = \" + f_var + \" - \" + str(randint(1, 5)) + \';\')\n    all_lines.append(all_lines_to_print[-1])\n\nall_lines.append(\"\\t\" + control_var + \" = \" + control_var + o_inside_if_rand + str(increment_rand) + \';\')\n\nall_lines.append(\"}\")\nall_lines_to_print.append(\"}\")\n\nquestion_text = \'\\n\'.join(all_lines_to_print)\n\n\ncorr_answer = convert_c_to_mips(all_lines)', 'Convert the following C to MIPS:\n<div class=\"my_code\">\n***question_text***\n</div>\n\n<br/>\nWrite your answer on a piece of paper then compare it with correct answer.', '', '', '', '', '***corr_answer***', 12, 'no_input', 1, 25),
(206, 'def convert_c_to_mips(_all_lines):\n    array_size = _all_lines[0].split(\']\')[0][-1]\n    array_type = _all_lines[0].split(\' \')[0].replace(\'\\t\',\'\')\n\n    inst_str = \'\'\n\n    if array_type == \'int\':\n        multiplier_val = 4\n        inst_str = \'sw \'\n    elif array_type == \'short\':\n        multiplier_val = 2\n        inst_str = \'sh \'\n    elif array_type == \'char\':\n        multiplier_val = 1\n        inst_str = \'sb \'\n\n    ans_all = []\n\n    ans_all.append(\'addi $sp, $sp, -\' + str(int(array_size) * multiplier_val))\n\n    for curr_line in range(1, len(_all_lines)):\n        ans_all.append(\'addi $t0, $zero, \' + _all_lines[curr_line].split(\' \')[-1])\n        ans_all.append(inst_str + \'$t0, \' + str((curr_line-1) * multiplier_val) + \'($sp)\')\n\n    return \'\\n\'.join(ans_all)\n\nall_vars = [\'s0\', \'s1\', \'s2\', \'s3\', \'s4\', \'s5\', \'s6\', \'s7\',\n            \'t0\', \'t1\', \'t2\', \'t3\', \'t4\', \'t5\', \'t6\', \'t7\']\n\n\n\n\ncontrol_var = choice(all_vars)\nall_vars.remove(control_var)\n\nall_lines = []\nall_lines_to_print = []\n\nall_op = [\' < \', \' > \', \' >= \', \' <= \']\n\nshuffle(all_vars)\nf_var = all_vars[0]\ns_var = all_vars[1]\no_rand = choice(all_op)\n\ncounter_var = randint(2, 4)\no_inside_if_rand = choice([\' + \', \' - \'])\nincrement_rand = randint(1, 3)\n\nfor_line = \'void main()\'\n\nall_lines_to_print.append(for_line)\nall_lines_to_print.append(\"{\")\n\nall_lines_to_print.append(\"\\t\" + choice([\'int\', \'char\', \'short int\']) + \" my_array[\" + str(counter_var) + \"];\")\nall_lines.append(all_lines_to_print[-1])\n\nfor num, r_num in enumerate(range(counter_var)):\n    all_lines_to_print.append(\"\\tmy_array[\" + str(num) + \"] = \" + str(randint(5, 20)) + \";\")\n    all_lines.append(all_lines_to_print[-1])\n\nall_lines_to_print.append(\"}\")\n\nquestion_text = \'\\n\'.join(all_lines_to_print)\n\n\ncorr_answer = convert_c_to_mips(all_lines)', 'Assuming that the size of a <span style=\"color: blue;\">short int is 2 bytes</span>, and the size of an <span style=\"color: green;\">int is 4 bytes</span>. Convert the following C to MIPS:\n<div class=\"my_code\">\n***question_text***\n</div>\n\n<br/>\nWrite your answer on a piece of paper then compare it with correct answer.', '', '', '', '', '***corr_answer***', 9, 'no_input', 1, 25),
(208, 'all_instructions = [Mips_instruction(\"add\", \"000000\", \"100000\", \"R\"), \nMips_instruction(\"sub\", \"000000\", \"100010\", \"R\"), \nMips_instruction(\"addi\", \"001000\", \"\", \"I\"), Mips_instruction(\"and\", \"000000\", \"100100\", \"R\"),\nMips_instruction(\"andi\", \"001100\", \"\", \"I\"), Mips_instruction(\"or\", \"000000\", \"100101\", \"R\"),\nMips_instruction(\"ori\", \"001101\", \"\", \"I\"), Mips_instruction(\"slt\", \"000000\", \"101010\", \"R\"),\nMips_instruction(\"slti\", \"001010\", \"\", \"I\"), Mips_instruction(\"lw\", \"100011\", \"\", \"I\"),\nMips_instruction(\"sw\", \"101011\", \"\", \"I\")]\n\ndef generate_random_instruction():\n    curr_inst = choice(all_instructions)\n    if curr_inst.inst_type == \"R\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        rd = choice(all_registers)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, rd, 0)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, rd, 0)\n    elif curr_inst.inst_type == \"I\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        imm = randint(-20, 20)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, 0, imm)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, 0, imm)\n\n    return [inst_mips, inst_bin]\n\nq_s = generate_random_instruction()\nquestion = q_s[0]\nans = q_s[1]', 'What\'s the binary sequence that corresponds to the following MIPS instruction (separate fields by single spaces):\n<div class=\"my_code\">\n***question***\n</div>', '', '', '', '', '***ans***', 22, 'input1', 1, 28),
(209, 'all_instructions = [Mips_instruction(\"add\", \"000000\", \"100000\", \"R\"), \nMips_instruction(\"sub\", \"000000\", \"100010\", \"R\"), \nMips_instruction(\"addi\", \"001000\", \"\", \"I\"), Mips_instruction(\"and\", \"000000\", \"100100\", \"R\"),\nMips_instruction(\"andi\", \"001100\", \"\", \"I\"), Mips_instruction(\"or\", \"000000\", \"100101\", \"R\"),\nMips_instruction(\"ori\", \"001101\", \"\", \"I\"), Mips_instruction(\"slt\", \"000000\", \"101010\", \"R\"),\nMips_instruction(\"slti\", \"001010\", \"\", \"I\"), Mips_instruction(\"lw\", \"100011\", \"\", \"I\"),\nMips_instruction(\"sw\", \"101011\", \"\", \"I\")]\n\ndef generate_random_instruction():\n    curr_inst = choice(all_instructions)\n    if curr_inst.inst_type == \"R\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        rd = choice(all_registers)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, rd, 0)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, rd, 0)\n    elif curr_inst.inst_type == \"I\":\n        rs = choice(all_registers)\n        rt = choice(all_registers)\n        imm = randint(-20, 20)\n        inst_mips = curr_inst.get_mips_inst(rs, rt, 0, imm)\n        inst_bin = curr_inst.get_binary_inst(rs, rt, 0, imm)\n\n    return [inst_mips, inst_bin]\n\nq_s = generate_random_instruction()\nquestion = q_s[1]\nans = q_s[0]', 'What\'s the MIPS instruction that correspond to the following binary:\n<div class=\"my_code\">\n***question***\n</div>', '', '', '', '', '***ans***', 22, 'input1', 1, 29),
(210, 'truth_values = [\'False\', \'True\']\n\np_value = randint(0, 1)\nq_value = randint(0, 1)\nr_value = randint(0, 1)\n\n# (p and q) and (r and q) or ~q\n#\ncurr_v = (p_value and q_value) and (r_value and q_value) or (not q_value)\ncurr_v = curr_v and curr_v\nif curr_v:\n	ans = \'True\'\nelse:\n	ans = \'False\'', 'What\'s the truth value for the output, given the following:\n<div style=\"text-align:center; width: 100%;\">\n<table style=\"width: 80%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\">\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">Proposition</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">P</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">Q</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">R</td>\n	</tr>\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">Truth Value</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***truth_values[p_value]***</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***truth_values[q_value]***</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***truth_values[r_value]***</td>\n	</tr>\n</table>\n</div>\n<div style=\"margin-top: 10px;\">\n<img src=\"static/main/img/circuits/circuit01.png\" alt=\"Smiley face\" width=\"100%\">\n</div>', 'True', 'False', '', '', '***ans***', 6, 'multiple2', 1, 32),
(211, 'truth_values = [\'False\', \'True\']\n\np_value = randint(0, 1)\nq_value = randint(0, 1)\nr_value = randint(0, 1)\n\n# (p and q) and (r and q) or ~q\n#\ns_truth = (p_value and q_value) and (r_value or q_value)\ncurr_v = (s_truth and q_value) and (not q_value or s_truth)\nif curr_v:\n	ans = \'True\'\nelse:\n	ans = \'False\'', 'What\'s the truth value for the output, given the following:\n<div style=\"text-align:center; width: 100%;\">\n<table style=\"width: 80%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\">\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">Proposition</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">P</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">Q</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">R</td>\n	</tr>\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">Truth Value</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***truth_values[p_value]***</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***truth_values[q_value]***</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***truth_values[r_value]***</td>\n	</tr>\n</table>\n</div>\n<div style=\"margin-top: 10px;\">\n<img src=\"static/main/img/circuits/circuit02.png\" alt=\"Smiley face\" width=\"100%\">\n</div>', 'True', 'False', '', '', '***ans***', 6, 'multiple2', 1, 32),
(212, 'truth_values = [\'False\', \'True\']\n\np_value = randint(0, 1)\nq_value = randint(0, 1)\nr_value = randint(0, 1)\n\n# (p and q) and (r and q) or ~q\n#\ns_truth = (p_value and q_value) and (r_value or q_value)\ncurr_v = (s_truth and q_value) and (not q_value or s_truth)\nif q_value:\n	ans = \'True\'\nelse:\n	ans = \'False\'', 'What\'s the truth value for the output, given the following:\n<div style=\"text-align:center; width: 100%;\">\n<table style=\"width: 80%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\">\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">Proposition</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">P</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">Q</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">R</td>\n	</tr>\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">Truth Value</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***truth_values[p_value]***</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***truth_values[q_value]***</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***truth_values[r_value]***</td>\n	</tr>\n</table>\n</div>\n<div style=\"margin-top: 10px;\">\n<img src=\"static/main/img/circuits/circuit03.png\" alt=\"Smiley face\" width=\"100%\">\n</div>', 'True', 'False', '', '', '***ans***', 6, 'multiple2', 1, 32),
(213, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'What\'s the boolean expression that matches the table below:\n<div style=\"text-align:center; width: 100%;\">\n<table style=\"width: 80%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\">\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">P</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">Q</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">R</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">?</td>\n	</tr>\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***random_nums[0]***</td>\n	</tr>\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***random_nums[1]***</td>\n	</tr>\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***random_nums[2]***</td>\n	</tr>\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***random_nums[3]***</td>\n	</tr>\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***random_nums[4]***</td>\n	</tr>\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***random_nums[5]***</td>\n	</tr>\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">0</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***random_nums[6]***</td>\n	</tr>\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">1</td>\n		<td style=\"border: 1px lightgrey solid; padding: 10px;\">***random_nums[7]***</td>\n	</tr>\n</table>\n</div>', '***cand1***', '***cand2***', '***cand3***', '***ans***', '***ans***', 10, 'multiple4', 1, 32),
(214, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'A(n) ________ is a compound proposition that is always true, no matter what the truth values of the propositions that occur in it are.', 'Tautology', 'Tautogy', 'Contraditction', 'Implication', 'Tautology', 2, 'multiple4', 1, 28),
(215, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'A(n) ________ is a compound proposition that is always false.', 'Tautology', 'Tautogy', 'Contraditction', 'Implication', 'Contraditction', 2, 'multiple4', 1, 32),
(216, 'rand_1 = choice([\'True\', \'False\'])\nrand_2 = choice([\'True\', \'False\'])\n\nif rand_1 == rand_2:\n	ans = \'False\'\nelse:\n	ans = \'True\'', '***rand_1*** \'exclusive or\' ***rand_2*** is ', 'True', 'False', '', '', '***ans***', 4, 'multiple2', 1, 32),
(217, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'P <span style=\"color:blue;\">\'exclusive or\'</span> P is a ________', 'Tautology', 'Tautogy', 'Contraditction', 'None of the answers', 'Contraditction', 2, 'multiple4', 1, 32),
(218, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'P <span style=\"color:blue;\">\'exclusive or\'</span> ~P is a ________', 'Tautology', 'Tautogy', 'Contraditction', 'None of the answers', 'Tautology', 2, 'multiple4', 1, 32),
(219, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'P <span style=\"color:blue;\">\'or\'</span> ~P is a ________', 'Tautology', 'Tautogy', 'Contraditction', 'None of the answers', 'Tautology', 2, 'multiple4', 1, 32),
(220, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', 'P <span style=\"color:blue;\">\'and\'</span> ~P is a ________', 'Tautology', 'Tautogy', 'Contraditction', 'None of the answers', 'Contraditction', 2, 'multiple4', 1, 32),
(221, 'rand_a = choice([True, False])\nrand_b = choice([True, False])\n\nrand_op_0 = choice([True, False])\nrand_op_1 = choice([True, False])\n\nans = \'\'\n\n# op_0 = 1, op_1 = 1 (\"subtraction\") tested\nif rand_op_0 and rand_op_1:\n	if rand_a == rand_b:\n		ans = \'False (or 0)\'\n	else:\n		ans = \'True (or 1)\'	\n\n# op_0 = 1, op_1 = 0 (\"nand\") tested\nif rand_op_0 and not rand_op_1:\n	if rand_a == 0 or rand_b == 1:\n		ans = \'True (or 1)\'\n	else:\n		ans = \'False (or 0)\'\n\n# op_0 = 0, op_1 = 1 (\"add\") tested\nif not rand_op_0 and rand_op_1:\n	if rand_a == rand_b:\n		ans = \'False (or 0)\'\n	else:\n		ans = \'True (or 1)\'\n\n# op_0 = 0, op_1 = 0 (\"nor\") tested\nif not rand_op_0 and not rand_op_1:\n	if rand_a == 1 or rand_b == 1:\n		ans = \'False (or 0)\'\n	else:\n		ans = \'True (or 1)\'\n', 'What\'s the value of \'<span style=\"color: blue;\">?</span>\', given the following:\n<table style=\"width: 95%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\">\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">a</td>\n		<td style=\"border: 1px lightgrey solid;\">b</td>\n		<td style=\"border: 1px lightgrey solid;\">Operation_0</td>\n		<td style=\"border: 1px lightgrey solid;\">Operation_1</td>\n		<td style=\"border: 1px lightgrey solid;\">Result</td>\n	</tr>\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">***rand_a***</td>\n		<td style=\"border: 1px lightgrey solid;\">***rand_b***</td>\n		<td style=\"border: 1px lightgrey solid;\">***rand_op_0***</td>\n		<td style=\"border: 1px lightgrey solid;\">***rand_op_1***</td>\n		<td style=\"border: 1px lightgrey solid;\">?</td>\n	</tr>\n</table>\n</div>\n<div style=\"margin-top: 10px;\">\n	<img src=\"static/main/img/circuits/circuit04.png\" alt=\"Smiley face\" width=\"60%\">\n</div>', 'True (or 1)', 'False (or 0)', '', '', '***ans***', 16, 'multiple2', 1, 33),
(222, 'all_poss = [\n[\'True (or 1)\', \'True (or 1)\', \'X\', \'True (or 1)\', \'False (or 0)\'],\n[\'X\', \'True (or 1)\', \'True (or 1)\', \'False (or 0)\', \'True (or 1)\'],\n[\'True (or 1)\', \'True (or 1)\', \'False (or 0)\', \'X\', \'False (or 0)\'],\n[\'True (or 1)\', \'X\', \'False (or 0)\', \'False (or 0)\', \'False (or 0)\'],\n[\'X\', \'True (or 1)\', \'False (or 0)\', \'False (or 0)\', \'False (or 0)\'],\n[\'True (or 1)\', \'False (or 0)\', \'X\', \'True (or 1)\', \'True (or 1)\'],\n[\'True (or 1)\', \'False (or 0)\', \'X\', \'False (or 0)\', \'False (or 0)\'],\n[\'False (or 0)\', \'True (or 1)\', \'True (or 1)\', \'X\', \'True (or 1)\'],\n[\'False (or 0)\', \'True (or 1)\', \'X\', \'True (or 1)\', \'True (or 1)\'],\n[\'False (or 0)\', \'X\', \'True (or 1)\', \'False (or 0)\', \'True (or 1)\'],\n[\'False (or 0)\', \'False (or 0)\', \'X\', \'True (or 1)\', \'False (or 0)\'],\n[\'False (or 0)\', \'False (or 0)\', \'X\', \'False (or 0)\', \'True (or 1)\']]\n\nfirst_rand = choice(all_poss)\nsecond_rand = randint(0, 4)\n\nans = first_rand[second_rand]\nfirst_rand[second_rand] = \'?\'', 'What\'s the value of \'<span style=\"color: blue;\">?</span>\', given the following:\n<table style=\"width: 95%; border: 1px lightgrey solid; table-layout: fixed; margin: 0 auto; margin-top: 30px; margin-bottom: 30px;\">\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">a</td>\n		<td style=\"border: 1px lightgrey solid;\">b</td>\n		<td style=\"border: 1px lightgrey solid;\">Operation_0</td>\n		<td style=\"border: 1px lightgrey solid;\">Operation_1</td>\n		<td style=\"border: 1px lightgrey solid;\">Result</td>\n	</tr>\n	<tr style=\"border: 1px lightgrey solid;\">\n		<td style=\"border: 1px lightgrey solid; padding: 5px;\">***first_rand[0]***</td>\n		<td style=\"border: 1px lightgrey solid;\">***first_rand[1]***</td>\n		<td style=\"border: 1px lightgrey solid;\">***first_rand[2]***</td>\n		<td style=\"border: 1px lightgrey solid;\">***first_rand[3]***</td>\n		<td style=\"border: 1px lightgrey solid;\">***first_rand[4]***</td>\n	</tr>\n</table>\n</div>\n<div style=\"margin-top: 10px;\">\n	<img src=\"static/main/img/circuits/circuit04.png\" alt=\"Smiley face\" width=\"60%\">\n</div>', 'True (or 1)', 'False (or 0)', 'X', 'I don\'t know', '***ans***', 60, 'multiple4', 1, 34),
(223, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', '___ time/delay is the time that the input must be stable before the rising edge of the clock ', 'Setup', 'Hold', 'CLK-to-Q', 'None of the answers', 'Setup', 2, 'multiple4', 1, 35),
(224, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', '___ time/delay is the time that the input must be stable after the rising edge of the clock ', 'Setup', 'Hold', 'CLK-to-Q', 'None of the answers', 'Hold', 2, 'multiple4', 1, 35),
(225, 'random_nums = [1, 1, 1, 0, 0, 0, 0, 0]\nshuffle(random_nums)\n\ndef generate_boolean_expression(_list):\n	all_products = []\n	if _list[0] == 1:\n		all_products.append(\'~P.~Q.~R\')\n	if _list[1] == 1:\n		all_products.append(\'~P.~Q.R\')\n	if _list[2] == 1:\n		all_products.append(\'~P.Q.~R\')\n	if _list[3] == 1:\n		all_products.append(\'~P.Q.R\')\n	if _list[4] == 1:\n		all_products.append(\'P.~Q.~R\')\n	if _list[5] == 1:\n		all_products.append(\'P.~Q.R\')\n	if _list[6] == 1:\n		all_products.append(\'P.Q.~R\')\n	if _list[7] == 1:\n		all_products.append(\'P.Q.R\')\n	return \'+\'.join(all_products)\n\nans = generate_boolean_expression(random_nums)\n\n\ncopy_list = random_nums[:]\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand1 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand2 = generate_boolean_expression(copy_list)\n\n# Shift by one\n#\ncopy_list.append(copy_list.pop(0))\ncand3 = generate_boolean_expression(copy_list)', '___ time/delay is how long it would take for the output to change, measured starting from the rising edge of the clock', 'Setup', 'Hold', 'CLK-to-Q', 'None of the answers', 'CLK-to-Q', 2, 'multiple4', 1, 35),
(226, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = str(cl_delay+setup_time+clk_to_q_delay) + \' nanoseconds\'', 'Given that the \'<span style=\"color: blue;\">cominational logic delay</span>\' is ***cl_delay*** nanoseconds, the \'<span style=\"color: blue;\">setup time</span>\' is ***setup_time*** nanoseconds, the \'<span style=\"color: blue;\">hold time</span>\' is ***hold_time*** nanoseconds, and the \'<span style=\"color: blue;\">CLK-to-Q delay</span>\' is ***clk_to_q_delay*** nanoseconds. What\'s the total delay?', 'Answer here...', 'Hold', 'CLK-to-Q', 'None of the answers', '***ans***', 4, 'input1', 1, 35),
(227, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1000.0 / (cl_delay+setup_time+clk_to_q_delay),2)', 'Given that the \'<span style=\"color: blue;\">cominational logic delay</span>\' is ***cl_delay*** nanoseconds, the \'<span style=\"color: blue;\">setup time</span>\' is ***setup_time*** nanoseconds, the \'<span style=\"color: blue;\">hold time</span>\' is ***hold_time*** nanoseconds, and the \'<span style=\"color: blue;\">CLK-to-Q delay</span>\' is ***clk_to_q_delay*** nanoseconds. What\'s the frequency (<span style=\"color: red;\">in MHz</span>)? (your answer shouldn\'t be a ratio x/y, round to 2 decimal places)', 'Answer here...', 'Hold', 'CLK-to-Q', 'None of the answers', '***ans***', 3, 'input1', 1, 35),
(228, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1.0 / (cl_delay+setup_time+clk_to_q_delay), 2)', 'Given that the \'<span style=\"color: blue;\">cominational logic delay</span>\' is ***cl_delay*** nanoseconds, the \'<span style=\"color: blue;\">setup time</span>\' is ***setup_time*** nanoseconds, the \'<span style=\"color: blue;\">hold time</span>\' is ***hold_time*** nanoseconds, and the \'<span style=\"color: blue;\">CLK-to-Q delay</span>\' is ***clk_to_q_delay*** nanoseconds. What\'s the frequency (<span style=\"color: red;\">in GHz</span>)? (your answer shouldn\'t be a ratio x/y, round to 2 decimal places)', 'Answer here...', 'Hold', 'CLK-to-Q', 'None of the answers', '***ans***', 3, 'input1', 1, 35),
(229, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1.0 / (cl_delay+setup_time+clk_to_q_delay), 2)', 'What\'s the portion of the processor that contains the hardware necessary to perform operations required by the processor', 'Datapath', 'Controller (or Control Unit)', 'RAM', 'Cache', 'Datapath', 2, 'multiple4', 1, 35),
(230, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1.0 / (cl_delay+setup_time+clk_to_q_delay), 2)', 'What\'s the portion of the processor that tells the datapath what needs to be done (the brain)', 'Bus', 'Controller (or Control Unit)', 'RAM', 'Cache', 'Controller (or Control Unit)', 2, 'multiple4', 1, 35),
(231, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1.0 / (cl_delay+setup_time+clk_to_q_delay), 2)', 'Which one of these stages will be active for all MIPS instructions?', 'Instruction Decode', 'ALU', '(Data) Memory Access', 'Register Write', 'Instruction Decode', 2, 'multiple4', 1, 35),
(232, 'cl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n\nans = round(1.0 / (cl_delay+setup_time+clk_to_q_delay), 2)', 'Which one of these stages will be active for all MIPS instructions?', 'Instruction Fetch', 'ALU', '(Data) Memory Access', 'Register Write', 'Instruction Fetch', 2, 'multiple4', 1, 35),
(233, 'five_stages = [\'Instruction Fetch\', \'Instruction Decode (and Register Read)\', \'ALU (Arithmetic Logic Unit)\', \'Memory Access\', \' Register Write\']\n\nall_inst = [[\'add\', True, True, True, False, True],\n[\'sub\', True, True, True, False, True],\n[\'addi\', True, True, True, False, True],\n[\'beq\', True, True, True, False, False],\n[\'bne\', True, True, True, False, False],\n[\'slt\', True, True, True, False, True],\n[\'sw\', True, True, True, True, False],\n[\'lw\', True, True, True, True, True]]\n\nrand_inst = randint(0, len(all_inst)-1)\nrand_stage = randint(0, 4)\n\nans = str(all_inst[rand_inst][rand_stage+1]).title()\n\ncl_delay = randint(2, 6)\nhold_time = randint(2, 3)\nsetup_time = randint(2, 6)\nclk_to_q_delay = hold_time + randint(2, 3)\n', 'The MIPS instruction ***all_inst[rand_inst][0]*** is active in the following stage: ***five_stages[rand_stage]***', 'True', 'False', '', '', '***ans***', 32, 'multiple2', 1, 35),
(234, 'rand_control_signal = randint(0, 5)\nall_instructions = [[\'add\', 1, \'X\', 1, 0, 1, 0],\n[\'sub\', 1, \'X\', 1, 0, 1, 0],\n[\'ori\', 0, 0, 1, 1, 1, 0],\n[\'lw\', 0, 1, 1, 1, 0, 0],\n[\'sw\', \'X\', 1, 0, 1, \'X\', 1]]\n\nrand_inst = randint(0, len(all_instructions)-1)\n\nans = all_instructions[rand_inst][rand_control_signal+1]', 'What\'s the value of ?<sub>***rand_control_signal***</sub>, given that our MIPS instruction is ***all_instructions[rand_inst][0]***?\n\n<div style=\"margin-top: 10px;\">\n	<img src=\"static/main/img/circuits/circuit05.png\" alt=\"Smiley face\" width=\"100%\">\n</div>', '1', '0', 'X', 'I have no idea; gotta study more', '***ans***', 30, 'multiple4', 1, 36),
(235, '', 'What\'s the <span style=\"color: blue;\">unsigned binary</span> sequence corresponding to the following decimal: ***v1,,randDecimal(0, 31)***', '***can1Ans,,decimalToUnsigned(^v1)***', '***can2Ans,,randBinary(0,31,0)***', '***can3Ans,,randBinary(0,31,0)***', '***can4Ans,,randBinary(0,31,0)***', '***ans,,decimalToUnsigned(^v1)***', 3, 'multiple4', -1, 40),
(236, '', 'What\'s the decimal value corresponding to the following <span style=\"color: blue;\">unsigned binary</span> sequence: ***v1,,randBinary(0, 31, 0)***', '***can1Ans,,binaryToDecimal(^v1)***', '***can2Ans,,randDecimal(0,31)***', '***can3Ans,,randDecimal(0,31)***', '***can4Ans,,randDecimal(0,31)***', '***ans,,binaryToDecimal(^v1)***', 3, 'multiple4', -1, 40),
(237, '', 'What\'s the <span style=\"color: blue;\">unsigned binary</span> sequence corresponding to the following decimal: ***v1,,randDecimal(0, 31)*** (use 0b notation)', 'Answer here...', '', '', '', '***ans,,decimalToUnsigned(^v1)***', 3, 'input1', -1, 40),
(238, '', 'What\'s the decimal value corresponding to the following <span style=\"color: blue;\">unsigned</span> binary sequence: ***v1,,randBinary(0, 31,0)***', 'Answer here...', '', '', '', '***ans,,binaryToDecimal(^v1)***', 3, 'input1', -1, 40),
(239, '', 'What\'s the <span style=\"color: blue;\">6-bit sign-magnitude</span> binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)***', '***ans,,decimalToSignMagnitude(^v1,6)***', '***can2Ans,,randBinary(0,63,6)***', '***can3Ans,,randBinary(0,63,6)***', '***can4Ans,,randBinary(0,63,6)***', '***ans,,decimalToSignMagnitude(^v1,6)***', 4, 'multiple4', -1, 40),
(240, '', 'What\'s the <span style=\"color: blue;\">6-bit sign-magnitude</span> binary sequence corresponding to the following decimal: ***v1,,randDecimal(-31, 31)*** (use 0b notation)', 'Answer here...', '', '', '', '***ans,,decimalToSignMagnitude(^v1,6)***', 4, 'input1', -1, 40),
(241, 'binarySequence = bin(randint(0, 63))\r\n\r\nwhile len(binarySequence) != 8:\r\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\r\n\r\nv1 = binarySequence\r\n\r\nans = int(binarySequence[3:], 2)\r\n\r\nif binarySequence[2] ==\'1\':\r\n	ans = ans * -1', 'What\'s the decimal value corresponding to the following <span style=\"color: blue;\">6-bit sign-magnitude</span> binary sequence: ***variable,v1***', '***ans***', '***randint(-31,31)***', '***randint(-31,31)***', '***randint(-31,31)***', '***ans***', 4, 'multiple4', -1, 40),
(242, 'binarySequence = bin(randint(0, 63))\r\n\r\nwhile len(binarySequence) != 8:\r\n	binarySequence = binarySequence[0:2] + \'0\' + binarySequence[2:]\r\n\r\nv1 = binarySequence\r\n\r\nans = int(binarySequence[3:], 2)\r\n\r\nif binarySequence[2] ==\'1\':\r\n	ans = ans * -1', 'What\'s the decimal value corresponding to the following <span style=\"color: blue;\">6-bit sign-magnitude</span> binary sequence: ***variable,v1***', 'Answer here...', '', '', '', '***ans***', 4, 'input1', -1, 40),
(243, 'v1 = randint(3, 7)', 'What\'s the <span style=\"color: blue;\">maximum</span> value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', '***2**(v1 - 1) - 1***', '***randint(1,63)***', '***randint(1,63)***', '***randint(1,63)***', '***2**(v1 - 1) - 1***', 4, 'multiple4', -1, 40),
(244, 'v1 = randint(3, 7)', 'What\'s the <span style=\"color: blue;\">minimum</span> value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', '***-1 * 2**(v1 - 1) + 1***', '***-1 * randint(1,63)***', '***-1 * randint(1,63)***', '***-1 * randint(1,63)***', '***-1 * 2**(v1 - 1) + 1***', 4, 'multiple4', -1, 40),
(245, 'v1 = randint(3, 7)', 'What\'s the <span style=\"color: blue;\">maximum</span> value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', 'Answer here...', '', '', '', '***2**(v1 - 1) - 1***', 4, 'input1', -1, 40),
(246, 'v1 = randint(3, 7)', 'What\'s the <span style=\"color: blue;\">minimum</span> value (in decimal) that can be represented using a ***variable,v1***-bit sign-magnitude binary sequence?', 'Answer here...', '', '', '', '***-1 * 2**(v1 - 1) + 1***', 4, 'input1', -1, 40);

--
-- Dumping data for table `main_subitem`
--

INSERT INTO `main_subitem` (`id`, `subItem_order`, `subItem_title`, `subItem_category`, `subItem_link`, `subItem_function`, `show`, `item_id`) VALUES
(3, 0, 'PDF Notes', 'PDF', 'anyLink', 'anyFunction', 0, 3),
(4, 20, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 3),
(5, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 8),
(6, 20, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 6),
(7, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 7),
(8, 10, 'Slides (HTML)', 'PDF', 'anyLink', 'anyFunction', 0, 3),
(9, 20, 'Practice Questions (Contributors)', 'Practice', 'anyLink', 'anyFunction', 0, 3),
(10, 10, 'Assigned Reading: (4th) P&H 2.4 | (5th) P&H 2.4', 'Note', 'anyLink', 'anyFunction', 1, 3),
(11, 10, 'Assigned Reading: (4th) P&H 2.4 | (5th) P&H 2.4', 'Note', 'anyLink', 'anyFunction', 1, 6),
(13, 10, 'We didn\'t cover this part in class, hence won\'t be in Quiz. Practice Questions Part I (Pointer to a Pointer)', 'Practice', 'anyLink', 'anyFunction', 1, 9),
(14, 80, 'Practice Questions PART II (Arrays and Pointers Part II)', 'Practice', 'anyLink', 'anyFunction', 1, 9),
(16, 50, 'Revisionist History Ep 04: Carlos Doesn\'t Remember', 'Link', 'http://revisionisthistory.com/episodes/04-carlos-doesnt-remember', 'anyFunction', 0, 9),
(17, 60, 'Revisionist History Ep 05: Food Fight', 'Link', 'http://revisionisthistory.com/episodes/05-food-fight', 'anyFunction', 0, 9),
(18, 60, 'Revisionist History Ep 06: My Little Hundred Million (Interview with John Hennessey)', 'Link', 'http://revisionisthistory.com/episodes/06-my-little-hundred-million', 'anyFunction', 0, 9),
(19, 10, 'Assigned Reading: (4th) P&H 2.1 & 2.2 | (5th) P&H 2.1 & 2.2', 'Note', 'anyLink', 'anyFunction', 1, 10),
(20, 10, 'Assigned Reading: (4th) P&H 2.2 & 2.3 | (5th) P&H 2.2 & 2.3', 'Note', 'anyLink', 'anyFunction', 1, 11),
(21, 10, 'Practice Questions Part I (Trace MIPS Code)', 'Practice', 'anyLink', 'anyFunction', 1, 11),
(22, 10, 'Practice Questions Part II (Convert C to  MIPS)', 'Practice', 'anyLink', 'anyFunction', 1, 11),
(23, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 10),
(24, 10, 'Practice Questions Part I', 'Practice', 'anyLink', 'anyFunction', 1, 12),
(25, 10, 'Practice Questions Part II', 'Practice', 'anyLink', 'anyFunction', 1, 12),
(26, 10, 'Assigned Reading: (4th) P&H 2.7 | (5th) P&H 2.7', 'Note', 'anyLink', 'anyFunction', 1, 23),
(27, 10, 'Assigned Reading: (4th) P&H 2.8 & Appendix B.6 | (5th) P&H 2.8 & Appendix A.6', 'Note', 'anyLink', 'anyFunction', 1, 24),
(28, 20, 'Practice Questions Part I (MIPS to Binary)', 'Practice', 'anyLink', 'anyFunction', 1, 25),
(29, 20, 'Practice Questions Part II (Binary to MIPS)', 'Practice', 'anyLink', 'anyFunction', 1, 25),
(30, 10, 'Assigned Reading: Appendix B.1 (Introduction) & Appendix B.2 (Gates, Truth Tables, and Logic Equations)', 'Note', 'anyLink', 'anyFunction', 1, 26),
(31, 10, 'Assigned Reading: Appendix B.3 (Subtopics \"Multiplexors\" & \"Don\'t Cares\") & Appendix B.5 (Subtopics \"A 1-Bit-ALU\" & \"A 32-Bit ALU\")', 'Note', 'anyLink', 'anyFunction', 1, 27),
(32, 20, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 26),
(33, 10, 'Practice Questions Part I (No Dont Cares)', 'Practice', 'anyLink', 'anyFunction', 1, 28),
(34, 20, 'Practice Questions Part II (With Dont Cares)', 'Practice', 'anyLink', 'anyFunction', 1, 28),
(35, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 29),
(36, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 30),
(37, 10, '', 'Audio', '/static/main/audio/PP3692963319_ep4', 'anyFunction', 1, 31),
(38, 10, '', 'Audio', '/static/main/audio/PP3941264909_ep5', 'anyFunction', 1, 32),
(39, 10, '', 'Audio', '/static/main/audio/PP7918990166_ep6', 'anyFunction', 1, 33),
(40, 10, 'Practice Questions', 'Practice', 'anyLink', 'anyFunction', 1, 34);

--
-- Dumping data for table `main_topic`
--

INSERT INTO `main_topic` (`id`, `topic_order`, `topic_title`, `topic_date`, `week_id_id`) VALUES
(2, 0, 'Number Representation Part I', '2017-08-22', 1),
(3, 0, 'Number Representation Part II', '2017-08-24', 1),
(4, 1, 'Introduction to C Part I', '2017-08-29', 2),
(5, 0, 'Introduction to C Part II', '2017-08-31', 2),
(6, 1, 'Introduction to C Part III', '2017-09-05', 3),
(7, 1, 'MIPS Assembly Programming Language Part I', '2017-09-07', 3),
(8, 1, 'MIPS Assembly Programming Language Part II', '2017-09-14', 4),
(9, 1, 'MIPS Assembly Programming Language Part III', '2017-09-19', 5),
(10, 1, 'MIPS Assembly Programming Language Part IV', '2017-09-21', 5),
(11, 1, 'MIPS Assembly Programming Language Part V', '2017-09-26', 6),
(13, 1, 'MIPS Assembly Programming Language Part VI', '2017-09-28', 6),
(14, 0, 'First Exam', '2017-10-10', 8),
(15, 0, 'MIPS Assembly Programming Language Part VII', '2017-10-03', 7),
(16, 10, 'MIPS Assembly Programming Language Part VIII', '2017-10-05', 7),
(17, 0, 'Combinational Logic Part I: Gates\n', '2017-10-17', 9),
(19, 0, 'Combinational Logic Part II: Half adder, Full adder, & Muxes\n', '2017-10-19', 9),
(21, 0, 'Combinational/Sequential Logic Part I: Adders, Subtracters, Functional Completeness, & Domino Computers', '2017-10-24', 10),
(22, 0, 'Combinational/Sequential Logic Part II: Flip-flops, The Bus, Enablers, Decoders, Accessing the Memory, Circuit Delay, & The Clock', '2017-10-26', 10),
(27, 0, 'CPU Clock & Single-cycle Datapath Part I\n', '2017-10-31', 11),
(28, 0, 'Single-cycle Datapath Part II & The Control Unit', '2017-11-02', 11),
(29, 0, 'Pipelining & Pipelining Hazards Part I', '2017-11-07', 12),
(30, 0, 'Second Exam', '2017-11-09', 12),
(32, 0, 'Pipelining & Pipelining Hazards Part II', '2017-11-14', 13),
(33, 0, 'Pipelining & Pipelining Hazards Part III', '2017-11-16', 13),
(34, 0, 'Cache Part I', '2017-11-28', 15),
(36, 0, 'Cache Part II', '2017-11-30', 15),
(37, 0, 'Floating-Point Representation', '2017-11-21', 14),
(38, 2, 'Revisionist Histroy (Ep. 4 to Ep. 7)', '2017-11-30', 15),
(39, 0, 'CALL: Compiling, Assembling, Linking, and Loading', '2017-10-12', 8),
(41, 0, 'Thanksgiving Holiday (No Class)', '2017-11-23', 14),
(42, 0, 'Classes Canceled Due to Hurricane Irma', '2017-09-12', 4),
(43, 0, '', '2017-09-20', 16);

--
-- Dumping data for table `main_week`
--

INSERT INTO `main_week` (`id`, `week_order`, `week_title`, `week_start_date`, `semester`) VALUES
(1, 1, 'Week 01', '2017-01-09', '2017spring'),
(2, 2, 'Week 02', '2017-01-16', '2017spring'),
(3, 3, 'Week 03', '2017-01-23', '2017spring'),
(4, 4, 'Week 04', '2017-01-30', '2017spring'),
(5, 5, 'Week 05', '2017-02-06', '2017spring'),
(6, 6, 'Week 06', '2017-02-06', '2017spring'),
(7, 7, 'Week 07', '2017-02-06', '2017spring'),
(8, 8, 'Week 08', '2017-02-06', '2017spring'),
(9, 9, 'Week 09', '2017-02-06', '2017spring'),
(10, 10, 'Week 10', '2017-02-06', '2017spring'),
(11, 11, 'Week 11', '2017-02-06', '2017spring'),
(12, 12, 'Week 12', '2017-02-06', '2017spring'),
(13, 13, 'Week 13', '2017-02-06', '2017spring'),
(14, 14, 'Week 14', '2017-02-06', '2017spring'),
(15, 15, 'Week 15', '2017-02-06', '2017spring'),
(16, -10, 'For CSCI220', '2017-01-09', '2017spring');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `main_item`
--
ALTER TABLE `main_item`
  ADD PRIMARY KEY (`id`),
  ADD KEY `main_item_topic_id_a4f03a5f_fk_main_topic_id` (`topic_id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `main_item`
--
ALTER TABLE `main_item`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=35;
--
-- Constraints for dumped tables
--

--
-- Constraints for table `main_item`
--
ALTER TABLE `main_item`
  ADD CONSTRAINT `main_item_topic_id_a4f03a5f_fk_main_topic_id` FOREIGN KEY (`topic_id`) REFERENCES `main_topic` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
